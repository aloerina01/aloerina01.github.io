<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://aloerina01.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aloerina01.github.io/" rel="alternate" type="text/html" /><updated>2021-12-01T08:59:41+00:00</updated><id>https://aloerina01.github.io/feed.xml</id><title type="html">mille-feuille code</title><subtitle>Web Developer。同じような過ちを繰り返さないように備忘録を残しています。
</subtitle><entry><title type="html">スクラムチームがぶち当たる「相対見積もり」の壁と、私たちの乗り越え方</title><link href="https://aloerina01.github.io/blog/2021-10-29-1" rel="alternate" type="text/html" title="スクラムチームがぶち当たる「相対見積もり」の壁と、私たちの乗り越え方" /><published>2021-10-29T00:00:00+00:00</published><updated>2021-10-29T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2021-10-29-1">&lt;p&gt;これまでエンジニアやスクラムマスターとしてスクラムチームに関わって来ましたが、その過程で何度も「相対見積もり」や「ストーリーポイント」に纏わる悩みにぶち当たってきました。工数や期間での見積もりに慣れていた私にとって、それらは理解も実践もしにくい手強いものでした。&lt;/p&gt;

&lt;p&gt;今回は、私が実際に直面した問題と、それらを打破するためチームで取り組んできたことを思い返してみようと思います。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#壁1-相対見積もりの考え方を理解できない&quot; id=&quot;markdown-toc-壁1-相対見積もりの考え方を理解できない&quot;&gt;壁1. 「相対見積もり」の考え方を理解できない&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#壁2-ストーリーポイントが何を見積もる手段かを理解していない&quot; id=&quot;markdown-toc-壁2-ストーリーポイントが何を見積もる手段かを理解していない&quot;&gt;壁2. ストーリーポイントが「何を見積もる手段か」を理解していない&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#壁3-見積もりをコミットメントと捉えてしまう&quot; id=&quot;markdown-toc-壁3-見積もりをコミットメントと捉えてしまう&quot;&gt;壁3. 見積もりをコミットメントと捉えてしまう&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;壁1-相対見積もりの考え方を理解できない&quot;&gt;壁1. 「相対見積もり」の考え方を理解できない&lt;/h3&gt;

&lt;p&gt;バックログ上に積まれたユーザーストーリーやエピックを見積もろうとしたとき、私たちは真っ先に「こんなコンポーネントを新規実装するだろう、おそらく2日くらい掛かる」「あの既存機能をいじる必要があるが、複雑な箇所なので時間がかかりそうだ」と&lt;strong&gt;具体的な作業内容とそれにかかる時間をセットで&lt;/strong&gt;イメージしていました。それらを足し合わせて(さらにバッファを加えて)最終的な見積もりを出していました。&lt;/p&gt;

&lt;p&gt;しかし、これは相対見積もりではありません。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相対的に見積もるには、過去に取り組んだ仕事を基準とし、その仕事との比較で考える&lt;/strong&gt;必要があります。ストーリーポイントで見積もるにせよ、日数で見積もるにせよ、です。&lt;br /&gt;
これを理解し体に馴染ませるために、見積もりの度に「このストーリーは(基準としている)あの仕事と同じくらい？ 倍くらい？ 半分くらい？」と聞き合うようことを繰り返しました。今では基準と比較することにも慣れてきましたが、長いこと苦戦した問題でした。苦戦した要因は、次の『壁2』で紹介する問題と合わさって、相対見積もりをより難しく捉えていたからでもあります。&lt;/p&gt;

&lt;h3 id=&quot;壁2-ストーリーポイントが何を見積もる手段かを理解していない&quot;&gt;壁2. ストーリーポイントが「何を見積もる手段か」を理解していない&lt;/h3&gt;

&lt;p&gt;ストーリーポイントの考え方は、慣れるまでは分かるようで分からないものでした。分かったつもりになっていた私がよくやった失敗は、「このストーリーは基準の2倍くらいの4日程度かかりそう、であればポイントは５だ」と期間を見積もりストーリーポイントに換算してしまうことでした。これはまさしくストーリーポイントの用途を理解していないことの現れです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ストーリーポイントは「規模」を見積もります&lt;/strong&gt;。規模を「作業量」と言い換えることもできます。ストーリーポイントを使う理由は、&lt;strong&gt;作業量の見積もりと期間の見積もりを分離して行うこと&lt;/strong&gt;だと考えると分かりやすかったです。上述の失敗例では期間を見積もってからストーリーポイントに変換していますが、本来のストーリーポイントの使い方に習うなら、&lt;strong&gt;ストーリーポイントによって作業量を見積もり、ベロシティと照らし合わせて期間を導き出す&lt;/strong&gt;が正解です。&lt;/p&gt;

&lt;p&gt;私たちがこの考えに馴染めず苦労した背景には、「相対見積もりをするならストーリーポイント(またはTシャツサイズ等のそれに準ずるもの)を利用しなければならない」と思い込んでいたことがあります。また、いくつかあるストーリーポイントの利点をチームメンバー各々が断片的に知り、それを利用目的だと思い込んでいたことも要因でした。例えば「ストーリーポイントを使えば個々人の力量に依存しない見積もりができること」や「ストーリーポイントを使えば仕様が曖昧でも見積もれること」を、ストーリーポイントを採用する理由だと思っていました。&lt;br /&gt;
そういった利点は多々あるものの、本質的には&lt;strong&gt;ストーリーポイントは「期間」と「作業量」を切り離し別々に見積もる道具&lt;/strong&gt;だと腹落ちしたことで前進しました。&lt;/p&gt;

&lt;p&gt;とはいえ、理解できてもすぐにうまく実践できたわけではありません。&lt;/p&gt;

&lt;h3 id=&quot;壁3-見積もりをコミットメントと捉えてしまう&quot;&gt;壁3. 見積もりをコミットメントと捉えてしまう&lt;/h3&gt;

&lt;p&gt;先述の2つの壁を少しずつ乗り越え、ストーリーポイントを使った相対見積もりに慣れてくると、仕様が固まっていない曖昧な案件に対しても見積もりをするようになりました。言い換えると、作業量の見積もりに「複雑さ」を加味するようになりました。&lt;/p&gt;

&lt;p&gt;「この手の案件はステークホルダーの時間が取りにくく後になって仕様がひっくり返るケースがある」「細かい仕様は決まってないけど、この画面の機能をいじるのであればおそらく作業量はこのくらいになる」と、&lt;strong&gt;作業量に複雑さをかけ合わせたものにポイントをつける&lt;/strong&gt;ようになりました。&lt;/p&gt;

&lt;p&gt;このやり方は一長一短だとは思いますがそれはさておき、より深刻な失敗だったことは、一度見積もったポイントは根性で守り抜こうとしていたことです。もちろん期限を守ることはエンジニアには必須です。ただし&lt;strong&gt;見積もりはコミットメントではない&lt;/strong&gt;ということも忘れてはなりません。見積もりを基にコミットメントを決めることはありますが、見積もりのすべてがコミットメントになるわけではないのです。&lt;/p&gt;

&lt;p&gt;“不確実性のコーン”と表現されるように、見積もりは初期段階ほど不正確です。ましてや私たちのように複雑さを加味するのであれば尚更です。ですので作業量に影響する要素が明らかになる度に&lt;strong&gt;再見積もり&lt;/strong&gt;をし、その確度(実現可能性)を上げることが必要でした。&lt;br /&gt;
加えて、プランナーと「あとどんな情報が揃えば再見積もりができるか」や「見積もりと実働がズレたらどう対応していくか」などについて事前に認識を合わせておくことも、再見積もりを繰り返すプロセスを維持するために必要でした。&lt;/p&gt;

&lt;p&gt;見積もりの確度がどの程度かは、見積もった私たちにしか分かりません。ですのでそれを丁寧にステークホルダーに共有し、確度に応じたプランを用意しておくところまでをセットで行うよう習慣化することで、周囲から再見積もりのプロセスの理解を得やすくなると考えています。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;「相対見積もりといえばストーリーポイントでしょ！」と勢いで始めたもののなかなか定着せず、効果を得られなかった私が、どのような問題に陥っていたかを紹介しました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;相対見積もりとストーリーポイントをごちゃまぜに捉えていたこと&lt;/li&gt;
  &lt;li&gt;ストーリーポイントにより「作業量」を見積もり、その値から「期間」を算出する、という根本的な考え方を理解していなかったこと&lt;/li&gt;
  &lt;li&gt;再見積もりをして確度をあげようとしていなかったこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらが主な失敗でした。乗り越えるためには失敗を自覚し向き合うことはもちろん大事ですが、併せて根気も必要だったと思います。時間をかけて実践とふりかえりを重ねてようやく今の理解度に到達できたので、総括すると「根気強く向き合う」が私たちの乗り越え方だったと言えるかもしれません。と言っても、まだ完璧な相対見積もりができているわけではないので、これからも新しい壁にぶつかりながら試行錯誤していこうと思います。&lt;/p&gt;

&lt;p&gt;最後に、参考書籍を紹介して締めくくります。&lt;br /&gt;
いろいろ読みましたが、一番理解が捗ったのは&lt;a href=&quot;https://amzn.to/3ny06zy&quot; target=&quot;_blank&quot;&gt;アジャイルな見積りと計画づくり ～価値あるソフトウェアを育てる概念と技法～&lt;/a&gt;でした。同じような悩みを持つ開発者の手助けになれば幸いです。&lt;/p&gt;</content><author><name></name></author><summary type="html">これまでエンジニアやスクラムマスターとしてスクラムチームに関わって来ましたが、その過程で何度も「相対見積もり」や「ストーリーポイント」に纏わる悩みにぶち当たってきました。工数や期間での見積もりに慣れていた私にとって、それらは理解も実践もしにくい手強いものでした。</summary></entry><entry><title type="html">esbuild 入門者のための書き置き</title><link href="https://aloerina01.github.io/blog/2021-09-15-1" rel="alternate" type="text/html" title="esbuild 入門者のための書き置き" /><published>2021-09-15T00:00:00+00:00</published><updated>2021-09-15T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2021-09-15-1">&lt;p&gt;最近開発環境を改善する機会が減っていて、Babelやらwebpackやらの情報を追っていませんでした。が、チームメンバーが爆速なesbuildを導入してくれて感動したのを機に、久々にフロントエンドの開発環境について考えてみました。&lt;/p&gt;

&lt;p&gt;今回は手始めに、初めてesbuildに触ったときに感じた「これなに」「どう使うの」「気をつけることは」あたりを書き置きしておきます。ちなみに執筆時点でのesbuildのバージョンは&lt;a href=&quot;https://github.com/evanw/esbuild/releases/tag/v0.12.28&quot; target=&quot;_blank&quot;&gt;0.12.28&lt;/a&gt;です。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#esbuild-とは&quot; id=&quot;markdown-toc-esbuild-とは&quot;&gt;esbuild とは&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#使い方&quot; id=&quot;markdown-toc-使い方&quot;&gt;使い方&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#利用例&quot; id=&quot;markdown-toc-利用例&quot;&gt;利用例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#気をつけたいこと&quot; id=&quot;markdown-toc-気をつけたいこと&quot;&gt;気をつけたいこと&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#css-modules未対応&quot; id=&quot;markdown-toc-css-modules未対応&quot;&gt;CSS Modules未対応&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tsconfigの解釈&quot; id=&quot;markdown-toc-tsconfigの解釈&quot;&gt;tsconfigの解釈&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#動的import-code-splittingの展望&quot; id=&quot;markdown-toc-動的import-code-splittingの展望&quot;&gt;動的import, Code Splittingの展望&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#es5との付き合い方&quot; id=&quot;markdown-toc-es5との付き合い方&quot;&gt;ES5との付き合い方&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#top-lebel-await未対応&quot; id=&quot;markdown-toc-top-lebel-await未対応&quot;&gt;top-lebel await未対応&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわり&quot; id=&quot;markdown-toc-おわり&quot;&gt;おわり&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;esbuild-とは&quot;&gt;&lt;a href=&quot;https://github.com/evanw/esbuild&quot; target=&quot;_blank&quot;&gt;esbuild&lt;/a&gt; とは&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;An extremely fast JavaScript bundler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とにかく速さに重点を置いたバンドラのようです。バンドラということは、並列で比較できるものは&lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;、&lt;a href=&quot;https://rollupjs.org/&quot; target=&quot;_blank&quot;&gt;rollup.jp&lt;/a&gt;、&lt;a href=&quot;https://ja.parceljs.org/&quot; target=&quot;_blank&quot;&gt;Parcel&lt;/a&gt;などです。バンドルと同時にトランスパイルもしてくれるようなので、その点で言えば&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/babel-with-typescript.html&quot; target=&quot;_blank&quot;&gt;tsc&lt;/a&gt;や&lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot;&gt;Babel&lt;/a&gt;が比較対象になるでしょう。&lt;/p&gt;

&lt;p&gt;esbuildは標準で、JS、JSX、TS、TSX、CSS、JSONなどを解釈しバンドルします。パッと見た感じはビルドに必要な一連の処理を担ってくれる印象ですが、&lt;strong&gt;ES5への変換に未対応&lt;/strong&gt;だったり、TypeScriptを解釈するものの&lt;strong&gt;型チェックはしなかったり&lt;/strong&gt;と、ビルド時によく使われる機能が一部ないので、利用の際は要件に合うかの確認が必要そうです。&lt;/p&gt;

&lt;h3 id=&quot;使い方&quot;&gt;使い方&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -D esbuild&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npx esbuild --bundle ./index.js&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;configファイルなしで実行できるので、&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;して即利用できます。基本的なオプションも揃っています。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;効果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--bundle&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;依存関係をインライン化します。esbuildはデフォルトでは依存関係をバンドルに含まないので、明示的に有効化する必要があります。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--minify&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;ビルドしたファイルを圧縮します。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--watch&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;ウォッチモードを有効にします。ファイルの変更を検知して再ビルドが走るようになります。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--target&lt;/code&gt;&lt;br /&gt;例: &lt;code class=&quot;highlighter-rouge&quot;&gt;-target=es2020,chrome58,node12&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;ビルド後に生成するJSのターゲット環境を指定します。デフォルトは&lt;code class=&quot;highlighter-rouge&quot;&gt;esnext&lt;/code&gt;です。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--sourcemap&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;sourcemapを生成します。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--define&lt;/code&gt;&lt;br /&gt;例: &lt;code class=&quot;highlighter-rouge&quot;&gt;--define:DEBUG=true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;グローバル変数を定義します。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--splitting&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Code Splitting を有効化しますが、まだWIPのオプションです。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;自分がよく使いそうなものをピックアップしました。これ以外のオプションは&lt;a href=&quot;https://esbuild.github.io/api/#build-api&quot; target=&quot;_blank&quot;&gt;公式&lt;/a&gt;をご確認ください。&lt;/p&gt;

&lt;h3 id=&quot;利用例&quot;&gt;利用例&lt;/h3&gt;

&lt;p&gt;ES5に変換できないので、Production buildには使いにくいのが現状です。ですのでProduction buildは今まで通りwebpackを使って、Development buildにesbuildを利用するのが無難だと思います。&lt;a href=&quot;https://github.com/privatenumber/esbuild-loader&quot; target=&quot;_blank&quot;&gt;esbuild-loader&lt;/a&gt;を使うとwebpack上でesbuildを利用できます。&lt;/p&gt;

&lt;h3 id=&quot;気をつけたいこと&quot;&gt;気をつけたいこと&lt;/h3&gt;

&lt;p&gt;まだBeta版ということもあって気をつけたほうが良いことはいっぱいあるとは思いますが、私がドキュメントやIssueを見ていて目に止まった部分を書き置きしておきます。&lt;/p&gt;

&lt;h4 id=&quot;css-modules未対応&quot;&gt;CSS Modules未対応&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;0.7.7でExperimentalなCSSのサポートを開始&lt;/li&gt;
  &lt;li&gt;sass/scssの対応はまだの様子&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/evanw/esbuild/issues/20&quot; target=&quot;_blank&quot;&gt;Issue&lt;/a&gt;にて議論中&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tsconfigの解釈&quot;&gt;tsconfigの解釈&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;TS, TSXをビルドするときはtsconfigの設定を読み取る&lt;/li&gt;
  &lt;li&gt;tsconfigの特定フィールドのみ参照される、詳細は&lt;a href=&quot;https://esbuild.github.io/content-types/#tsconfig-json&quot; target=&quot;_blank&quot;&gt;公式&lt;/a&gt;にて&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;動的import-code-splittingの展望&quot;&gt;動的import, Code Splittingの展望&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;動的importの構文には対応している&lt;/li&gt;
  &lt;li&gt;現時点ではCode SplittingはESMのみ対応してるが、ほかのモジュール形式も対応していくつもり&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/evanw/esbuild/issues/16&quot; target=&quot;_blank&quot;&gt;Issue&lt;/a&gt;にて議論中&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;es5との付き合い方&quot;&gt;ES5との付き合い方&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--target=es5&lt;/code&gt;とした場合、元々ES5のコードはES5のままになるが、ES6のコードをES5に変換することはない&lt;/li&gt;
  &lt;li&gt;今後ES5に対応することはなさそう&lt;/li&gt;
  &lt;li&gt;参考&lt;a href=&quot;https://github.com/evanw/esbuild/issues/297&quot; target=&quot;_blank&quot;&gt;Issue&lt;/a&gt;はこちら&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;top-lebel-await未対応&quot;&gt;top-lebel await未対応&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;今後もしばらくは対応できそうにない&lt;/li&gt;
  &lt;li&gt;細かい議論は&lt;a href=&quot;https://github.com/evanw/esbuild/issues/253&quot; target=&quot;_blank&quot;&gt;Issue&lt;/a&gt;にて&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;おわり&quot;&gt;おわり&lt;/h3&gt;

&lt;p&gt;以上、簡単ですがesbuildについての書き置きです。&lt;br /&gt;
冒頭にも書いたように、最近は環境構築する頻度が減っているので、おそらく数カ月後に久々にesbuildを使おうとして右往左往している自分がいることでしょう。そのときに少しでも役立てばいいなと思います(バージョンが進んでほとんど役立たなくなっているかもしれませんが😫)。&lt;/p&gt;</content><author><name></name></author><summary type="html">最近開発環境を改善する機会が減っていて、Babelやらwebpackやらの情報を追っていませんでした。が、チームメンバーが爆速なesbuildを導入してくれて感動したのを機に、久々にフロントエンドの開発環境について考えてみました。</summary></entry><entry><title type="html">穏やかで簡潔なHAPPYコードレビューを実現するChrome拡張をつくってみた</title><link href="https://aloerina01.github.io/blog/2021-07-15-1" rel="alternate" type="text/html" title="穏やかで簡潔なHAPPYコードレビューを実現するChrome拡張をつくってみた" /><published>2021-07-15T00:00:00+00:00</published><updated>2021-07-15T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2021-07-15-1">&lt;p&gt;コードレビュー時に思うように意図が伝わらず、会話のラリーがやたら増えてしまったり、詰問合戦のようなギスギスした雰囲気になってしまったことありませんか？ 私はあります。もう少し気持ちよく無駄なくレビューできないものかと思っていたのですが、先日ふと思いついた対処策があったので試してみました。&lt;/p&gt;

&lt;h3 id=&quot;つくったもの&quot;&gt;つくったもの&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-07-15-1.gif&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;コードレビュー時に「アイデア」「質問したい」「議論したい」「修正したい」の4つのアイキャッチをお手軽に付与できるようにするChrome拡張です。&lt;/p&gt;

&lt;h3 id=&quot;解決したかった問題&quot;&gt;解決したかった問題&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;「ここ、なんでこう実装したんですか？」&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;こんな質問をしたレビュワーにはどんな意図があるでしょうか。こんな質問を受け取ったレビュイーはどう感じるでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;レビュワーの意図&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;他にもいろいろ実現手段がある中でこの方法を採用した根拠を知りたい&lt;/li&gt;
  &lt;li&gt;特殊な背景があるようだったらコメントを残すようにお願いしたい&lt;/li&gt;
  &lt;li&gt;納得できない実装方法だったので変えてほしい&lt;/li&gt;
  &lt;li&gt;自分には思いつかない方法だったので、経緯を聞いて学びたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;レビュイーの受け取り方&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;しまった、良くないやり方だったのかも知れない😣&lt;/li&gt;
  &lt;li&gt;散々悩んでたどり着いた解なんだよ、イチャモンつけるな…😡&lt;/li&gt;
  &lt;li&gt;どの選択肢を取るかは「決め」の問題なのになぜ突っ込んできたんだろう🤔&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このようにパッと思いつくだけでもいろいろな意図があり、感じ方があります。意図を含めて互いに丁寧にコメントし合うことができれば最高ですが、言葉選びはレビュワーによりムラが出ますし、忙しいときに言葉足らずになってしまうことがあるかもしれません。レビュイーも見てほしい部分を適切に伝えることが難しいかもしれませんし、未完成の部分が混じっていることもあるでしょう(そして当たり前ですがこれはどちらが悪いかという話ではありません)。&lt;/p&gt;

&lt;p&gt;一人ひとりが解決するのは難しい、だったらツールで解決しよう、という経緯で開発に至りました。&lt;/p&gt;

&lt;h3 id=&quot;コンセプト&quot;&gt;コンセプト&lt;/h3&gt;

&lt;p&gt;アイキャッチには「〜したい」と書かれています。「〜すべき」「〜してください」といった言葉は使われていません。&lt;/p&gt;

&lt;p&gt;多くの場面で、コードレビューにおける対話では互いの背景知識に差があります。実装者(レビュイー)の悩み抜いたプロセスやボツになった選択肢のすべてがレビュワーに見えているわけではありません。レビュワーが持つ広い視野やバイアスのない視点は、長い時間コードを見つめ続けてきた実装者には欠けがちです。&lt;br /&gt;
そういった互いの差に配慮しつつ、正しく自分の考えを伝える(汲み取ってもらう)には、&lt;strong&gt;「〜すべき」といった断定的な言い方や「〜してください」といった命令的な言い回しでは力不足&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;代わりに、効果的にレビューを進める言い回しが「〜したい」という主観的な表現です。&lt;/p&gt;

&lt;p&gt;私たちがレビューの場でしている会話は、実は「何が正しいか」「何が最適か」「このコードは良いか/悪いか」という&lt;strong&gt;事実を正しく理解するための会話&lt;/strong&gt;ではありません。「何を正しいと考えているか」「このコードをどうしたいか」という&lt;strong&gt;認識・解釈・価値観の会話&lt;/strong&gt;の会話です。ですので「(自分は)〜したい」と、主観的な認識を伝えようとすること、ひいては「私は自分のコメントが主観的なものだと自覚しているよ」と伝えることが、丁寧かつ効果的な会話に繋がります。&lt;/p&gt;

&lt;p&gt;「私は正しい、あなたは間違っている」という思い込みのもと行われる会話を減らし、&lt;strong&gt;違って当たり前の認識・解釈・価値観を互いにすり合わせる会話のきっかけを作る&lt;/strong&gt;ことが、今回つくったもののコンセプトなのです。&lt;/p&gt;

&lt;h3 id=&quot;実装の紹介&quot;&gt;実装の紹介&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aloerina01/pr_review_toys&quot; target=&quot;_blank&quot;&gt;aloerina01/pr_review_toys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使った技術&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TypeScript&lt;/li&gt;
  &lt;li&gt;Preact&lt;/li&gt;
  &lt;li&gt;Parcel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Github上のコメント入力欄を&lt;code class=&quot;highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;して、Preact製のプルダウンをマウントしているだけです。コードレビュー時のコメント入力欄はユーザーの操作により増減するので&lt;code class=&quot;highlighter-rouge&quot;&gt;MutationObserver&lt;/code&gt;で検知しています。&lt;br /&gt;
小さなアプリケーションをサクッとつくるときはParcelでバンドルすることが多いです。&lt;/p&gt;

&lt;p&gt;ちなみにストアでの提供はしていませんが、リポジトリのREADMEに使い方を記載していますので、気になった方は試してみてくださいね。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;今回作ったChrome拡張自体は大したものではありませんが、そのコンセプトには私がコミュニケーションにおいて大事にしている考え方が詰め込まれています。そしてその考え方は、&lt;a href=&quot;https://amzn.to/3yWHAoI&quot; target=&quot;_blank&quot;&gt;話す技術・聞く技術―交渉で最高の成果を引き出す「3つの会話」&lt;/a&gt;という本の内容が基盤になっています。日常生活の中で頻発する難しい会話を3つに分類し、なぜ難しいのか、どうすれば良くなるのか、について体系的にまとめた内容です。&lt;br /&gt;
何度も読み返していて、私のルーツのような本なので、もし読んだことがある方がいれば&lt;a href=&quot;https://twitter.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;まで感想を送ってくれると嬉しいです！&lt;/p&gt;</content><author><name></name></author><summary type="html">コードレビュー時に思うように意図が伝わらず、会話のラリーがやたら増えてしまったり、詰問合戦のようなギスギスした雰囲気になってしまったことありませんか？ 私はあります。もう少し気持ちよく無駄なくレビューできないものかと思っていたのですが、先日ふと思いついた対処策があったので試してみました。</summary></entry><entry><title type="html">Vuex5 Proposal リーディング - Vue3での状態管理はどう進化するのか</title><link href="https://aloerina01.github.io/blog/2021-05-18-1" rel="alternate" type="text/html" title="Vuex5 Proposal リーディング - Vue3での状態管理はどう進化するのか" /><published>2021-05-18T00:00:00+00:00</published><updated>2021-05-18T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2021-05-18-1">&lt;p class=&quot;note&quot;&gt;
この記事は&lt;a href=&quot;https://github.com/vuejs/rfcs/pull/271&quot; target=&quot;_blank&quot;&gt;Vuex5 RFC Proposal&lt;/a&gt;を参考にした内容です。正式リリース時には変更されている部分があるかもしれませんし、私自身も実際に触ってみて意見が変わる可能性があります。
&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#vuexの役割のおさらい&quot; id=&quot;markdown-toc-vuexの役割のおさらい&quot;&gt;Vuexの役割のおさらい&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vuex-5-の簡単なチュートリアル&quot; id=&quot;markdown-toc-vuex-5-の簡単なチュートリアル&quot;&gt;Vuex 5 の簡単なチュートリアル&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-storeの定義&quot; id=&quot;markdown-toc-1-storeの定義&quot;&gt;1. Storeの定義&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#option-store&quot; id=&quot;markdown-toc-option-store&quot;&gt;Option Store&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#composition-store&quot; id=&quot;markdown-toc-composition-store&quot;&gt;Composition Store&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-storeのインスタンス化&quot; id=&quot;markdown-toc-2-storeのインスタンス化&quot;&gt;2. Storeのインスタンス化&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-componentからstoreへのアクセス&quot; id=&quot;markdown-toc-3-componentからstoreへのアクセス&quot;&gt;3. ComponentからStoreへのアクセス&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#感想&quot; id=&quot;markdown-toc-感想&quot;&gt;感想&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vuexの役割のおさらい&quot;&gt;Vuexの役割のおさらい&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;this RFC focuses on making Vuex an official global state management tool for Vue&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vuexには、親子関係にないVueComponent間で状態を共有する機能、つまり&lt;strong&gt;グローバルな状態管理&lt;/strong&gt;機能を公式に提供する役割があります。今まではその実現手段としてFluxアーキテクチャをベースにしていましたが、Vuex5では脱却するようです。&lt;/p&gt;

&lt;p&gt;また、グローバルな状態管理に加えて、Vuexが持つべき要件が4つ定義されています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Code Splitting&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SSR 対応&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vue Devtools 対応&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vuex を利用した状態管理の拡張性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私がVuexに期待することもこの要件の通りなので、今後のリリースを楽しみに待ちたいと思います。&lt;/p&gt;

&lt;p&gt;ちなみにFluxには随分お世話になったし好みに合う考え方でした。時代とともに設計方法も進化していくもので今後利用頻度は減るかもしれませんが、頭の片隅に残っていてくれると、いつかどこかでシナジーが生まれるかもしれません。その日まで少しのお別れです。&lt;/p&gt;

&lt;h3 id=&quot;vuex-5-の簡単なチュートリアル&quot;&gt;Vuex 5 の簡単なチュートリアル&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Storeの定義&lt;/li&gt;
  &lt;li&gt;Storeのインスタンス化&lt;/li&gt;
  &lt;li&gt;ComponentからStoreへのアクセス&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の順でRFCにて紹介されています。&lt;/p&gt;

&lt;h4 id=&quot;1-storeの定義&quot;&gt;1. Storeの定義&lt;/h4&gt;

&lt;p&gt;Vuex5ではStoreの定義方法が2種類用意されています。&lt;strong&gt;Option Store&lt;/strong&gt; と &lt;strong&gt;Composition Store&lt;/strong&gt; です。Vueで用意されているOptions API, Composition APIに寄せた手法なので馴染みやすそうです。&lt;/p&gt;

&lt;h5 id=&quot;option-store&quot;&gt;Option Store&lt;/h5&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vuex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defineStore&lt;/code&gt;にstate, getters, actions等を含むオブジェクトを渡す形です。今までのVuexで書き慣れたプロパティなので分かりやすいですが、stateが関数になっている点は要注意です。mutationsは廃止されるようです。&lt;/p&gt;

&lt;h5 id=&quot;composition-store&quot;&gt;Composition Store&lt;/h5&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vuex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defineStore&lt;/code&gt;にkeyとsetup関数を渡す形式です。Vueの&lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;などのReactivity APIを使い回しているのが特徴的です。&lt;/p&gt;

&lt;h4 id=&quot;2-storeのインスタンス化&quot;&gt;2. Storeのインスタンス化&lt;/h4&gt;

&lt;p&gt;ここまでで定義してきたStoreは、Vuexインスタンスにregisterされることでインスタンス化されます。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;vuex.store&lt;/code&gt;関数に先程定義した&lt;code class=&quot;highlighter-rouge&quot;&gt;useCounter&lt;/code&gt;を渡しましょう。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createVuex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vuex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useCounter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/stores/counter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Option Store or Composition Store&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vuex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createVuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;インスタンス生成後は、&lt;code class=&quot;highlighter-rouge&quot;&gt;getters&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;などを使わずともStoreにアクセスできるようになりました。今までのVuexより直感的です。&lt;/p&gt;

&lt;p&gt;Composition Storeでは&lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt;を利用していてるので&lt;code class=&quot;highlighter-rouge&quot;&gt;counter.count.value&lt;/code&gt;としたいとことですが、その必要はないようです。Option StoreかCompositon Storeかを区別することなく実装できるのはいいですね。&lt;/p&gt;

&lt;p&gt;また、&lt;code class=&quot;highlighter-rouge&quot;&gt;vuex.store(useCounter)&lt;/code&gt;は初回実行時にStoreインスタンスを内部的に保持し、2回目以降の実行時にはそれを返す仕組みがあります。言い換えるとStoreは使用されるまで登録されないということになります。これはCode Splittingの観点でも恩恵があります。&lt;/p&gt;

&lt;h4 id=&quot;3-componentからstoreへのアクセス&quot;&gt;3. ComponentからStoreへのアクセス&lt;/h4&gt;

&lt;p&gt;ComponentがStoreを利用するためには、何はともあれ最初にVueアプリケーションにVuexインスタンスをinjectする必要があります。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createApp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createVuex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vuex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/App.vue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vuex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createVuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;準備ができたところで、&lt;strong&gt;Options APIで実装されたComponent&lt;/strong&gt;からのアクセス方法を見てみます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方法1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useCounter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/stores/counter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;double&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方法2&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapStores&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;vuex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useCounter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/stores/counter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mapStores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;useCounter&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// storeのkey &quot;counter&quot; でアクセスする&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;double&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;今までのVuexに似ていますね。&lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;でStoreの値を利用するか、&lt;code class=&quot;highlighter-rouge&quot;&gt;mapHelper&lt;/code&gt;を利用するか、の2択です。後者の方法では&lt;code class=&quot;highlighter-rouge&quot;&gt;vuex.store&lt;/code&gt;が暗黙的に実行されているようです。ちなみに&lt;code class=&quot;highlighter-rouge&quot;&gt;mapStores&lt;/code&gt;に渡されたStoreにアクセスする際は、&lt;code class=&quot;highlighter-rouge&quot;&gt;difneStore&lt;/code&gt;で定義した&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;の値が利用することになります。&lt;/p&gt;

&lt;p&gt;次に&lt;strong&gt;Compositon APIで実装されたComponent&lt;/strong&gt;からのアクセス方法です。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useCounter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/stores/Counter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;直感的でけっこう好みです。この方法だとStore定義を&lt;code class=&quot;highlighter-rouge&quot;&gt;useXxxx&lt;/code&gt;と命名する意味が実感できますね。&lt;/p&gt;

&lt;p&gt;以上が新しいVuexの使い方です。&lt;br /&gt;
RFCにはこれ以外にも、Store同士の依存関係、ハイドレーション、型注釈等の解説もありました。&lt;/p&gt;

&lt;h3 id=&quot;感想&quot;&gt;感想&lt;/h3&gt;

&lt;p&gt;今までは、Vuexのルールや制約の中でどれだけ依存関係を整えられるか、責務を分離できるか、再利用したい部品を適切に再利用できるか、といったことを悩み続けてきました。その軌跡はこのブログ上にもいくつかの記事として残っています。&lt;/p&gt;

&lt;p&gt;しかしこれからはComposition API と Composition Storeを使うことで、Store層は極限まで薄く最低限のものになり、Componentに持たせるロジックは切り出され、結果的に&lt;strong&gt;状態・View・ロジックがシンプルに分離された&lt;/strong&gt;構造となりそうです。そしてそれらの依存関係はFluxのように循環するのではなく、Viewが状態やロジックに依存する形になりそうです。&lt;/p&gt;

&lt;p&gt;これだけ聞くと、かつてのMVCのFat Contoller問題のような、Componentが依存で膨れ上がる可能性があるのでは……と思いましたがどうなんでしょう。Componentの切り方次第で良くも悪くもなりそうなので、今までとは違った切り口で設計する心の準備をしておこうと思います。&lt;/p&gt;

&lt;p&gt;話は変わりますが、React向けの状態管理ライブラリのRecoilに&lt;a href=&quot;https://recoiljs.org/docs/api-reference/core/Loadable&quot; target=&quot;_blank&quot;&gt;Loadable&lt;/a&gt;という非同期処理の状態を扱う仕組みがあるのですが、これに近いことがVuexでもできると良いなと漠然と思っています。stateの初期値を非同期で取得する場面や、ユーザの入力をActionsを通じてServerへ反映する場面などの、非同期の状態の扱いやViewへの反映がお手軽になると嬉しいです。&lt;/p&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/rfcs/pull/271&quot; target=&quot;_blank&quot;&gt;https://github.com/vuejs/rfcs/pull/271&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kiaking/rfcs/blob/vuex-5/active-rfcs/0000-vuex-5.md&quot; target=&quot;_blank&quot;&gt;https://github.com/kiaking/rfcs/blob/vuex-5/active-rfcs/0000-vuex-5.md&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/rfcs/discussions/270&quot; target=&quot;_blank&quot;&gt;https://github.com/vuejs/rfcs/discussions/270&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">この記事はVuex5 RFC Proposalを参考にした内容です。正式リリース時には変更されている部分があるかもしれませんし、私自身も実際に触ってみて意見が変わる可能性があります。</summary></entry><entry><title type="html">心理的安全を妨げる「対人リスク」を再定義して自分の行動原理と向き合う</title><link href="https://aloerina01.github.io/blog/2021-04-22-1" rel="alternate" type="text/html" title="心理的安全を妨げる「対人リスク」を再定義して自分の行動原理と向き合う" /><published>2021-04-22T00:00:00+00:00</published><updated>2021-04-22T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2021-04-22-1">&lt;p&gt;心理的安全という言葉の&lt;a href=&quot;https://web.mit.edu/curhan/www/docs/Articles/15341_Readings/Group_Performance/Edmondson%20Psychological%20safety.pdf&quot; target=&quot;_blank&quot;&gt;出典&lt;/a&gt;をたどると&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Team psychological safety is defined as a shared belief that the team is safe for interpersonal risk taking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあるように、心理的に安全かどうかは「対人リスクのある行動を起こせるかどうか」と捉えることができるわけですが、では対人リスクとは何でしょうか。&lt;/p&gt;

&lt;p&gt;心理的安全の研究者Amy Edmondson によれば、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;IGNORANT - 無知だと思われる不安&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;INCOMPETENT - 無能だと思われる不安&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;INTRUSIVE - 差し出がましいと思われる不安&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NEGATIVE - ネガティブだと思われる不安&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の4つが職場環境における対人リスクであると定義されています。&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;＊ ＊ ＊&lt;/p&gt;

&lt;p&gt;ところで、私たちのチームは少しずつ成熟してきていて、おかげで随分と対人リスクを感じないようになってきました。しかしそれでもなお行動しない・発言しない場面が自分の経験上あるので、その要因が何なのかを改めて考えてみようと思います。&lt;/p&gt;

&lt;p&gt;例えばブレストの場で新しいアイデアを出すとき、&lt;strong&gt;自分の思考を人に見られるような不安&lt;/strong&gt;を感じたことがあります。アイデアを出す時間なので邪魔をする人だとは思われないだろうし、日頃の関係性から無知無能だとも思われないだろうけれど、どこか言いにくい…という心境です。&lt;br /&gt;
他の例だと、チームメンバーの行動で改善してほしい部分を見つけたとき、日頃から良好な関係性が築けていたとしても&lt;strong&gt;慎重に言葉を選ばないと…というプレッシャーや面倒臭さ&lt;/strong&gt;からフィードバックを躊躇したことがあります。&lt;br /&gt;
その他にも、問題を指摘することでその対応が&lt;strong&gt;自分の仕事として降り掛かってくる負担&lt;/strong&gt;から発言を控えた場面など、例を挙げればいろいろ出てきます。&lt;/p&gt;

&lt;p&gt;Edmondson の対人リスクという分類を知る以前、私はこれらを3つのカテゴリに分けて捉えていました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;個性を出すリスク&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;プロセス・成果・失敗を見せるリスク&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;フィードバックするリスク&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Edmondson の対人リスクと比較しながら考えてみます。&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;＊ ＊ ＊&lt;/p&gt;

&lt;h4 id=&quot;個性を出すリスク&quot;&gt;個性を出すリスク&lt;/h4&gt;

&lt;p&gt;言い換えると自己開示するリスクとも言えます。自分の考え方・感じ方・価値観・ポリシー・アイデアなどを人に知られることへの心理的な抵抗により、行動を起こしにくくなることを表しています。端的に言うならば「&lt;strong&gt;内面を知られる不安&lt;/strong&gt;」です。&lt;/p&gt;

&lt;p&gt;この抵抗感は、IGNORANT / INCOMPETENT / INTRUSIVE / NEGATIVE だと思われるのでは…という不安が根底にあり、まさしくEdmondson の対人リスクであると捉えることができそうです。&lt;/p&gt;

&lt;p&gt;一方で、無知無能などとは思われたりしない信頼に足る関係性であったとしても行動を起こしたくない場面があります。私は「自分が人からどう見られているか」をコントールしたい節があり、無知無能といった悪評だけでなく、優秀・斬新・面白いなどの好評であっても、それが私が望まない評価であればもらいたくないと思うことがありました。&lt;/p&gt;

&lt;p&gt;このことから、Edmondson の対人リスクは「人が行動を起こさないすべての理由が網羅的に定義されたもの」と捉えるより、「対人リスクの代表例」くらいに捉えると良いのかもしれません。また対人リスクがどんな心理であれ、&lt;strong&gt;自分の印象を操作したいという気持ち&lt;/strong&gt;が根底にあると知ることに意義があるのだと思います。&lt;/p&gt;

&lt;h4 id=&quot;プロセス成果失敗を見せるリスク&quot;&gt;プロセス・成果・失敗を見せるリスク&lt;/h4&gt;

&lt;p&gt;自分の働く様子をじっくり見られることや、その結果を誇張なく正しく伝えること、ひいては失敗したことを率直に伝えることへのリスクです。言い換えると「業務を評価されるリスク」でしょうか。個性を出すリスクと対比的に見るなら「&lt;strong&gt;行動を見られる不安&lt;/strong&gt;」です。&lt;/p&gt;

&lt;p&gt;これはEdmondson の対人リスクにかなり近いものだと思います。&lt;/p&gt;

&lt;p&gt;ひとつ気になるのは、一部のエンジニアが時たま思う「書きかけのコードを見られたくない」という気持ちはプロセスを見せるリスクに含まれると思うのですが、Edmondson の対人リスクには分類できるのでしょうか…？ 製作中のものを見られる気恥ずかしさの根源が何なのか、私にはまだ分かっていないです。&lt;/p&gt;

&lt;h4 id=&quot;フィードバックするリスク&quot;&gt;フィードバックするリスク&lt;/h4&gt;

&lt;p&gt;特にネガティブフィードバックをするリスクです。先例のように信頼しあった関係であってもネガティブフィードバックは気が重いものです。Edmondson の対人リスクのINTRUSIVE やNEGATIVE に通ずるところがあるでしょう。&lt;/p&gt;

&lt;p&gt;ただそれだけではなく、ネガティブフィードバックはやや特殊な性質があるのではないでしょうか。INTRUSIVE やNEGATIVE に思われる不安と、&lt;strong&gt;利害要因&lt;/strong&gt;とを天秤にかけた上で、行動を起こすかどうかを判断しているように感じていました。&lt;br /&gt;
例えばエンジニアはコードレビューをします。これにはネガティブフィードバックが含まれています。沈痛な思いでコードレビューしている人もいると思いますが、そうであったとしてもネガティブフィードバックをすることの価値(コードレビューしないと何らかの形で自分が損をする、自分の望むものとかけ離れる、という気持ち)が優先され、リスクを乗り越え行動が生まれるのではないかと考えていました。&lt;/p&gt;

&lt;p&gt;ちなみにEdmondson は「心理的安全」と「責任やモチベーション」は相関関係にないと言っていて、コードレビューの例に当てはめるなら、心理的安全がやや欠けていても責任やモチベーションにより行動が生まれる、ということで説明がつくのかもしれません。&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;＊ ＊ ＊&lt;/p&gt;

&lt;p&gt;ここまで、自分が抱いていた対人リスクをEdmondson の対人リスクに当てはめて考え直してみました。私にとっての一番の気づきは&lt;strong&gt;対人リスクの元となる不安はなんであれ、自分の印象を操作したいという欲求が背景に潜んでいる&lt;/strong&gt;ということです。「自分をどう見られたいと思っているか」「なぜそのように見られたい/見られなくないと思っているか」と印象操作について掘り下げることで自分の行動原理と向き合うことができそうなので、引き続き考えていこうと思います。&lt;/p&gt;

&lt;p&gt;本日はここまで。&lt;/p&gt;</content><author><name></name></author><summary type="html">心理的安全という言葉の出典をたどると</summary></entry><entry><title type="html">Daily Scrum の3つの質問を再考する</title><link href="https://aloerina01.github.io/blog/2021-01-15-1" rel="alternate" type="text/html" title="Daily Scrum の3つの質問を再考する" /><published>2021-01-15T00:00:00+00:00</published><updated>2021-01-15T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2021-01-15-1">&lt;p&gt;かつてスクラムガイドにも載っていましたが、Daily Scrum でよく使われる「3つの質問」というものがありました。大雑把に書くと以下の3つです。&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;
&lt;ul&gt;
&lt;li&gt;昨日何をしたか&lt;/li&gt;
&lt;li&gt;今日何をするか&lt;/li&gt;
&lt;li&gt;障害や困っていることはあるか&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;私達のチームも今までこれを実践してきましたが、作業報告・進捗報告を一方的にしているだけで、誰が聞いているのかも誰の役に立っているのかも分からないと感じることがしばしばありました。&lt;/p&gt;

&lt;p&gt;その原因はいろいろあります。&lt;br /&gt;
例えばその一つになり得るものを挙げると、当時私たちのチームは「1つの仕事を全員で片付ける」ということができていませんでした。フロントエンドエンジニアは開発案件のフロントエンドのみを対応していて、そうすると次第にフロントエンドエンジニアとバックエンドエンジニアとで進行する案件がズレてきます。その結果他の人の仕事への関心が薄れていったり、内容を聞いても理解できず他人事となったりしていました。&lt;/p&gt;

&lt;p&gt;もちろんこういった一つ一つがチームの課題であって、これを改善することが根本的には必要です。だけれどもそれには時間がかかるし、組織的な都合や壁などもあります。そのすべてが解決されるまでの間ずっと Daily Scrum が役立たない時間になってしまうのは嫌ですよね。&lt;/p&gt;

&lt;p&gt;そこで「&lt;strong&gt;互いの業務内容は40〜70％程度の理解でも、お互いの状況を適切に理解しあってスプリントゴールへ向けた再調整を実践する&lt;/strong&gt;」ための3つの質問を再考してみました。&lt;/p&gt;

&lt;div class=&quot;revision&quot;&gt;
&lt;ul&gt;
&lt;li&gt;昨日は何％くらいのパフォーマンスを発揮できたか&lt;/li&gt;
&lt;li&gt;その要因は何だと感じたか&lt;/li&gt;
&lt;li&gt;スプリントの計画に変更は必要そうか&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;1つずつ意図を説明していきます。&lt;/p&gt;

&lt;h3 id=&quot;1昨日は何くらいのパフォーマンスを発揮できたか&quot;&gt;1. 昨日は何％くらいのパフォーマンスを発揮できたか&lt;/h3&gt;

&lt;p&gt;簡単に言えば自己採点です。「仕事が進んだかどうか」または「やったかどうか」ではなく、どれくらいのパフォーマンスを発揮できたかを伝え合います。&lt;/p&gt;

&lt;p&gt;たとえば連日100％のパフォーマンスを発揮していると伝えていたがスプリント終了時にプランニングした内容が完了しなかった場合、そのプランニングには無理があった可能性があるでしょう。&lt;br /&gt;
たとえばパフォーマンスが50％の日が続くメンバーがいる場合、スプリントゴールが達成されない可能性があるので何らかのリカバリーが必要だろうと気付けるかもしれません。&lt;/p&gt;

&lt;p&gt;互いの仕事内容を詳細まで正確に理解しあっていなかったとしても、この質問であれば進行度合いをざっくりと把握し合えるのではないかと思います。&lt;/p&gt;

&lt;h3 id=&quot;2-その要因は何だと感じたか&quot;&gt;2. その要因は何だと感じたか&lt;/h3&gt;

&lt;p&gt;パフォーマンスが左右される要因は人によって違いますし、状況によっても違います。ミーティングが多くて作業時間が細切れになることが影響するかもしれないし、花粉症のせいで集中が途切れるかもしれないし、明日に控えたプロポーズのことで頭がいっぱいになっているかもしれません。&lt;/p&gt;

&lt;p&gt;プライベートな要因すべてを赤裸々に語る必要はないですが、負荷やストレッサーを知り合うことでフォローし合える場面は確実に増えるでしょうし、互いがハイパフォーマンスを維持できる状況を理解しあうことで環境づくりに貢献し合えるはずです。この質問は Daily Scrum の回数を重ねるごとに価値を発揮することでしょう。&lt;/p&gt;

&lt;h3 id=&quot;3-スプリントの計画に変更は必要そうか&quot;&gt;3. スプリントの計画に変更は必要そうか&lt;/h3&gt;

&lt;p&gt;言い換えれば「このままのペースでスプリントゴールを達成できそうか」ということです。ただ、「達成できそうか」と聞かれると反射的・楽観的に「大丈夫」と答えたくなってしまうような気がするので、少しでも多くの可能性を考えやすくなればと思い「変更は必要そうか」という問いにしてみました。&lt;/p&gt;

&lt;p&gt;パフォーマンスがいかほどかとその要因が何かを明らかにした後、それらを踏まえてスプリントの計画が達成できそうかを見つめ直すことができれば、Daily Scrum の目的は果たせるのではないでしょうか。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;現時点では「再考」しただけで「実践」していません。試してみたら全然駄目かもしれませんが、近いうちに実践しレポートしてみようと思います。&lt;/p&gt;</content><author><name></name></author><summary type="html">かつてスクラムガイドにも載っていましたが、Daily Scrum でよく使われる「3つの質問」というものがありました。大雑把に書くと以下の3つです。</summary></entry><entry><title type="html">私たちのリモートコミュニケーションをデータと共にふりかえる</title><link href="https://aloerina01.github.io/blog/2020-12-23-1" rel="alternate" type="text/html" title="私たちのリモートコミュニケーションをデータと共にふりかえる" /><published>2020-12-23T00:00:00+00:00</published><updated>2020-12-23T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2020-12-23-1">&lt;p&gt;私たちのチームは11人のフロントエンドエンジニアで構成されていて、今年は皆在宅勤務をしていました。リモート環境に移行した直後からコミュニケーションの方法には悩まされ試行錯誤してきたので、ここらでふりかえってみようと思います。&lt;/p&gt;

&lt;p&gt;今回のふりかえりでは、明示的に取り組んでいるコミュニケーションを紹介し(暗黙的にしているコミュニケーションは今回のふりかえりの対象外とし)、その内容について&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;会話のラリーを目的とした双方向の場か ⇔ 情報伝達などを目的とした単方向の場か&lt;/li&gt;
  &lt;li&gt;比較的雑談が多いか ⇔ 比較的業務的な話題が多いか&lt;/li&gt;
  &lt;li&gt;全員集まることが少ない ⇔ 全員集まることが多い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という3つの軸で主観的なポイント付けをしてみようと思います。&lt;/p&gt;

&lt;h3 id=&quot;weekly-sync&quot;&gt;Weekly Sync&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;30分/週&lt;/li&gt;
  &lt;li&gt;近い将来にやる案件の共有・把握&lt;/li&gt;
  &lt;li&gt;直近のリリース内容の確認&lt;/li&gt;
  &lt;li&gt;チケットのステータス更新確認、Merge済みブランチの掃除等の事務ワーク&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-12-23-1-weeklysync.jpg&quot; alt=&quot;Weekly Sync&quot; style=&quot;border:1px solid #e8e8e8;border-radius:20px;&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;daily-sync&quot;&gt;Daily Sync&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;チームメンバーの業務が比較的区切れる17:00~17:15開催&lt;/li&gt;
  &lt;li&gt;月、火、木の週3回
    &lt;ul&gt;
      &lt;li&gt;水曜はWeekly Syncがあるためスキップ、金曜は予定被りのためスキップ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;その日やったこと、困っていることの共有&lt;/li&gt;
  &lt;li&gt;余った時間で雑談(余りがち)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-12-23-1-dailysync.jpg&quot; alt=&quot;Daily Sync&quot; style=&quot;border:1px solid #e8e8e8;border-radius:20px;&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;battleground&quot;&gt;Battleground&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1時間/週&lt;/li&gt;
  &lt;li&gt;技術相談をする場&lt;/li&gt;
  &lt;li&gt;Slack channelに話したいトピックを随時記入しており、それについて話す場&lt;/li&gt;
  &lt;li&gt;最近方向性をシフトして、ふりかえりと技術相談を交互開催するよう変更&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-12-23-1-battleground.jpg&quot; alt=&quot;Battleground&quot; style=&quot;border:1px solid #e8e8e8;border-radius:20px;&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;happy-hour&quot;&gt;Happy Hour&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;30分/週&lt;/li&gt;
  &lt;li&gt;完全雑談時間&lt;/li&gt;
  &lt;li&gt;ランダムでDJ担当を決めてBGMを流す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-12-23-1-happyhour.jpg&quot; alt=&quot;Happyhour&quot; style=&quot;border:1px solid #e8e8e8;border-radius:20px;&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;モブワーク&quot;&gt;モブワーク&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;2時間/週&lt;/li&gt;
  &lt;li&gt;モブプロの時間として始めたが、今では「プログラミング」以外のことをよくする
    &lt;ul&gt;
      &lt;li&gt;モブレビュー、勉強会、臨時のふりかえりなど&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;モブワークバックログをTrelloを使ってカンバン化
    &lt;ul&gt;
      &lt;li&gt;レーンは Idea, Ready, Doing, Done&lt;/li&gt;
      &lt;li&gt;モブワーク開始時にReadyに入っているものの中から選んで実施&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-12-23-1-mobwork.jpg&quot; alt=&quot;Mobwork&quot; style=&quot;border:1px solid #e8e8e8;border-radius:20px;&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;daily勉強会廃止済み&quot;&gt;Daily勉強会(廃止済み)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;30分/週3回&lt;/li&gt;
  &lt;li&gt;TypeScript導入直後に勉強会をするためにスタート&lt;/li&gt;
  &lt;li&gt;1ヶ月くらい継続しTSの話題が一区切りした後は日替わりでいろんなネタを持ち寄り&lt;/li&gt;
  &lt;li&gt;更に1ヶ月くらい経過した頃ネタが尽きたので廃止&lt;/li&gt;
  &lt;li&gt;代わりに、勉強会したいネタが生まれたら臨時開催 or モブワークで実施する方針に&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-12-23-1-dailystudy.jpg&quot; alt=&quot;Daily勉強会&quot; style=&quot;border:1px solid #e8e8e8;border-radius:20px;&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;いきぬき会&quot;&gt;いきぬき会&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;2週間に1回、業務後開催&lt;/li&gt;
  &lt;li&gt;だいたい2時間程度、ながれ解散&lt;/li&gt;
  &lt;li&gt;2週に1度プロダクトのリリースがあり、その後に開催することが多い&lt;/li&gt;
  &lt;li&gt;雑談、ゲーム、何でもOK&lt;/li&gt;
  &lt;li&gt;最近はボードゲームアリーナで遊ぶことが多め&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-12-23-1-refresh.jpg&quot; alt=&quot;いきぬき会&quot; style=&quot;border:1px solid #e8e8e8;border-radius:20px;&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;slack雑談channel&quot;&gt;Slack雑談Channel&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;各自が雑談用Channelを持っている&lt;/li&gt;
  &lt;li&gt;社内Twitterとして運用している人もいるし、猫写真Botと化している人もいるし、放置の人もいる&lt;/li&gt;
  &lt;li&gt;雑談用Channelは全員作っているが、運用してもしなくてもいい、人のも見ても見なくてもいい&lt;/li&gt;
  &lt;li&gt;業務用のチームChannelもあるので、そちらで業務の話題の合間に雑談していることも多い
    &lt;ul&gt;
      &lt;li&gt;先日チームChannelでAmong Usの募集をしていたくらい雑&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-12-23-1-zatsuchannel.jpg&quot; alt=&quot;雑談Channel&quot; style=&quot;border:1px solid #e8e8e8;border-radius:20px;&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;分布で見てみるとこんな感じになりました。円の大きさは「参加率」の大小です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-12-23-1-graph.jpg&quot; alt=&quot;分布&quot; loading=&quot;lazy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;意図せず万遍なく分布されました。万遍ないことが良いことだとは限りませんが、今のところちょうどいい塩梅だと感じています。強いて言うなら、全員が集まる場ではなくチームメンバーのうち何人かが小さく関わる機会があればと思いますが、各自の雑談用Channel内での会話が盛んであったり、困ったときに「手が空いてる人zoomで相談にのってくれません？」といった会話が1日数回生まれていることなどから、やはりちょうどいい状態なのかもしれません。&lt;/p&gt;

&lt;p&gt;今回は取り上げませんでしたが、四半期に1回開催している「ふりかえり総集編」やスポットで開催しているエクササイズなど細かいコミュニケーションイベントはあるので、むしろ過剰にならないようなブレーキも大切かもしれないと改めて感じました。&lt;/p&gt;

&lt;p&gt;ちなみにこの分布は私の主観を反映しただけのものなので、チームメンバーにも同様にふりかえってもらって&lt;strong&gt;チームメンバー全員の「ちょうどいい塩梅」&lt;/strong&gt;を探ってみても良さそうですね。来年チャレンジしてみたいです。&lt;/p&gt;

&lt;p&gt;他にも、週あたりの「コミュニケーション時間」と「開発専念時間」を比較して実態と感覚があっているか、などもふりかえってみようと思いましたが、今回は手抜きでサボります。コミュニケーション時間はスキマ時間でもできることが多そうだけれど、開発専念時間はある程度まとめて確保したい、など時間の使い方にも違いがあると思うので、単純に総時間数だけで比較する難しさに打ちのめされました。&lt;/p&gt;

&lt;p&gt;以上、私たちのチームのリモートコミュニケーションのふりかえりでした。皆さんのチームのアイデアも知りたいので、よければ&lt;a href=&quot;https://twitter.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;までコメントいただければと思います。&lt;/p&gt;

&lt;p&gt;それでは良いお年を。&lt;/p&gt;</content><author><name></name></author><summary type="html">私たちのチームは11人のフロントエンドエンジニアで構成されていて、今年は皆在宅勤務をしていました。リモート環境に移行した直後からコミュニケーションの方法には悩まされ試行錯誤してきたので、ここらでふりかえってみようと思います。</summary></entry><entry><title type="html">自律的なチームと謙虚なリーダーシップの関係、またはLINE DevDay2020のあとがき</title><link href="https://aloerina01.github.io/blog/2020-12-18-1" rel="alternate" type="text/html" title="自律的なチームと謙虚なリーダーシップの関係、またはLINE DevDay2020のあとがき" /><published>2020-12-18T00:00:00+00:00</published><updated>2020-12-18T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2020-12-18-1">&lt;p&gt;先日LINE DeveloperDay 2020にて『&lt;strong&gt;一人ひとりの「変えたい」を力に、11人で変化し続ける開発チームができるまで&lt;/strong&gt;』と題して、私たちのチームの生々しい課題や取り組み、そして変化についてお話しました。&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/yKcEYmj4JR4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p style=&quot;font-size:0.9rem;text-align:center&quot;&gt;セッション動画&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;ae8b0feb948743ee8b5ebc093d196c5d&quot; data-ratio=&quot;1.77162629757785&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p style=&quot;font-size:0.9rem;text-align:center&quot;&gt;日本語スライド&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;今回の登壇は、それまでに取り組んだり考えたりしてきた「マネジメント」を言語化する作業でした。そしてチームを観察し気づいた変化を言語化する作業でもありました。  &lt;br /&gt;
今の私にできる最大限の力と時間を使って、頭の中に曖昧に散見していた思いをかき集め、言葉にはめ込み、論理で繋ぎ合わせて、40分というセッション枠に合うように削り出したものが、今回の発表内容となりました。&lt;/p&gt;

&lt;p style=&quot;font-size:0.9rem;text-align:center&quot;&gt;
&lt;img src=&quot;/assets/2020-12-18-1.jpg&quot; alt=&quot;言語化の跡&quot; loading=&quot;lazy&quot; /&gt;
&lt;span&gt;言語化の跡&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;しかし自分の中にはまだ十分に言語化できていない部分も多く残っています。「自分の環境だから実現できた限定的な方法論」と「再現性のある技術」とをうまくふるい分けられず言及できなかった部分もあります。&lt;br /&gt;
ここでは、あとがきと称してその部分を補完する(言い訳する)と共に、1冊の本を紹介しようと思います。&lt;/p&gt;

&lt;h3 id=&quot;謙虚なリーダーシップとの接点&quot;&gt;謙虚なリーダーシップとの接点&lt;/h3&gt;

&lt;p&gt;ここ1年ほど、私は私自身のリーダーシップを改善するよりも、チームメンバーが密かに持つリーダーシップを存分に発揮できる環境(チーム)づくりに関心がありました。日々の対話の中で、一人ひとりに違った得意分野があり深く考え抜かれた意見を持っていると感じていたので、互いが得意分野でチームをリードしあう状態をつくりたかったわけです。&lt;br /&gt;
この「リードしあう」という行動を、セッション内では&lt;strong&gt;「変えたい」と思った人がチームメンバーに思いを伝え、最初の1歩を踏み出す行動&lt;/strong&gt;と表現しました。&lt;/p&gt;

&lt;p&gt;しかしこれが簡単ではないことを私は知っています。ですので&lt;strong&gt;チームメンバーの「変えたい」を受け入れ、共に変化を起こしていく行動&lt;/strong&gt;が併せて必要だとお伝えしました。チームメンバー1人の「変えたい」を引き出すためには、チームメンバー全員がそれを受け入れる姿勢を示す必要があるということです。&lt;/p&gt;

&lt;p&gt;この&lt;strong&gt;2つの自律的な行動&lt;/strong&gt;をチームメンバーが自然とできるようになるために、私に何ができるかと考えながら読み漁った本の中の1冊が「&lt;a href=&quot;https://amzn.to/2LyxTcO&quot; target=&quot;_blank&quot;&gt;謙虚なリーダーシップ - 1人のリーダーに依存しない組織をつくる&lt;/a&gt;」という本でした。この本では、&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「よい関係」ができている場合には、相手に関してあるレベルの安心感、つまり、相手の反応について想像がつくために安心感を覚えることができる&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;「互いに信頼し合い、いっそうよい仕事をするために、あなたについてもっとよく知りたい」と思っていることを、言葉と行動で表す&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と述べています。&lt;br /&gt;
先述した2つの自律的な行動をしやすくする関係性を私はセッションの中で「相互理解」と表現しましたが、本書では&lt;strong&gt;相互理解の先にある「安心感」&lt;/strong&gt;に目を向けています。&lt;/p&gt;

&lt;p&gt;また、&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;たいていの場合、問題の根は「ノード」(つまり、個人)ではなく、相互作用(関係)にある&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;不測の事態や相互作用が急激に増えると、深刻な不調の兆しが多くの組織で見られるようにある&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;という記述は、私がセッション内でお伝えした「相互理解があることで課題に自律的に対処できる」ということを、視点を変えて「&lt;strong&gt;相互作用の問題が増えると組織に課題が現れる&lt;/strong&gt;」と説明しているのだと感じました。&lt;/p&gt;

&lt;p&gt;そして適切な関係性を引き出すためのファシリテーションや支援スキルが、組織のあらゆるレベルで発揮される必要があると伝え、関係構築にまつわるスキルを&lt;code class=&quot;highlighter-rouge&quot;&gt;謙虚なリーダーシップの真髄&lt;/code&gt;と表現しその中身を掘り下げています。&lt;/p&gt;

&lt;p&gt;このように本書は私がうまく言葉にできなかった部分、考えきれていなかった部分に言及しています。さらに人と人との関係性を深堀りし、それを変えるプロセスとして&lt;strong&gt;パーソニゼーション&lt;/strong&gt;という考え方を提示しています。その有無によりチームがどう変化したのかをいくつかの事例と共に紹介し、そしてチームに必要なふるまいである「謙虚なリーダーシップ」とはどういうものかと話を発展させていきます。&lt;/p&gt;

&lt;p&gt;以降では、特に印象的な内容をピックアップして紹介します。&lt;/p&gt;

&lt;h3 id=&quot;相互理解を生み出すプロセス-パーソニゼーション&quot;&gt;相互理解を生み出すプロセス =「パーソニゼーション」&lt;/h3&gt;

&lt;p&gt;まずはパーソニゼーションの説明を引用します。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「パーソニゼーション」とは、仕事仲間、チームメイト、上司、部下、同僚との仕事上の関係を、双方向がつくっていくプロセスである。ただし、相手のことを、そのとき担っている役割ではなく、ひとりの人間として考えようとする姿勢が土台になる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;セッションでお伝えした「一人ひとりの違いについての相互理解」とは、互いを&lt;code class=&quot;highlighter-rouge&quot;&gt;ひとりの人間として考えようとする姿勢&lt;/code&gt;を持ちながら双方向の関係性を築いていくことで得られるものだと言えるでしょう。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「パーソニゼーション」は、会話の初めに、どちらかが個人的なことを尋ねる、あるいは話すときに始まる。一方が、もしくは両方が、相当な覚悟をもって会話に臨み、無視されたり拒絶されたり軽蔑されたりする危険を冒すことでもある。(中略)「パーソニゼーション」とは、本質的に、互恵的な双方向のプロセスなのである。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;私がセッション内で相互理解の始め方のひとつとして「自分から始めること」を提案したのは、&lt;code class=&quot;highlighter-rouge&quot;&gt;危険を冒すこと&lt;/code&gt;を相手に委ねるのではなく、自分が背負うことを意味していました。&lt;br /&gt;
自己開示をする心理的ハードルについてはセッション内でも触れましたが、もう少しストレートに言えば、自分から一歩踏み込んだ会話をすることで「痛々しく思われたり寒いと思われたりして傷つくかもしれない危険性」を誰かに負ってもらおうとするなということです(自己開示がとても苦手な自分に今でも強く言い聞かせています)。&lt;/p&gt;

&lt;p&gt;「自分から始める」「参加しやすい雰囲気づくりから始める」「チームの状態の見極めから始める」ことを重ねながら危険を乗り越えた先に、双方向に成り立つ関係、つまり相互理解があるのだと思います。&lt;/p&gt;

&lt;h3 id=&quot;自己開示の心理的ハードル&quot;&gt;自己開示の心理的ハードル&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;私たちは、相手に対して明らかにする個人的な、秘めたと言ってもいい感情や感想や意見を、絶え間なく、徐々に増やしていくなかで、相手との関係を深めていく。そして、私たちが明らかにしたものに対し、今度は相手がどれくらい、みずからのことを明らかにするかによって、私たちが明らかにしたものを相手がどの程度、受け容れているかを測る。明らかにすることと受け容れることの、次々と変わる程度が、最終的に、両者が心地よいと思う親密さのレベルを決める。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;率直さの程度の変化に応じて相手の反応がどう変わるかを測り、心地よさ ―両者がともに相手を信頼し、互いに本音で率直に話していることを心から信じられるレベルの心地よさ― を探しながら、「パーソニゼーション」の境界を互いに見出すことなのだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これらの記述は、自己開示が極端に苦手で仕事仲間に自分のプライベートな部分や素の表情を知られることを嫌っていた私の行動を、丸裸にするものでした。そして同時に、探り探りなコミュニケーションをしているのは私だけではない、むしろ多くの人がそうなのだと再認識させてくれるものでした。&lt;/p&gt;

&lt;p&gt;それに気づいてからは、自己開示の心理的ハードルが自分だけにあるものではなく、程度の差こそあれ誰にでもあり得るのだと考えるようになりました。&lt;/p&gt;

&lt;h3 id=&quot;溝の言語化&quot;&gt;「溝」の言語化&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;チーム内に信頼を育むためには、「溝」を埋めることに注意を傾ける必要がある。溝とは、能力または自信がないことによって、あるいは、社会的欲求が満たされないためにパフォーマンスが下がることによって生じる、物理的・感情的な距離のことだ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;こういった状況に陥ったことはないでしょうか、あるいは周囲で目撃したことはないでしょうか。思い当たる節がありすぎた私には、これを乗り越えたストーリーはもちろん、そこから得られる学びがとても沁みました。&lt;/p&gt;

&lt;p&gt;長くなってきたので引用はこのあたりにしますが、このように、本書からは「人と人との関係性」という目に見えない曖昧なものの全体像と、それを前進させるための論理的なアプローチが詰まっていました。私が登壇を通じて成し遂げたかったことはまさにこういう話です。&lt;/p&gt;

&lt;p&gt;いっそ私のセッションは聞かずにこの本を読むだけでも十分でしょうし、私のセッションを聞いてよくわからないと感じた方やもっと踏み込んだことを知りたいと思った方には、染み入る一冊となることと思います。ぜひ手にとっていただければと思います。&lt;/p&gt;

&lt;p&gt;以上、あとがきに代えて。&lt;/p&gt;</content><author><name></name></author><summary type="html">先日LINE DeveloperDay 2020にて『一人ひとりの「変えたい」を力に、11人で変化し続ける開発チームができるまで』と題して、私たちのチームの生々しい課題や取り組み、そして変化についてお話しました。</summary></entry><entry><title type="html">自分の本音と向き合う期待値マネジメント</title><link href="https://aloerina01.github.io/blog/2020-06-24-1" rel="alternate" type="text/html" title="自分の本音と向き合う期待値マネジメント" /><published>2020-06-24T00:00:00+00:00</published><updated>2020-06-24T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2020-06-24-1">&lt;p&gt;期待値を言語化する、期待値を伝える、期待値をすり合わせる。&lt;br /&gt;
チームをマネジメントしたりサポートしたりすると、こういった期待値の調整をする場面はよくありますよね。&lt;/p&gt;

&lt;p&gt;今回は期待される側ではなく&lt;strong&gt;期待する側&lt;/strong&gt;に注目して、「何を期待しているか」「どのように期待を伝えているか」について考えてみようと思います。私がチームマネジメントやスクラムマスターをしていてよく陥る失敗を思い返しながら、自分への注意喚起を兼ねて整理してみます。&lt;/p&gt;

&lt;h3 id=&quot;何に期待するか&quot;&gt;何に期待するか&lt;/h3&gt;

&lt;p&gt;私は期待の種類を4つのレイヤに分類して捉えています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-24-1-layer.jpg&quot; alt=&quot;期待値の種類&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;状態への期待&quot;&gt;状態への期待&lt;/h4&gt;
&lt;p&gt;ひとつひとつの出来事・仕事・タスクについてではなく、それらを繰り返し&lt;strong&gt;どういう状態を維持してほしいと思っているか&lt;/strong&gt;を指します。「案件の優先順位に沿ってうまく計画立てて進行している状態を維持してほしい(ときには失敗することもあるだろうが、その改善も含めて停滞せず前進し続けていればよい)」といったものです。&lt;/p&gt;

&lt;h4 id=&quot;結果への期待&quot;&gt;結果への期待&lt;/h4&gt;
&lt;p&gt;ひとつの出来事・仕事・タスクについて&lt;strong&gt;どのような結果を出してほしいか&lt;/strong&gt;を指します。「スケジュールに間に合わせてほしい(間に合わせてくれれば手段はお任せする)」といったものです。&lt;/p&gt;

&lt;h4 id=&quot;手段への期待&quot;&gt;手段への期待&lt;/h4&gt;
&lt;p&gt;ひとつの出来事・仕事・タスクについて&lt;strong&gt;どのような方法・プロセスで取り組んでほしいか&lt;/strong&gt;を指します。「毎日決まった時間に進捗を報告してほしい」といったものです。&lt;/p&gt;

&lt;h4 id=&quot;行動意識への期待&quot;&gt;行動意識への期待&lt;/h4&gt;
&lt;p&gt;ひとつの出来事・仕事・タスクについて、またはそれらを繰り返す過程で、&lt;strong&gt;どのような姿勢・意識で臨んでほしいか&lt;/strong&gt;を指します。「自主性を持って取り組んでほしい」といったものです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;念押しですが、これらは自分の思考整理のために便宜的に分けたものです。また、この記事内では「状態への期待」「結果への期待」を&lt;strong&gt;高レイヤの期待&lt;/strong&gt; 、「手段への期待」「行動意識への期待」を&lt;strong&gt;低レイヤの期待&lt;/strong&gt;と呼び分けますが、こちらも便宜的なもので優劣や良し悪しを示唆するものではありません。&lt;/p&gt;

&lt;h3 id=&quot;期待の本音と向き合う&quot;&gt;期待の本音と向き合う&lt;/h3&gt;

&lt;p&gt;私がチームメンバーに何かを期待する場面はよくありました。&lt;br /&gt;
マネージャーでなくとも、アルバイトや学校行事などで「もっと真面目に取り組んでほしい」なんて思ったことは誰しも1度くらいはあるのではないでしょうか。また上司などから「進捗を報告してほしい」と言われたことのある人も多いと思います。&lt;/p&gt;

&lt;p&gt;このような人に何かを期待する場面で、私は&lt;strong&gt;期待の根源にある本音&lt;/strong&gt;を見抜けていないことがよくありました。上述の期待を例にすると&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「もっと真面目に取り組んでほしい(行動意識への期待)」は、「ミスを減らしてほしい、減らすための改善を重ねてほしい(状態への期待)」という本音が隠れている&lt;/li&gt;
  &lt;li&gt;「進捗を報告してほしい(手段への期待)」は、「遅れずに結果を出してほしい(結果への期待)」という本音が隠れている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こういった本音に気づけていない可能性があるわけです。&lt;/p&gt;

&lt;p&gt;人は期待を抱くとき、&lt;strong&gt;個別具体的な体験を元にする&lt;/strong&gt;ことが多いのかもしれません。言い換えると「具体的な体験で思い通りの&lt;strong&gt;結果&lt;/strong&gt;が出ないとき」や「思い通りにいかない体験が積み重なった&lt;strong&gt;状態&lt;/strong&gt;が続いたとき」に期待とのギャップを抱き、その解決策として具体的な&lt;strong&gt;手段&lt;/strong&gt;や&lt;strong&gt;行動意識&lt;/strong&gt;で指示を出したくなるのかもしれません。　&lt;/p&gt;

&lt;p&gt;つまり&lt;strong&gt;低レイヤの期待の裏に、高レイヤの期待が隠れている可能性がある&lt;/strong&gt;ということです(結果も出てるし手段も最適だけど態度が気に食わないというケースもあるとは思いますが)。&lt;/p&gt;

&lt;p&gt;そのため「人に何か指示を出したい」「人に期待を伝えたい」と思ったら、一呼吸置いて自分の期待の本音と向き合ってからでも遅くはなさそうです。&lt;/p&gt;

&lt;h3 id=&quot;期待を本音のままに伝える&quot;&gt;期待を本音のままに伝える&lt;/h3&gt;

&lt;p&gt;上述のとおり、私は個別具体的な体験から期待とのギャップを感じ、期待値を揃えるべく「〇〇してほしい」と手段への期待を口にすることがよくありました。しかしそれでは期待の本音が伝わってないことは自明ですね。こうして冷静に文章に起こすと自明なのですが、実際のコミュニケーションの中では気付きにくいものです。&lt;/p&gt;

&lt;p&gt;その要因の一つに、私がプロセスの改善・最適化が好きで最適解に人より早く気付く(正確には気付いた気になる)ことが多いということが考えられます。&lt;/p&gt;

&lt;p&gt;より良いプロセスに気付いているつもりなので、&lt;strong&gt;そのプロセスを踏んでいない人に対して「こうしてほしい」と手段の期待を抱きがち&lt;/strong&gt;です。しかし期待の本音は特定のプロセスを踏むことではなく、そのプロセスの先にある何らかの結果や状態にあるはずです。この本音を自覚し本音のままに伝えられるかが、私の常日頃の課題です。&lt;/p&gt;

&lt;h3 id=&quot;手段は期待せずに提案する&quot;&gt;「手段」は期待せずに提案する&lt;/h3&gt;

&lt;p&gt;ここからは私の働く現環境においてのみ言える内容です。自分への注意喚起要素がより濃いです。&lt;/p&gt;

&lt;p&gt;ここまでの話を整理すると、低レイヤの期待を感じたときは本音を探ると高レイヤの期待が見つかりがち、それをそのまま伝えよう、ということでした。では具体的な手段に関してはどう伝えるのが良いのでしょうか？ 私は&lt;strong&gt;「期待として伝える」のではなく「一つの選択肢として提案する」&lt;/strong&gt;ことを意識します。&lt;/p&gt;

&lt;p&gt;例を上げると「スケジュールに余裕を持ってタスクを完了させてほしい(結果への期待)。進め方は任せるけど、もし相談するタイミングに迷ったら、バッファを食いつぶしたタイミングか残業が必要だと思ったタイミングを目安にしてみては(手段の提案)」といった具合です。&lt;/p&gt;

&lt;p&gt;相手との関係性や言い回しによっては、提案も実質「上司からの期待/指示」と捉えられてしまうこともあるので、あくまで私の現環境で使える方法です。また、抽象度の高い期待値を伝えるより具体的な手段を期待として伝えることが必要な場面もあるはずです。このあたりのバランス感覚は期待の本音と向き合い、そしてチームメンバーと向き合い続けることで養っていくしかなさそうですね。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;期待を4つのレイヤーに分けて捉える&lt;/li&gt;
  &lt;li&gt;期待とのギャップは個別具体的な体験から起きがちなので、低レイヤの期待に繋がりやすい&lt;/li&gt;
  &lt;li&gt;低レイヤの期待を抱いたら期待の根源にある本音を探すと、高レイヤの期待が見えてくるかも&lt;/li&gt;
  &lt;li&gt;期待の本音をそのままに伝える&lt;/li&gt;
  &lt;li&gt;手段は提案として伝える&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上、自分への注意喚起でした。&lt;/p&gt;</content><author><name></name></author><summary type="html">期待値を言語化する、期待値を伝える、期待値をすり合わせる。 チームをマネジメントしたりサポートしたりすると、こういった期待値の調整をする場面はよくありますよね。</summary></entry><entry><title type="html">Vue+VuexのデータフローをCQSライクに設計する方法</title><link href="https://aloerina01.github.io/blog/2020-06-23-1" rel="alternate" type="text/html" title="Vue+VuexのデータフローをCQSライクに設計する方法" /><published>2020-06-23T00:00:00+00:00</published><updated>2020-06-23T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2020-06-23-1">&lt;p&gt;Vue + Vuexを使ったWebアプリケーションを開発していて、以下のような悩みにぶち当たったことありませんか？&lt;/p&gt;

&lt;h5 id=&quot;悩み1-vuexのmaphelperを使うとコードが読みにくくなる&quot;&gt;悩み1. VuexのmapHelperを使うとコードが読みにくくなる&lt;/h5&gt;

&lt;p&gt;「&lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt;内で呼ばれているこの関数はどこに定義されているんだ…？ &lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;？ それともStoreのアクション…？」&lt;/p&gt;

&lt;p&gt;「&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;部分を見るにこのComponentはどのStoreにも依存してなさそうだ…。と思いきや、&lt;code class=&quot;highlighter-rouge&quot;&gt;mapState&lt;/code&gt;でいろんなStoreの値を読み込んでいるぞ…」&lt;/p&gt;

&lt;h5 id=&quot;悩み2-ビジネスロジック層がない&quot;&gt;悩み2. ビジネスロジック層がない&lt;/h5&gt;

&lt;p&gt;「ページ読み込み時に走るAPIアクセスはどこに実装されている？ Componentの&lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt;？ Storeのアクション？ ロジックがまとまっている層がなくて処理の入り口を見つけにくい…」&lt;/p&gt;

&lt;p&gt;「クリックされたら見た目を変えてAPIアクセスしてStoreを更新する実装をしたいけど、どうやって責務を分離していくといいかな…」&lt;/p&gt;

&lt;p&gt;「ユーザーの権限を元に表示内容を変える実装したいのだけど、複数のStoreの値を組み合わせたロジックが必要そうだ。こういう場合はComponentの&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;に実装すべき…？ 将来を見越してmixinとして実装すべき…？ それとも…？」&lt;/p&gt;

&lt;h5 id=&quot;悩み3-moduleのnamespaceが使いにくい&quot;&gt;悩み3. Moduleのnamespaceが使いにくい&lt;/h5&gt;

&lt;p&gt;「VuexStoreのモジュールの&lt;code class=&quot;highlighter-rouge&quot;&gt;namespace&lt;/code&gt;は分けたいけれど、そうするとFluxのように全モジュールに対してDispatchできない…」&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;* * *&lt;/p&gt;

&lt;p&gt;今回はこれらの問題を解決するデータフロー設計について提案してみます。記事の最後でこの設計を採用したサンプルプロダクトも紹介していますので、併せてご参考ください。&lt;br /&gt;
(この記事はVue2.x系の利用を想定しています)&lt;/p&gt;

&lt;h3 id=&quot;cqs-ライクに考える&quot;&gt;CQS ライクに考える&lt;/h3&gt;

&lt;p&gt;設計パターンのひとつである &lt;strong&gt;Command–Query Separation (コマンドクエリ分離)&lt;/strong&gt; の考え方を参考に設計を考えていきます。このパターンは、アプリケーションにおける処理を&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Query&lt;/strong&gt; = 参照系の処理。アプリケーションの状態を変更せず、また副作用のない処理&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Command&lt;/strong&gt; = 更新系の処理。アプリケーションの状態を変更し、副作用を伴う処理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つに分類します。この考え方とFluxのDispatcherの考え方を組み合わせてデータフローを構築します。大まかな完成図は以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-23/cqs.jpg&quot; alt=&quot;overall picture&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;query-ゲッターのエイリアス-を実装する&quot;&gt;Query (ゲッターのエイリアス) を実装する&lt;/h3&gt;

&lt;p&gt;まずは比較的シンプルなQueryから考えます。&lt;br /&gt;
Componentから&lt;code class=&quot;highlighter-rouge&quot;&gt;this.$store.getters&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;mapGetters&lt;/code&gt;などを利用することで「副作用なくアプリケーションの状態を取得する」ことが可能なので、一応Queryとして完成していると言えます。が、悩み1にあるようにこれらの方法ではどのStoreに依存しているかが読み取りにくいため、今回は自前のQueryを実装します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-23/query.jpg&quot; alt=&quot;query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今回は以下の4つの要件で実装してみます。一般的なVue+Vuexアプリケーションではあまり見ない設計となるので、なるべく強制力が弱く理解しやすくすることを要件に盛り込みます。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Storeの更新に応じて&lt;strong&gt;リアクティブに値を受け取れる&lt;/strong&gt;仕組みとなっていること&lt;/li&gt;
  &lt;li&gt;Componentの&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;部分を見ることで、どのStoreを利用しているかが読み取れる&lt;/strong&gt;ようなQueryとなっていること&lt;/li&gt;
  &lt;li&gt;Storeを実装する際に、Queryの存在を意識せず従来通りに実装できること&lt;/li&gt;
  &lt;li&gt;Queryを実装する際または利用する際に、複雑なルールを覚えることを強要しない仕組みとなっていること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(ちなみにこの記事ではVuexのモジュールをStoreと呼ぶこととします)&lt;/p&gt;

&lt;p&gt;まず要件1を満たす状態を想像しやすくするために、Queryを利用するComponentから実装してみます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SampleComponent.vue&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{{ todoCount }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStoreQuery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/queries&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todoCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStoreQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;import部分をみると&lt;code class=&quot;highlighter-rouge&quot;&gt;TodoStoreQuery&lt;/code&gt;があるので、&lt;code class=&quot;highlighter-rouge&quot;&gt;TodoStore&lt;/code&gt;の値を利用しているComponentであることが読み取れます。&lt;/p&gt;

&lt;p&gt;ついでにQueryの利用箇所にも触れておくと、&lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;の中でゲッターを使うときと同じ書き口で使われていますね。このようなQueryを用意することができれば、要件4の「複雑なルールを覚えることを強要しない仕組みであること」も満たせていると言えそうです。&lt;/p&gt;

&lt;p&gt;ではこのQueryを実装していきます。参考に&lt;code class=&quot;highlighter-rouge&quot;&gt;TodoStore&lt;/code&gt;の実装も添えておきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;store.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;todoCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vuexStoreInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vuex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;TodoStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;queries.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vuexStoreInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@/store&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Storeの情報からqueryを生成する関数を定義する&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createGettersAlias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;storeTemplate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;storeTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vuexStoreInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;descriptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vuexStoreInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// queryを生成してexportする&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStoreQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createGettersAlias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TodoStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 新規storeが増える度にこの処理を追加していく&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// export const AnotherStoreQuery = createGettersAlias(AnotherStore);  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;createGettersAlias&lt;/code&gt;関数は、VuexStoreのインスタンスから&lt;code class=&quot;highlighter-rouge&quot;&gt;TodoStore&lt;/code&gt;のゲッター要素だけを抜き出して返す関数です。やっていることは&lt;code class=&quot;highlighter-rouge&quot;&gt;mapGetters&lt;/code&gt;とほぼ同じです。&lt;/p&gt;

&lt;p&gt;Storeを追加する際は、通常通りの方法でStoreを実装することに加えて&lt;code class=&quot;highlighter-rouge&quot;&gt;createGettersAlias&lt;/code&gt;を呼び出すだけでOKです。ちなみに私はStoreへアクセスする際は必ずゲッターを経由するようにしているためステートのエイリアスはつくっていませんが、このあたりは好みですね。&lt;/p&gt;

&lt;h3 id=&quot;command-ビジネスロジックdispatch-を実装する&quot;&gt;Command (ビジネスロジック+Dispatch) を実装する&lt;/h3&gt;

&lt;p&gt;次は副作用を伴う更新系処理のCommandを実装します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2020-06-23/command.jpg&quot; alt=&quot;command&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こちらも4つの要件で実装します。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;返り値のない関数&lt;/strong&gt;とする&lt;/li&gt;
  &lt;li&gt;システム的な処理単位ではなく、&lt;strong&gt;ユースケース単位&lt;/strong&gt;で1つ1つのCommandを実装する&lt;/li&gt;
  &lt;li&gt;処理に必要な依存関係は基本的に引数で受け取る&lt;/li&gt;
  &lt;li&gt;storeを更新するときはVuexの&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;を経由する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今回は「TODOを完了にする」ユースケースのCommandの実装を例にします。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;actionTypes.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActionTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;DONE_TODO&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;doneTodo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dispatchしやすいようにアクション名を定数化しておきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dispatcher.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vuexStoreInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/store&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;vuexStoreInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Commandから直接&lt;code class=&quot;highlighter-rouge&quot;&gt;vuexStoreInstance.dispatch&lt;/code&gt;を呼び出しても良いのですが、今後Dispatch部分を修正する可能性を考慮して、Store層とCommand層の間にDispatcher層を噛ませておきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;commands.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/dispatcher&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActionTypes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/actionTypes&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doneTodo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ActionTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DONE_TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;doneTodo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;ここまで実装できたら、Componentから&lt;code class=&quot;highlighter-rouge&quot;&gt;Commands.doneTodo&lt;/code&gt;を呼び出せば完成ですね。ちなみに&lt;code class=&quot;highlighter-rouge&quot;&gt;doneTodo&lt;/code&gt;を直接&lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt;せず&lt;code class=&quot;highlighter-rouge&quot;&gt;Commands&lt;/code&gt;オブジェクトで束ねているのは、grepしやすくするためです。好みなので要件には含んでいません。&lt;/p&gt;

&lt;p&gt;ちなみにQueryとCommandに依存したComponentの&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;部分は以下のようになります。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// SampleComponent.vue

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStoreQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AnotherStoreQuery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/qieries&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Commands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;@/commands&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Componentから見ると&lt;strong&gt;「どのStoreの値を利用しているか」は明確であったほうが良い&lt;/strong&gt;ですが、&lt;strong&gt;「どのStoreを更新しているか」は意識する必要がありません&lt;/strong&gt;。それがちょうど良く表現されている点も気に入っています。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;CQSの考え方を参考にVue＋Vuexアプリケーションの設計方法を提案してみました。しかしよく見ると実はあまり特別なことはしていなくて、Vuexの使い方に一手間加えている程度です。&lt;/p&gt;

&lt;p&gt;別の見方をすると、今回実装したCommandとQueryは&lt;strong&gt;Store層にVuexを採用しなかったとしても利用できる&lt;/strong&gt;仕組みです。そのためこの設計方法はVuexから脱却したVueアプリケーションの設計方法の提案でもあります。Vuexが悪いとは言いませんが、選択肢は多く持っておけると良いですよね。そういった意図も込めての紹介でした。&lt;/p&gt;

&lt;p&gt;余談ですが、「設計の紹介」と聞いてもっと斬新なもの期待させてしまっていたらすみませんでした。&lt;br /&gt;
私にとって(私にできる)フロントエンドの設計とは、「情報をどう捉えるとか」と「それをどう分離していくか」を繰り返していく作業です。捉え方や分離の仕方には流行や好みが反映されることもあります。最近の私の好みは「部分的に切り離して捨てやすいかどうか」ですが、好みが変われば設計方法も変わると思いますので、そのときはまたこうして記事を書こうと思います。&lt;/p&gt;

&lt;h3 id=&quot;サンプル&quot;&gt;サンプル&lt;/h3&gt;

&lt;p&gt;
&lt;img src=&quot;/assets/2020-06-23/sample_app.jpg&quot; style=&quot;border-radius:10px;box-shadow:1px 1px 10px #e8e8e8&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;今回紹介した設計を利用し、一覧ページと詳細ページを行き来する簡単な&lt;a href=&quot;https://github.com/aloerina01/vue-sample-list-detail-viewer&quot; target=&quot;_blank&quot;&gt;サンプルアプリ&lt;/a&gt;を実装しました。ご参考にどうぞ。&lt;/p&gt;</content><author><name></name></author><summary type="html">Vue + Vuexを使ったWebアプリケーションを開発していて、以下のような悩みにぶち当たったことありませんか？</summary></entry></feed>