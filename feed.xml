<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://aloerina01.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aloerina01.github.io/" rel="alternate" type="text/html" /><updated>2024-12-11T04:16:35+00:00</updated><id>https://aloerina01.github.io/feed.xml</id><title type="html">mille-feuille code</title><subtitle>Web Developer。同じような過ちを繰り返さないように備忘録を残しています。
</subtitle><entry><title type="html">“頼んだのにやってくれない” “相談にもきてくれない”の処方箋</title><link href="https://aloerina01.github.io/blog/2024-12-11-1" rel="alternate" type="text/html" title="“頼んだのにやってくれない” “相談にもきてくれない”の処方箋" /><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2024-12-11-1">&lt;p&gt;部下や後輩に仕事を依頼する立場を経験すると、1度くらいは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;頼んだ仕事を進めてくれない&lt;/li&gt;
  &lt;li&gt;一緒に計画を立てたりタスク分解しても進捗が出ない&lt;/li&gt;
  &lt;li&gt;「やり方が分からないときは聞きに来てください」と伝えたけど相談にきてくれない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんてことを経験するかもしれません。自分からいろいろ歩み寄っているつもりなのに相手がうまく仕事をこなしてくれない、という状況です。&lt;/p&gt;

&lt;p&gt;今回はこういったシチュエーションとどう向き合うかの私なりの考え方を書くわけですが、大前提として人に仕事を任せる時間的余裕・精神的余裕がある状況を想定しています。&lt;/p&gt;

&lt;p&gt;部下や後輩に任せるということは、自分がやったほうが早く上手に終えられる可能性や、任せた相手が失敗する可能性があることを承知していて、加えて実践経験から学びを得ることを期待している状況だと思います。&lt;/p&gt;

&lt;p&gt;逆に猫の手も借りたいようなサバイバルフェーズで新しいエンジニアをチームに迎え入れて、ろくなオンボーディングもなしに「頼んだ仕事をやってくれない！」と嘆くのはさすがに自分勝手な言い分ですしね。&lt;/p&gt;

&lt;p&gt;では参ります。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#処方箋1-相手を意図通りに動かそうとするのをやめる&quot; id=&quot;markdown-toc-処方箋1-相手を意図通りに動かそうとするのをやめる&quot;&gt;処方箋1: 「相手を意図通りに動かそうとする」のをやめる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#処方箋2-やる気がないと決めつけるのをやめる&quot; id=&quot;markdown-toc-処方箋2-やる気がないと決めつけるのをやめる&quot;&gt;処方箋2: 「やる気がない」と決めつけるのをやめる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#処方箋3-全ての行動は明快な理屈に基づいていると思い込むのをやめる&quot; id=&quot;markdown-toc-処方箋3-全ての行動は明快な理屈に基づいていると思い込むのをやめる&quot;&gt;処方箋3: 「全ての行動は明快な理屈に基づいている」と思い込むのをやめる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#処方箋4-自分のちからで解決できるはずと思い込むのをやめる&quot; id=&quot;markdown-toc-処方箋4-自分のちからで解決できるはずと思い込むのをやめる&quot;&gt;処方箋4: 「自分のちからで解決できるはず」と思い込むのをやめる&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;処方箋1-相手を意図通りに動かそうとするのをやめる&quot;&gt;処方箋1: 「相手を意図通りに動かそうとする」のをやめる&lt;/h3&gt;

&lt;p&gt;いきなりガッカリする結論を、しかし今回の話の根幹になる結論を言いますと&lt;strong&gt;「相手に仕事をしてもらう」ための処方箋は存在しません&lt;/strong&gt;。&lt;strong&gt;あるのは「自分がどう向き合うか」の処方箋だけ&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;どんなに自分が正しいと感じていたとしても、どんなに相手が不適切な行動をしていたとしても、一方的に相手の考えや行動を変える解決策は存在せず、変えられるのは「自分が相手をどのように捉えているか」である、とはよく言われます。言い換えると「&lt;strong&gt;相手との関係性&lt;/strong&gt;」を変えるということです。&lt;/p&gt;

&lt;p&gt;相手を『怠慢』や『無能』と捉え行動を変えさせようとすることが関係性を悪化させて負の循環に迷い込む要因となることがあるので、それを防ぎ、ゆるやかに良い関係を導き、いずれ状況が良くなることを期待するような&lt;strong&gt;根本治療こそが、この状況でできる唯一の手段&lt;/strong&gt;だと考えています&lt;strong&gt;。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;処方箋2-やる気がないと決めつけるのをやめる&quot;&gt;処方箋2: 「やる気がない」と決めつけるのをやめる&lt;/h3&gt;

&lt;p&gt;相手の行動が不適切であり、修正するよう指示をしても修正が見て取れないとき、相手に「やる気がない」と決めつけないよう注意が必要です。&lt;/p&gt;

&lt;p&gt;相手の思考や感情を決めつけた上でのコミュニケーションは、それが間違っていたときに状況を大きく悪化させてしまいます(仮に決めつけた通りであったとしても相手にとって気持ちの良い会話にはなり得ません)。&lt;/p&gt;

&lt;p&gt;例えば相手は体調が悪く、しかしそのことを知られたくなくて無理している状況だとします。「無理をしてがんばっているが、仕事が完遂できていない」状況です。このときに「やる気がない」と決めつけたコミュニケーションを取れば、がんばろうとしていた相手の気持ちをどれだけひどく打ち砕くことになるかは想像に難くないでしょう。&lt;/p&gt;

&lt;p&gt;相手が真に何を考えているか、どんな意図があるかは分かりません。あるのは「私の目に相手がどう写っているか」という”主観的な観測”だけです。&lt;br /&gt;
&lt;strong&gt;相手の意図を知らなくても知っていると思い込み、さらにその意図が悪いものであると決めつけてしまうのは、よくある過ちです&lt;/strong&gt;。相手の意図を勝手に作り出さず、理解する姿勢で向き合うのが関係性を変える一歩目です。&lt;/p&gt;

&lt;h3 id=&quot;処方箋3-全ての行動は明快な理屈に基づいていると思い込むのをやめる&quot;&gt;処方箋3: 「全ての行動は明快な理屈に基づいている」と思い込むのをやめる&lt;/h3&gt;

&lt;p&gt;これまでの処方箋にのっとり、相手のやる気や意図を決めつけず「きっと何らかの理由があるはずだ」と性善説的に事態を受け止め、その解消に勤しむことで状況が好転することもあります。&lt;/p&gt;

&lt;p&gt;しかしそれでも解決に近づかない場合、&lt;strong&gt;次にやめるべきことは「相手の全ての行動には理由があり自分が気付けていない論理的な背景がある」と思い込むこと&lt;/strong&gt;です。具体的に言うと&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;やり方が分かれば、仕事を進めてくれるはずだ&lt;/li&gt;
  &lt;li&gt;質問していいよといえば、質問にくるはずだ&lt;/li&gt;
  &lt;li&gt;時間を確保して問いかければ、困っていることを打ち明けてくれるはずだ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった思い込みから脱却しようということです。&lt;/p&gt;

&lt;p&gt;では理屈ではない何が行動の背景にあるのでしょうか。私は&lt;strong&gt;『気持ち』&lt;/strong&gt;に着目します。&lt;/p&gt;

&lt;p&gt;例えば相談しない理由は「あなたを信用していないから」もしくは「信用したくないから」という気持ちが根底にあるかもしれません。仕事を進めない理由は「納得いかないから」かもしれません。「なんか気に食わないから」なんてこともあり得ます。&lt;/p&gt;

&lt;p&gt;人間ですから、そういうことはあります。「仕事なんだから嫌でもやれ」と思うかもしれませんが、「仕事ならば嫌でもやるはずだ」という思い込みもこの状況では役に立ちません。&lt;/p&gt;

&lt;p&gt;では気持ちに着目して、どういう手を打てるのかと言うと、ほとんどやれることはありません。&lt;br /&gt;
粘り強く向き合って信頼関係を築くしかないですが、すでに拒否反応が出ている場合はなかなか態度を変えてくれないこともあるでしょう。人間ですから。&lt;/p&gt;

&lt;p&gt;ですので、こうなる前に、仕事を初めて依頼するときにから、顔を合わせて最初の一言目の会話をするときから、「&lt;strong&gt;私はあなたを信用したいと思っている。これから良い関係を築きたいと思っている。そのための努力をする気がある&lt;/strong&gt;」ということをコミュニケーションの中で示していくしかないでしょう。&lt;/p&gt;

&lt;p&gt;つまり&lt;strong&gt;『気持ち』に着目するのは問題が起きてからではなく、相手と関係を築く一番最初から&lt;/strong&gt;というわけです。当たり前といえば当たり前なんですが、往々にして仕事の場では感情を無視してまるで双方がロボットであるかのように指示と応答をするだけのコミュニケーションが発生したりします。&lt;/p&gt;

&lt;h3 id=&quot;処方箋4-自分のちからで解決できるはずと思い込むのをやめる&quot;&gt;処方箋4: 「自分のちからで解決できるはず」と思い込むのをやめる&lt;/h3&gt;

&lt;p&gt;いよいよ元も子もなくなってきましたが、ここまで書いたことをすべて意識して取り組んできても、やっぱり何度言っても期日までにタスクを終えてくれない……なんてことは起きます。繰り返し起きます。&lt;/p&gt;

&lt;p&gt;原因を探求すればキリがないですし、医学的な要因に依ることもあります。そしてそれを知ったところで自分にはどうにもできません。&lt;/p&gt;

&lt;p&gt;なので&lt;strong&gt;「仕事をやってくれない」という事象を自分の力で解決することを諦め、どのような仕事だったらやれるのかを一緒に探す&lt;/strong&gt;よう切り替えが必要なときもあります。&lt;/p&gt;

&lt;p&gt;少なくとも、自分たちで採用しチームに受け入れたメンバーであればその人が成し遂げてきた実績を知っているはずですし、採用の過程で見つけた魅力や長所もあるはずです。それを活かす方法を探すよう舵を切ることも時には必要です。&lt;/p&gt;

&lt;p&gt;ここまでの内容を整理すると、処方箋1〜3は症状を予防するための生活習慣改善で、症状に対する本当の処方が処方箋4の内容になるとも言えますね。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;長くなったのでまとめると&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「相手を変えようとする」のではなく、私自身の「相手の捉え方」を変える&lt;/li&gt;
  &lt;li&gt;相手の意図を決めつけない&lt;/li&gt;
  &lt;li&gt;仕事の会話であっても双方の『気持ち』を軽視しない&lt;/li&gt;
  &lt;li&gt;問題の原因を取り払うのではなく、問題を回避する方法にも目を向ける&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったアプローチを紹介しました。&lt;/p&gt;

&lt;p&gt;先述のとおり、日常生活で発生するコミュニケーションにおいてはどれも当たり前のことなのですが、仕事の場となるとつい&lt;strong&gt;人間的な背景・関係性・感情&lt;/strong&gt;など見落としてしまうことがあり、自分も時間をかけて矯正した部分です。&lt;/p&gt;

&lt;p&gt;おそらく今現在問題に直面していて、その解決法を得たくてこの記事を読んでくれた方にとっては、即効性がなくガッカリする内容だったかもしれません。その点では申し訳なさもありますが、&lt;strong&gt;時間をかけることでしか解消し得ない問題&lt;/strong&gt;なのだと改めて知る機会にしていただければ幸いです。&lt;/p&gt;

&lt;p&gt;思ったより融通が効かず、理屈では動かず、筋が通っていないのが私たち人間です。こんな記事を書きながらもまだまだ上手くできないことの多い私ですが、これからも人間らしさに向き合いながら知見を書き残していこうと思います。&lt;/p&gt;</content><author><name></name></author><summary type="html">部下や後輩に仕事を依頼する立場を経験すると、1度くらいは</summary></entry><entry><title type="html">ファシリテーションの細かい意識の使い分け - Daily Standup 編</title><link href="https://aloerina01.github.io/blog/2024-12-02-1" rel="alternate" type="text/html" title="ファシリテーションの細かい意識の使い分け - Daily Standup 編" /><published>2024-12-02T00:00:00+00:00</published><updated>2024-12-02T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2024-12-02-1">&lt;p&gt;私がエンジニアリングマネージャーとしてミーティング等をファシリテーションするとき、その内容に関わらず共通して意識していることがあります。そしてディテールを見れば意識やテクニックを使い分けている部分があります。それらの言語化にトライしてみようと思います。&lt;/p&gt;

&lt;p&gt;ボリュームが出そうなので何本かの記事に分けて書きます。今回はその第1段です。&lt;/p&gt;

&lt;h3 id=&quot;どのミーティングにも共通して意識することまたはemがファシリテーションをする重要な理由&quot;&gt;どのミーティングにも共通して意識すること、またはEMがファシリテーションをする重要な理由&lt;/h3&gt;

&lt;p&gt;ミーティングの成功という目先の結果だけでなく、&lt;strong&gt;その場での経験がメンバーの関係性、習慣、文化に良い影響を与え、未来の変化の材料となること&lt;/strong&gt;を意識します。&lt;/p&gt;

&lt;p&gt;ファシリテーション時の意識を大雑把に分ければ、&lt;strong&gt;①ミーティングを成功させるための意識、②チームが変化していくための布石を打つ意識&lt;/strong&gt;、の2つが存在するということです。
特に後者はEMの役割と密接に関わりますし、チームの将来像を見据えてるEMだからこそ持てる意識だと思います(スクラムチームであればスクラムマスターが同様のことを考えることになると思います)。&lt;/p&gt;

&lt;p&gt;この一連の記事で取り扱うのは②になります。&lt;br /&gt;
①については過去に&lt;a href=&quot;https://aloerina01.github.io/blog/2020-04-16-1&quot; target=&quot;_blank&quot;&gt;わたし流ふりかえり/レトロスペクティブのファシリテーションガイド&lt;/a&gt;にまとめたことがあるので、よければ併せてご参照ください。&lt;/p&gt;

&lt;h3 id=&quot;daily-standup-で垣間見える自責思考に向き合う&quot;&gt;Daily Standup で垣間見える自責思考に向き合う&lt;/h3&gt;

&lt;p&gt;Daily Standup のファシリテーションでは、チームメンバーの意識の向き先を「個々人の成果」から「チームの成果」に変えるために、考え方の癖の修正してもらうことを意識します。具体例から説明します。&lt;/p&gt;

&lt;p&gt;多くの良心的なメンバーには責任感があり、自責思考が備わっています。分かりやすいであろう事例は「自分の失敗は自分で取り返さねば」という行動です。「思ったより進捗が出ずに遅れが発生し、しかしまだ自分が残業してがんばれば計画通りのペースを取り戻せそうだ」という場面で「今日中に終わらせます」と言ってしまう経験は、エンジニアなら誰でも想像できるのではないでしょうか。&lt;/p&gt;

&lt;p&gt;もちろん責任感が強いの素晴らしいことですが、&lt;strong&gt;もしその遅れがチームにとって致命的であれば、チームの総力をもって解決するほうが良いはず&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;完了できずにいるタスクがチームにとって最優先の仕事であるなら、他のタスクが予定通りに終わっていたとしても、チームの成果としては「一番大事な仕事が終わっていない」となります。それはタスクを終えられなかった個人だけの問題ではなく、「最優先の仕事の進捗よりも優先順位の低い仕事の進捗を優先したチームの判断が間違い」だと捉えられます。&lt;/p&gt;

&lt;p&gt;視野をチームの外に広げて、ステークホルダーの目線で考えてみると「チームの&lt;strong&gt;誰が&lt;/strong&gt;遅れを生んだか」よりも「&lt;strong&gt;チームは&lt;/strong&gt;仕事を優先順位の沿って成し遂げたか」のほうが重要であることが想像できると思います。&lt;/p&gt;

&lt;p&gt;今回は具体例として『遅れ』にフォーカスしましたが、成果をより良くする場面においても考え方は同様です。&lt;strong&gt;主語を『私』から『チーム』に変えて、チームが完遂すべき仕事の優先順位に基づいて個々人のタスクを進行すべきです&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;そのためにDaily Standup を実施しているはずですが、この考え方を定着させる際に自責思考の癖の修正が必要になることがあり、そこでファシリテーションの出番です。&lt;/p&gt;

&lt;h3 id=&quot;ファシリテーションで自責思考を軌道修正する&quot;&gt;ファシリテーションで自責思考を軌道修正する&lt;/h3&gt;

&lt;p&gt;キッパリと考え方を切り替えてもらうように単刀直入な問いかけを利用します。&lt;/p&gt;

&lt;p&gt;先述のような「計画に対する遅れ」の議論をファシリテーションする場合は、例えば以下のような質問を使います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;話題に上がっている問題はチームにとってどの程度の優先順位ですか？&lt;/li&gt;
  &lt;li&gt;その問題の原因分析にどれだけ時間を割きますか？　今イテレーションに残された時間や仕事の優先順位と比較して判断してください&lt;/li&gt;
  &lt;li&gt;話題に上がっている問題の解決をチームの最優先事項として取り組む場合、誰が何をすると良さそうですか？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「チームの中の誰が責任をとるか」の考え方から「チームの成果を最大にするために何をするか」の考え方へシフトさせるための直接的な問いかけを意識します。&lt;/p&gt;

&lt;p&gt;(今後の記事で紹介する予定の)別のミーティングの事例では、チームメンバーの考え方を尊重しつつ緩やかに変化を起こすような問いかけを使うこともありますが、今回のように考え方をガラッと変えること狙うときは直接的な問いかけをするようにしています。&lt;/p&gt;

&lt;h3 id=&quot;いつも特定の人が遅れる場合は&quot;&gt;いつも特定の人が遅れる場合は&lt;/h3&gt;

&lt;p&gt;そうは言っても、「いつも遅れる人がいる」「全然責任感がない人がいる」など、今回紹介したファシリテーションの意識をすんなり受け入れられないチーム事情もあると思います。&lt;/p&gt;

&lt;p&gt;すべての事例に解答を持っているわけではないですが、いくつかのアプローチを添えて補足とします。&lt;/p&gt;

&lt;p&gt;ジュニアなエンジニアやジョインして間もないエンジニアが、他のメンバーに比べて知識や経験が浅いために計画の精度が低く、結果遅れが生じる場面はしばしばあると思います。&lt;br /&gt;
それに備えるには、&lt;strong&gt;チームは最初から「計画が変更になる前提」でいる&lt;/strong&gt;と良いです。最初につくった計画の精度は40％程度であると捉え、まずは1日手を動かしてみてその実践を材料に計画を修正することを、あらかじめ計画しておきます。&lt;/p&gt;

&lt;p&gt;ここまで読んでAgile 開発経験値の高い人は気付いていると思いますが、Daily Standup の本来の使い方がこれです。&lt;strong&gt;進捗を元に計画の見直しをすることが本来の目的&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;ですので、既にこれは実践しているけれどそれでも遅れ続けている人に困っている事例に対し別の選択肢を提案するなら、&lt;strong&gt;ペアアサイン&lt;/strong&gt;はいかがでしょうか。見積もりが上手い人や、そのタスクへの適正が高い人、仕事の進め方が上手い人などとペアアサインすることで&lt;strong&gt;仕事の仕方を学ぶ機会が増え、同時にそれまでの遅れの原因を発見できる可能性がある&lt;/strong&gt;からです。&lt;/p&gt;

&lt;p&gt;それさえも有効打にならず遅れ続ける人がいる場合、その人の適正の問題やチームメンバーとの関係性の問題などを考えるようにしています。少なくともその人が&lt;strong&gt;故意に遅れているはずはない&lt;/strong&gt;ですし、自分たちが採用して受け入れた人であれば&lt;strong&gt;能力が劣っているはずもありません&lt;/strong&gt;(可能性の話をすれば悪意や能力不足の可能性もゼロではないですが、疑わずに信じることができなければそもそもチームとして破綻しています)。&lt;br /&gt;
&lt;strong&gt;チームメンバーには能力があり、タスクを完遂したい気持ちも責任感もあり、その上で遅れが生じる何らかの要因があると捉え、根気強く原因切り分けをしていくことが重要です&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;今回はDaily Standup のファシリテーション経験を思い出しながら書きました。&lt;/p&gt;

&lt;p&gt;チームメンバーの意識の向き先を「個々人の成果」から「チームの成果」に変えることになぜこんなにもこだわるかと言うと、&lt;strong&gt;その先に自律的なチーム、自己組織化されたチームがある&lt;/strong&gt;と考えているからです。チームが変化していくための布石を打つのは、変化の先にある自律的なチーム像を描き、そこに至るためのステップとしての行動というわけです。&lt;/p&gt;

&lt;p&gt;今後は「ふりかえり」「課題バックログのリファインメント」「チームビルディング系ワークショップ」などのファシリテーションについて書こうと思いますが、他にも聞いてみたい事例があればぜひ&lt;a href=&quot;https://x.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;までご連絡ください。どなたでも大歓迎です。&lt;/p&gt;</content><author><name></name></author><summary type="html">私がエンジニアリングマネージャーとしてミーティング等をファシリテーションするとき、その内容に関わらず共通して意識していることがあります。そしてディテールを見れば意識やテクニックを使い分けている部分があります。それらの言語化にトライしてみようと思います。</summary></entry><entry><title type="html">5年分のマネジメント経験から生まれた実践的フィードバックの型</title><link href="https://aloerina01.github.io/blog/2024-11-06-1" rel="alternate" type="text/html" title="5年分のマネジメント経験から生まれた実践的フィードバックの型" /><published>2024-11-06T00:00:00+00:00</published><updated>2024-11-06T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2024-11-06-1">&lt;p&gt;私がEMとしてメンバーと向き合うときは「&lt;strong&gt;彼らのポテンシャルやエネルギーを100％発揮できる状態をつくれているか&lt;/strong&gt;」と考えることを心がけています&lt;strong&gt;。『観察』と『フィードバック』&lt;/strong&gt;はこれを実現するための最も大事な手段といえます。&lt;/p&gt;

&lt;p&gt;ここ最近の自分自身のマネジメント業務を振り返ってみると、『フィードバック』のほうはある程度の型ができていると感じます。ベースとなる型があって、それをチームメンバーや状況によってアレンジしながら使っている感覚です。&lt;/p&gt;

&lt;p&gt;そこで今回は私が5年間のマネジメント業務経験で培ってきたフィードバックの型を紹介してみます。世の中には数々のフィードバック方法論があるので体系的な知識はそれらに任せて、ここではより実践値の高い具体的な手法をお伝えします。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#前提---フィードバックのタイミング&quot; id=&quot;markdown-toc-前提---フィードバックのタイミング&quot;&gt;前提 - フィードバックのタイミング&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#観点1現在の期待役割とその達成度&quot; id=&quot;markdown-toc-観点1現在の期待役割とその達成度&quot;&gt;観点1　「現在の期待役割とその達成度」&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#観点2一歩先の期待役割と伸びしろ&quot; id=&quot;markdown-toc-観点2一歩先の期待役割と伸びしろ&quot;&gt;観点2「一歩先の期待役割と伸びしろ」&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#観点3成果の価値の掘り下げ&quot; id=&quot;markdown-toc-観点3成果の価値の掘り下げ&quot;&gt;観点3「成果の価値の掘り下げ」&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#観点4強み&quot; id=&quot;markdown-toc-観点4強み&quot;&gt;観点4「強み」&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#観点5挑戦機会&quot; id=&quot;markdown-toc-観点5挑戦機会&quot;&gt;観点5「挑戦機会」&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;前提---フィードバックのタイミング&quot;&gt;前提 - フィードバックのタイミング&lt;/h3&gt;

&lt;p&gt;人事評価の時期にはこのあと紹介するフィードバックの観点のすべてを整理し伝えますが、1on1等日々のコミュニケーションの中でも伝えられる内容があるときはすぐ伝えます。言い換えると、&lt;strong&gt;日々の小さなフィードバックを収集して体系化したものが人事評価のタイミングでのフィードバックとなる&lt;/strong&gt;ので、受け取ったメンバーが「半期が終わって評価のタイミングで突然思いも寄らないフィードバックを伝えられた」とはならないはずです。 ……ならないよう心がけています。&lt;/p&gt;

&lt;p&gt;「フィードバックはナマモノ」と言われたりもしますが、&lt;strong&gt;マネージャーとメンバーとの間で期待役割や評価の認識がズレない状態を維持すること&lt;/strong&gt;がフィードバックにおいて最も重要だと考えています。&lt;/p&gt;

&lt;h3 id=&quot;観点1現在の期待役割とその達成度&quot;&gt;観点1　「現在の期待役割とその達成度」&lt;/h3&gt;

&lt;p&gt;期待役割と、現時点でそれをどれほど達成できているかを伝えます。&lt;br /&gt;
グレード、担当業務、職種、スキルなど様々な要因で期待役割は決まりますが、&lt;strong&gt;マネージャーはメンバー一人ひとりの期待役割を解像度高く理解し、彼らにその解像度を共有すること&lt;/strong&gt;が必要です。そしてその期待値をどれだけ満たしているかを併せて伝えることで、メンバーは「今の働き方を継続していこう」「足りない〇〇を意識するよう軌道修正しよう」と日々の行動を修正する指針を得られます。&lt;/p&gt;

&lt;p&gt;期待役割は『やってほしいタスク』ではなく、&lt;strong&gt;ふるまい、責任、成果、インパクト&lt;/strong&gt;等で伝えます。&lt;br /&gt;
これらを伝える際、&lt;strong&gt;ジュニアなエンジニアほど具体的に、シニアなエンジニアほど抽象的に&lt;/strong&gt;伝えることになります。ジュニアメンバーはいわゆる一人前と呼ばれる共通の水準に到達するための段階的な期待役割が設定されることが多いので内容が具体的になりやすく、シニアになるほど「エンジニアリングを通じて事業目標に貢献する」などの抽象度の高い成果が期待されることが増えるからです。&lt;/p&gt;

&lt;p&gt;この観点でのフィードバックの要は、&lt;strong&gt;評価者である自分と被評価者であるメンバーとで、期待役割と現在地についてどれだけ高解像度に目線合わせできるか&lt;/strong&gt;です。そのためにはまずマネージャー自身が解像度を上げる必要があります。&lt;br /&gt;
会社や部署の評価基準が曖昧なままであったり、全社共通のグレード毎の期待役割が抽象的過ぎたりする場合は、それらを掘り下げることが必要になるでしょう。その場合マネージャーひとりでは解決できないですし、ましてやチームメンバー自身で解決するのは不可能なので、有識者や意思決定者を巻き込んで期待役割の掘り下げをすることが最初の一歩となるかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;観点2一歩先の期待役割と伸びしろ&quot;&gt;観点2「一歩先の期待役割と伸びしろ」&lt;/h3&gt;

&lt;p&gt;現在の期待役割と併せて伝えるべき2つ目の観点が、&lt;strong&gt;次の段階のキャリアで求められる期待役割&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;自分自身がチームに属するいちエンジニアとして働いていた頃、あと何をがんばれば自分の評価が伸びるのか、新しい仕事を任せてもらえるのか、より裁量が与えられるのかが分からず悩んだことがあります。この要因は次のステップでの期待役割を理解していなかったこと、ひいては&lt;strong&gt;現状と次ステップとの差分を測れていなかった&lt;/strong&gt;ことにあります。&lt;br /&gt;
この例のように、キャリアアップの伸びしろを示すことが、メンバーが持つエネルギーを適切な方向に放出させることに役立つ場面があります。&lt;strong&gt;努力の方向性を間違えさせない環境づくり&lt;/strong&gt;とも言えます。&lt;/p&gt;

&lt;p&gt;この観点をフィードバックする際に私が気をつけていることは、現状との差分、つまり伸びしろを伝えるようにし、伸びしろを埋める行動はメンバー自身に考え実行してもらうようにすることです。例えば先述した「一人前のエンジニアになること」が次のステップである場合、&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;任された案件の進行中に仕様漏れや見積もりミスなどの問題が発生しても、関係者とともに軌道修正しながら完遂することを期待しています。すでにトラブルのない案件は滞りなく進行できているので、軽微かつ頻出な問題が発生した際にも進行できることで『一人前』の水準に近づきます。&lt;/p&gt;

  &lt;p&gt;他にも、任された案件をこなすだけでなく、プロダクトやチームの課題を自ら見つけ解決に取り組むなどの自主的な行動も一人前のエンジニアに求められる期待役割です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;といった具合にフィードバックします。『一人前』という期待役割の解像度を上げ複数の視点で伸びしろを伝え、&lt;strong&gt;メンバー自身が差分を埋める具体的な行動を判断し実行すること&lt;/strong&gt;が、彼らのポテンシャルを引き出すことに繋がると信じているからです。&lt;br /&gt;
もちろん行動が思いつかないようであれば具体例を出すこともありますが、メンバー自身が考える余地を残すことに意味があります。&lt;/p&gt;

&lt;p&gt;ところでここで言う『一歩先』とは必ずしも次のグレードを指すわけではありません。メンバー一人ひとりの成長速度や直面する障壁の難易度などによって変わります。「各メンバーが次のフェーズにステップアップするためにどのような階段を登るだろうか」と考えながら、&lt;strong&gt;メンバーによっては1段ずつであったり2段飛ばしであったりと適切な『一歩先の階段』&lt;/strong&gt;をフィードバックするよう意識しています。&lt;/p&gt;

&lt;h3 id=&quot;観点3成果の価値の掘り下げ&quot;&gt;観点3「成果の価値の掘り下げ」&lt;/h3&gt;

&lt;p&gt;メンバーが出した成果にどのような価値があるかを様々な視点から伝えます。&lt;/p&gt;

&lt;p&gt;あるメンバーが「既存のプロダクトにTypeScriptを導入しました。開発スピードが上がり、QA時のバグも減りました」と自身の成果を捉えていたとします。しかしこの成果には他の側面でも価値があります。たとえば&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;今まで通り開発案件をこなしながらTS導入の時間を捻出しやり遂げたことは、開発リードタイムの短縮や効率化など業務改善の成功事例という側面があります&lt;/li&gt;
  &lt;li&gt;デグレを起こすことなく既存のコードをTS化した開発プロセスそのものに価値があります&lt;/li&gt;
  &lt;li&gt;チームメンバー間でTSの技術レベルの差がありながらも導入し、その後もチームのベロシティが落ちていないことから、チームの技術力を底上げする工夫がなされていることが読み取れます&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった具合に様々な側面から成果を捉え、本人が気づいていない価値をフィードバックします。&lt;/p&gt;

&lt;p&gt;加えて、その&lt;strong&gt;成果が期待役割に噛み合っているか&lt;/strong&gt;を伝えること重要です。たとえばジュニア寄りのエンジニアが上述の成果を上げたのであれば「自主的な改善活動は期待に沿う成果です」となるかもしれませんし、シニアエンジニアであれば「その活動が事業に与える効果をステークホルダーに説明するところまでやり遂げることを期待しています」となるかもしれません。これは観点1の『現状の期待役割に対する達成度』のフィードバックとも言えますね。&lt;/p&gt;

&lt;h3 id=&quot;観点4強み&quot;&gt;観点4「強み」&lt;/h3&gt;

&lt;p&gt;多くのマネージャーがすでにしていることと思いますが、マネージャーが観測した強みを伝えることも重要です。これは言葉の通りなのでこれ以上の説明はないですが、私が意識していることは、&lt;strong&gt;1度伝えた内容であってもその強みが見られる事例があった際には何度でも伝える&lt;/strong&gt;ことです。&lt;/p&gt;

&lt;p&gt;強みとは、言い換えれば「苦労したとは思ってないのに人よりうまく出来ていること、評価されていること」だと思います。人より簡単にできてしまうことを特別なスキルや長所だと自覚するのは案外難しかったりするので、繰り返し何度でも伝えようと心がけています。&lt;/p&gt;

&lt;h3 id=&quot;観点5挑戦機会&quot;&gt;観点5「挑戦機会」&lt;/h3&gt;

&lt;p&gt;ここまで紹介した観点1〜4を踏まえて、挑戦機会を提供します。&lt;br /&gt;
メンバーの次のステップの期待役割と現在地との差分を明らかにし、伸びしろを埋めていくためにどんな強みを生かしてどんな挑戦をすると良いかを計画し、日々のマネジメント活動(EMとしてのあらゆる活動)を通じて挑戦機会を見つけてフィードバックします。&lt;/p&gt;

&lt;p&gt;『挑戦』というと目新しい仕事に目が行きがちですが、長く続けている業務の中にも挑戦できるポイントは潜んでいます。もちろん最適な挑戦機会がすぐに見つからない状況もありますが、挑戦機会が必要になって初めて探すこととならないよう、&lt;strong&gt;メンバー各々に対する観点1〜4を頭の中に描きアップデートし続け、適切な挑戦機会を日々探し続けておくこと&lt;/strong&gt;が大切です。&lt;br /&gt;
「今の仕事に飽きてしまったし成長を実感できないので転職を考えています」と打ち明けられてから挑戦機会を探すのでは遅い……ということはマネジメントをしている方々には想像に難くないと思います。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;実践しているフィードバックのうちベースとなる部分を整理して紹介してみました。&lt;br /&gt;
繰り返しになりますが、「フィードバックをしよう」と思ってからこれらの観点について考え始めても手遅れになってしまうので、常にメンバー一人ひとりと各観点を同期し続け、自分と近い解像度を維持してもらうことを意識しながらフィードバックし続けることが重要です。そしてそのためには常に観察し続けることもセットで必要になります。&lt;/p&gt;

&lt;p&gt;私の職場環境だから成り立っている内容も多分にあったかもしれませんが誰かの役に立てれば嬉しいですし、そうでなくとも数年後自分自身で読み返してレベルアップを実感できれば良いなと思って書きました。&lt;/p&gt;

&lt;p&gt;思ったより長くなってしまいました。ここまで読んでくれた方はどうもありがとうございました。&lt;/p&gt;</content><author><name></name></author><summary type="html">私がEMとしてメンバーと向き合うときは「彼らのポテンシャルやエネルギーを100％発揮できる状態をつくれているか」と考えることを心がけています。『観察』と『フィードバック』はこれを実現するための最も大事な手段といえます。</summary></entry><entry><title type="html">“ペイン”と”チャレンジ”に注目して改善サイクルを生み出すふりかえりフレームワーク</title><link href="https://aloerina01.github.io/blog/2024-06-14-1" rel="alternate" type="text/html" title="&quot;ペイン&quot;と&quot;チャレンジ&quot;に注目して改善サイクルを生み出すふりかえりフレームワーク" /><published>2024-06-14T00:00:00+00:00</published><updated>2024-06-14T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2024-06-14-1">&lt;p&gt;KPTを継続していたものの意見が出にくくなったりTryが実行されなくなったり…といったマンネリ化や改善サイクルの停滞はどのチームも1度くらいは体験するのではないでしょうか。そんなときはふりかえりの方法を少し変えて刺激を得ることが有効な手段のひとつです。&lt;/p&gt;

&lt;p&gt;新しいふりかえり方法は&lt;a href=&quot;https://amzn.to/3xkFIen&quot; target=&quot;blank&quot;&gt;アジャイルレトロスペクティブズ&lt;/a&gt;などから探すこともできますし、もっと自由に、議論したい切り口や進め方を自分たちで考えることもできます。今回は私が関わるチームで実践しているオリジナルの方法を紹介します。&lt;/p&gt;

&lt;h3 id=&quot;コンセプト&quot;&gt;コンセプト&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2024-06-14/thumbnail.jpg&quot; alt=&quot;&quot; /&gt;
ふりかえり実践イメージ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;やりなれたKPTから大きく変えず、少しだけ変化させてマンネリ解消する方法であること&lt;/li&gt;
  &lt;li&gt;チームメンバーが感じる不満やアイデアを集めやすい方法であること&lt;/li&gt;
  &lt;li&gt;次のアクションを可視化し、完了までトラッキングできる仕組みであること&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;テンプレートの紹介&quot;&gt;テンプレートの紹介&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2024-06-14/template.jpg&quot; alt=&quot;ふりかえりテンプレート&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ペイン&quot;&gt;“ペイン”&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;今イテレーションで困ったこと、苦労したこと、課題に感じていること&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;「〜がしんどかった」「〜で困った」「〜は良くないと思う」と主観的な感情に注目して書き出します。根拠や論理はいらず、気持ちを吐き出すことが大事です。&lt;/p&gt;

&lt;h4 id=&quot;チャレンジ&quot;&gt;“チャレンジ”&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;新しく試してみたいこと&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ペインに対するアイデアでもいいですし、技術的にチャレンジしたいことでもいいです。エンジニアならエンジニアとしての欲求を、PMならPMとしての欲求を素直に書きます。&lt;/p&gt;

&lt;h4 id=&quot;議論中&quot;&gt;“議論中”&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;ペイン・チャレンジの中から選ばれた深堀りしていくトピック&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;このテンプレートは毎イテレーションで意見や議論を継ぎ足ししながら使っていくことを想定しています。1度のミーティングで結論が出なかったものや、ふりかえり後に検証や作業をした後に次回のミーティングで継続して議論したいなど、トピック毎の議論のステータスを表現するエリアです。&lt;/p&gt;

&lt;h4 id=&quot;アクション&quot;&gt;“アクション”&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;次のふりかえりまでに実践するアクション&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ペインとチャレンジは個人の感情や意欲から意見を集めましたが、アクションはチームで議論ながら出していきます。アクションにはいくつかルールがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;次回のふりかえりまでに完了できる小さいサイズ&lt;/strong&gt;であること&lt;/li&gt;
  &lt;li&gt;誰が見ても達成したかどうか判断できる&lt;strong&gt;具体的な達成基準&lt;/strong&gt;が書かれていること&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この2つを満たすアクションを議論しながら探していきます。アクションはいくつ書き出してもよいですが、このエリアにはもういくつかのルールがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アクションの完了の責任はチーム全体にある(アサインされた個人ではなく)&lt;/li&gt;
  &lt;li&gt;1イテレーションで着手するアクション数が少なめになるようWIP上限を設ける&lt;/li&gt;
  &lt;li&gt;もしアクションが達成できなかった場合は、次のふりかえりで必ずアクションに手を加える
    &lt;ul&gt;
      &lt;li&gt;よりアクションを細かくする&lt;/li&gt;
      &lt;li&gt;個人アサインからペアアサインに変える&lt;/li&gt;
      &lt;li&gt;「イテレーション内で進捗をシェアする」など、アクション達成のためのタスクを追加する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;done&quot;&gt;“DONE”&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;議論が終わったトピック、完了したアクション&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;このレーンはなくてもよいです。終わったものが山積みになると「これだけ改善行動を起こした」とモチベーションになることがあります。&lt;/p&gt;

&lt;p&gt;また1ヶ月おきなど定期的にDONEの内容を見返し、以前との変化を計測したり、新しいチャレンジを見つけるキッカケにするものよさそうです。&lt;/p&gt;

&lt;h3 id=&quot;ふりかえりの進め方&quot;&gt;ふりかえりの進め方&lt;/h3&gt;

&lt;h4 id=&quot;1-前回のアクションの達成確認をする初回はスキップ&quot;&gt;1. 前回のアクションの達成確認をする(初回はスキップ)&lt;/h4&gt;

&lt;p&gt;WIPアクションについて1つずつ確認し、終わってればDONEに、終わってなければタスクをアップデートします。&lt;/p&gt;

&lt;h4 id=&quot;2-ペインとチャレンジを各々が書き出す&quot;&gt;2. ペインとチャレンジを各々が書き出す&lt;/h4&gt;

&lt;p&gt;5〜10分程度の記入時間を設け、記入が済んだら1件ずつ内容をシェアしながらボードに貼り付けていきます。&lt;/p&gt;

&lt;p&gt;シェアする過程で近い意見をグルーピングしたり、過去に挙げたものの解消してしまった意見を破棄したりと、ペインとチャレンジのエリアを整理しながら意見を集めていきます。チームメンバーの感情や欲求を1つのボードに載せ切ることを目指します。&lt;/p&gt;

&lt;h4 id=&quot;3-議論して深堀りたいトピックを投票する&quot;&gt;3. 議論して深堀りたいトピックを投票する&lt;/h4&gt;

&lt;p&gt;議論したいトピックに投票します。今回のミーティングで議論しなかったとしても、次回以降もペインとチャレンジに出ているトピックは(意図的に破棄しない限り)残り続けるので、『今日この場で』話したいものを選びましょう。&lt;/p&gt;

&lt;h4 id=&quot;4-投票が多かったトピックを議論しアクションに落とし込む&quot;&gt;4. 投票が多かったトピックを議論しアクションに落とし込む&lt;/h4&gt;

&lt;p&gt;アクションにはWIP制限があり、多くのアクションが出ても1イテレーションで消化できる数には限りがあるので、多くのトピックについて議論するより1つ1つのトピックについてじっくりめに議論するほうがおすすめです。&lt;/p&gt;

&lt;p&gt;アクションエリアにどれくらい未着手アクションが溜まっているかや、1トピックの議論にどれだけ時間がかかるかが、ふりかえりミーティングの長さを決めるヒントになります。最初は1時間枠などで開催し、ミーティングの様子を見ながらアップデートしていくとよいです。&lt;/p&gt;

&lt;h4 id=&quot;5-アクションの実行者を決める&quot;&gt;5. アクションの実行者を決める&lt;/h4&gt;

&lt;p&gt;次のイテレーションで完了させるアクションをWIP上限内で決めます。&lt;/p&gt;

&lt;p&gt;アクションごとに人をアサインしてもいいですし、ペアアサインなどにし個人の忙しさに依存しにくい状態を目指してもいいですし、バックログの消化が得意なチームであれば手が空いた人が都度ピックするかたちでもいいです。なんであれ、次のふりかえりミーティングまでにやると決めたものが完了できる方法であればOKです。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;最後に、チームで使ったテンプレートを置いておきます。&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;border:1px solid #CFD8DC&quot; alt=&quot;cheatsheet&quot; src=&quot;/assets/2024-06-14/cheatsheet.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先述のとおり、ふりかえりはKPTにこだわらずもっと自由にやっていいものだと思っているので、これからもチームやプロジェクトに合う方法を探し続けていきたいと思います。それらがどこかで誰かの参考になれば幸いです。&lt;/p&gt;</content><author><name></name></author><summary type="html">KPTを継続していたものの意見が出にくくなったりTryが実行されなくなったり…といったマンネリ化や改善サイクルの停滞はどのチームも1度くらいは体験するのではないでしょうか。そんなときはふりかえりの方法を少し変えて刺激を得ることが有効な手段のひとつです。</summary></entry><entry><title type="html">チーム目標を設定するフレームワークをつくったので紹介したい</title><link href="https://aloerina01.github.io/blog/2024-04-04-1" rel="alternate" type="text/html" title="チーム目標を設定するフレームワークをつくったので紹介したい" /><published>2024-04-04T00:00:00+00:00</published><updated>2024-04-04T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2024-04-04-1">&lt;p&gt;新年度です。目標を設定するシーズンですね。&lt;/p&gt;

&lt;p&gt;私の職場でも個々人が目標設定をする時期ですし、同時に私が関わるスクラムチームでもチームとしての目標を決める議論がされました。&lt;br /&gt;
それらを見ていて、『チーム目標を議論して決める難しさ』を感じる場面が何度かありました。最終的な理想状態を見据えている人もいれば、直近で達成したい短期目標を意識している人もいます。やりたいことは山のようにあるけれど、それらが最終目標にどれだけ効果的に結びつくかが曖昧なこともあります。&lt;/p&gt;

&lt;p&gt;目線が違う状態でアイデアが多く出る議論を続けるのは難しいので、目標設定のためのフレームワークをつくってみました。目線を合わせた議論や、建設的な目標設定を導くツールです。&lt;/p&gt;

&lt;h3 id=&quot;全体像&quot;&gt;全体像&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2024-04-04/framework_template.jpg&quot; alt=&quot;フレームワークの全体像&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このマトリクスを順に埋めていきます。後述しますが列は増減していいですし、マスを全部埋めなくても適切な目標が見つかればその時点で目標設定完了です。&lt;br /&gt;
順に使い方を紹介していきます。&lt;/p&gt;

&lt;h3 id=&quot;1最終ゴールを右上のマスに記入する&quot;&gt;1．最終ゴールを右上のマスに記入する&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2024-04-04/framework_usage1.jpg&quot; alt=&quot;使い方1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;縦軸・横軸の説明はさておき、まずは右上のマスに現時点で思い描けている『&lt;strong&gt;最終的に到達したい状態または達成したい成果&lt;/strong&gt;』を記入します。抽象的でもいいし、現時点で考えうる最終的目標でOKです。目標はナマモノなので変化していって当然です。&lt;br /&gt;
たとえば&lt;/p&gt;

&lt;p class=&quot;note&quot; style=&quot;margin:16px 0&quot;&gt;
プロダクトバックログを安定的に開発し続けるチームになる
&lt;/p&gt;

&lt;p&gt;このくらいざっくりした目標でも大丈夫です。&lt;/p&gt;

&lt;h3 id=&quot;2-スモールステップを見つける&quot;&gt;2. スモールステップを見つける&lt;/h3&gt;
&lt;p&gt;次に最終目標にたどり着くまでのステップを分けていきましょう。マイルストーンを置いたり、短期目標や中期目標に分解したりするイメージです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2024-04-04/framework_usage2.jpg&quot; alt=&quot;使い方2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最終目標から左に向かって考えていきます。十分達成できそうなスモールステップまで掘り下げ、Step1からGoalに向けて見返したときに適切な階段となっていれば上出来です。&lt;/p&gt;

&lt;h3 id=&quot;3-目標を具体化し行動を起こしやすくする&quot;&gt;3. 目標を具体化し行動を起こしやすくする&lt;/h3&gt;
&lt;p&gt;手頃なスモールステップがみつかって、それを目標にして行動が起こせそうであれば目標設定は完了です。ですが抽象度が高く達成のためにどのようなアクションを起こせばよいかが分からない目標である可能性があります。達成手段を自由に柔軟に選択でき、裁量がある目標とも言えます。&lt;/p&gt;

&lt;p&gt;ただチーム目標においては抽象的すぎると解釈の違いが生まれやすく、不適切なアクションが取られる可能性もあります。&lt;br /&gt;
極端な例を挙げるなら、「スプリントゴールを守る」という目標に対するアクションが「守りやすいように消極的なスプリントゴールを設定する」では本末転倒ですし、「残業してでもやりぬく」ではチームの出力は持続できません。&lt;/p&gt;

&lt;p&gt;目標達成にむけたアクションに柔軟性を持たせたい場合は抽象度の高い目標のままにし、逆にミスリードを防いだり決まった道筋で目標達成していきたい場合は目標の具体度を上げます。そのためにマトリクスの縦軸を使います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2024-04-04/framework_usage3.jpg&quot; alt=&quot;使い方3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;どういった成果・要素が積み重なれば最終目標の達成に近づくかを掘り下げていきます。&lt;strong&gt;結果目標・成果目標&lt;/strong&gt;と呼ばれるものです。
たとえば上述した「プロダクトバックログを安定的に開発し続けるチームになる」という最終目標の実現に必要な要素の1つとして&lt;/p&gt;

&lt;p class=&quot;note&quot; style=&quot;margin:16px 0&quot;&gt;
次スプリントで着手するであろうバックログアイテムが相対見積もり済みであり、優先順位順に並んでいる状態を維持する
&lt;/p&gt;

&lt;p&gt;を定義してみます。&lt;br /&gt;
少し具体的になったので、これでチームメンバーが動き出せそうであれば具体化は終了ですが、より指示的な目標にする場合はこれを達成するアクションにまで落とし込むこともできます。&lt;/p&gt;

&lt;p class=&quot;note&quot; style=&quot;margin:16px 0&quot;&gt;
プロダクトバックログリファインメントの場で相対見積もりをし、見積もられているアイテムの総ポイントが【平均ベロシティ+10pt】となる状態を維持する
&lt;/p&gt;

&lt;p&gt;ここまで落とし込むと、「いつ」「なにを」「どれくらい」するかまで明確です。&lt;strong&gt;行動目標&lt;/strong&gt;と呼ばれるもので、一番最初に決めた最終目標と比較するとかなり具体的になったと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2024-04-04/framework_usage4.jpg&quot; alt=&quot;使い方4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;実際には、図のように目標を具体的にするほど数が増えるはずなので、マス目の数にとらわれず腹落ちするまで結果目標や行動目標を考え尽くす必要があります。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;今回紹介したものは、マトリクス型のテンプレートを埋めながら適切な目標を探すためのフレームワークでした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2024-04-04/framework_overall.jpg&quot; alt=&quot;フレームワークの全体像&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使い方を整理すると&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;右上に最終的なゴールを記入する&lt;/li&gt;
  &lt;li&gt;左に向かって最終目標までのステップをつくる&lt;/li&gt;
  &lt;li&gt;抽象度が高すぎるものは下に向かって具体化する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;という流れです。&lt;/p&gt;

&lt;p&gt;オンラインで目標設定のディスカッションをする際にMiroなどのホワイトボードツールにマトリクスを用意して付箋を重ねながら議論したり、オフラインの場でマトリクスを印刷して指差しながら議論の目線を合わせたりといった使い方を想定しています。もちろん個人の目標設定時にも使えます。&lt;/p&gt;

&lt;p&gt;最後に改めて補足しておくと、マトリクスをすべて埋めることが重要なのではなく、&lt;strong&gt;納得いく目標を見つけること&lt;/strong&gt;が大切です。またチームで議論しながら目標設定する場合は&lt;strong&gt;議論の目線を揃えること&lt;/strong&gt;が重要です。そのために多少なりとも役立てれば幸いです。&lt;/p&gt;</content><author><name></name></author><summary type="html">新年度です。目標を設定するシーズンですね。</summary></entry><entry><title type="html">チームメンバーに仕事と裁量をわたすときのひと工夫</title><link href="https://aloerina01.github.io/blog/2023-05-22-1" rel="alternate" type="text/html" title="チームメンバーに仕事と裁量をわたすときのひと工夫" /><published>2023-05-22T00:00:00+00:00</published><updated>2023-05-22T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2023-05-22-1">&lt;p&gt;チームのリーダー、エンジニアリングマネージャー、新入社員のメンターなどの役割をすると、『チームメンバーにどのように仕事を任せるか』と考えることがあります。特にそれなりにスキルがあるチームメンバーに対してこれを考える場合、『どれくらい/どのように裁量を渡すか』がポイントの一つです。&lt;/p&gt;

&lt;p&gt;私がEMとしてチームメンバーに仕事を任せるとき&lt;strong&gt;『その仕事をどのように進行しどのように完了させるか(何を持って完了とするか)』を決める裁量を渡す&lt;/strong&gt;方針であり、その旨をチームメンバーに重ね重ね伝えています。&lt;/p&gt;

&lt;p&gt;以下はチームメンバーとの実際のコミュニケーション例です。&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;
「あなたが開発案件を担当するとき、仕様に対してどのようにプランナーやデザイナーとすり合わせるか、どう設計しどれだけ実装の風呂敷を広げるか、どのように見積もりどう進行するか、など幅広い裁量があります。
&lt;/p&gt;
&lt;p&gt;
とはいえ、必ずすべてに責任を持てという意味ではありませんし、やり切らないと期待に沿えないという意味でもありません。&lt;strong&gt;なるべく広めに裁量を渡すので、その中で自身できるものを選びとりながら&lt;/strong&gt;仕事を進めてください。分からない部分やできないと感じた部分は自分に投げ返してください。  
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;私は広く裁量を渡す、あなたは一部の裁量を担う/返す、とラリーを重ねながら&lt;/strong&gt;できることを増やしていったり得意分野を見つけたり、新しいチャレンジをしていきましょう。」
&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;裁量をうまく活用してもらうための工夫&quot;&gt;裁量をうまく活用してもらうための工夫&lt;/h3&gt;

&lt;h4 id=&quot;1-チームのフェーズやタスクの期限を考慮する&quot;&gt;1. チームのフェーズやタスクの期限を考慮する&lt;/h4&gt;

&lt;p&gt;前提として、チームが締切に追われ続けている自転車操業状態ではこの裁量の渡し方は不可能です。またお願いするタスクの期限が厳密である場合や、満たすべき要件が多い場合にも難しいでしょう。&lt;br /&gt;
今までにない広い裁量の中で冷静に選択や決断をしていくためには、仕事を受け取ったチームメンバーが&lt;strong&gt;時間と心の余裕を持てていること&lt;/strong&gt;が大切です。&lt;/p&gt;

&lt;h4 id=&quot;2-必要に応じてこちらの期待値を添える&quot;&gt;2. 必要に応じてこちらの期待値を添える&lt;/h4&gt;

&lt;p&gt;広く裁量を渡すと言っても、一言も口出ししてはいけないということではありません。たとえば「実装方針について自身で考えてみてほしいが、最終的にはチームの合意を得てほしい」と条件をつけることもあります。&lt;br /&gt;
また「この前の取り組みを資料にまとめてほしい。どんな構成にすべきか私もまだイメージできていないので、何度かレビューのやり取りが続いてしまうかもしれない」とある程度レビュー回数が多くなることを事前に申し添えることもあります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;裁量を渡されたチームメンバーが、どれだけ自由な選択ができるのか、もしくは何かしらの制約があるのかを理解して仕事に臨める&lt;/strong&gt;状況をつくることを心がけます。事前にすべてを伝えるのは難しいので条件を後出ししてしまうこともありますが、その可能性を最初に伝えておくだけでも多少良いかもしれません。&lt;/p&gt;

&lt;h4 id=&quot;3-ペアアサインやチームアサインをする&quot;&gt;3. ペアアサインやチームアサインをする&lt;/h4&gt;

&lt;p&gt;広い裁量の中で選択や判断を重ねて仕事を完遂することは、人によって難易度の感じ方が違いますし、取り得る選択肢も違います。難しいと感じる人にはいくつかの選択肢やヒントをマネージャーが提案しフォローすることもできますが、私はそれよりも好きな手段があります。裁量をペアやチームに対して渡す方法です。&lt;/p&gt;

&lt;p&gt;人により得手不得手が違うので、&lt;strong&gt;補い合ったりアイデアを出し合ったりして裁量を存分に活かせるケースが多く、私には思いもよらない素晴らしいアウトプットが出ることもある&lt;/strong&gt;ので仕事をお願いするときのちょっとした楽しみでもあります。&lt;/p&gt;

&lt;p&gt;注意点ですが、あんまり人数が多いと何もしない人を生みかねないので、複数人アサインは2〜3人がベストだと思います。また、チームメンバー同士でうまく相互作用が起きているのは、私たちのチームがこれまでにモブプロやふりかえりなどを重ね複数人でワークすることに慣れていたからかも、と注釈しておきます。複数人での仕事に不慣れなチームだと、誰かがリーダーとなり「仕事を分担する人、言われた通り分担をやる人」の関係になってしまい全員が裁量を発揮できない結果となることも多いです。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;今となっては当たり前でも、マネージャーになったばかりの頃はどうしていいか見当がつかなかったことが山程あったので、それらを思い返しながら言語化しました。こういった細かいTipsを今後も書いていきたいところです。&lt;/p&gt;

&lt;p&gt;マネジメントのやり方はメンバーの数だけ(もしくはそれ以上に)あるので、引き出しの多さはマネージャーのスキルを考える上で重要な要素の一つです。過去の手札をまったく同じように使い回すことは難しくとも、それらを組み合わせたり、それらに着想を得て新しい手段を取ったりできます。自分のためにも手札を見える形で残しておきたい思いがあって書きまとめましたが、新任マネージャーのどなたかのお役に立てれば何よりです。&lt;/p&gt;</content><author><name></name></author><summary type="html">チームのリーダー、エンジニアリングマネージャー、新入社員のメンターなどの役割をすると、『チームメンバーにどのように仕事を任せるか』と考えることがあります。特にそれなりにスキルがあるチームメンバーに対してこれを考える場合、『どれくらい/どのように裁量を渡すか』がポイントの一つです。</summary></entry><entry><title type="html">「来月からエンジニアリングマネージャーやってね」と言われたら</title><link href="https://aloerina01.github.io/blog/2022-12-16-1" rel="alternate" type="text/html" title="「来月からエンジニアリングマネージャーやってね」と言われたら" /><published>2022-12-16T00:00:00+00:00</published><updated>2022-12-16T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2022-12-16-1">&lt;p&gt;タイトルのように「来月からエンジニアリングマネージャーやってくれませんか」と言われた経験が私にもあります。もう3〜4年くらい前のことです。おそらく多くのエンジニアと同じように当時の私はマネジメント業に興味がなく、マネージャーになってみたものの何から手を付ければ良いかも分からず、とりあえずチームメンバーとの1on1をセッティングしてみたりしました。&lt;/p&gt;

&lt;p&gt;まさしく”レベル1”だった私ですが、いくらか経験を積み、今では見える景色や解像度が変わるくらいにはレベルアップした実感があります。&lt;/p&gt;

&lt;p&gt;当時に戻れるならこんなふうにマネジメント業務に取り掛かろう、というイメージが具体的に持てるようになったので、今回はそれを言語化してみようと思います。少しレベルアップした自分から、レベル1だった当時の自分へのアドバイスのつもりで書いてみます。&lt;/p&gt;

&lt;p&gt;※ちなみに数人のエンジニアで構成されるチームのエンジニアリングマネージャーを任された場面を想定してます。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#まえおき&quot; id=&quot;markdown-toc-まえおき&quot;&gt;まえおき&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1-帽子のかぶり直しには時間がかかることを理解する&quot; id=&quot;markdown-toc-1-帽子のかぶり直しには時間がかかることを理解する&quot;&gt;1. 帽子のかぶり直しには時間がかかることを理解する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-名前のある仕事や日々進捗が出る仕事はごくわずかだと理解する&quot; id=&quot;markdown-toc-2-名前のある仕事や日々進捗が出る仕事はごくわずかだと理解する&quot;&gt;2. 名前のある仕事や日々進捗が出る仕事はごくわずかだと理解する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-マネージャーへの期待値を理解しチームを観察する&quot; id=&quot;markdown-toc-3-マネージャーへの期待値を理解しチームを観察する&quot;&gt;3. マネージャーへの期待値を理解し、チームを観察する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考書籍&quot; id=&quot;markdown-toc-参考書籍&quot;&gt;参考書籍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;まえおき&quot;&gt;まえおき&lt;/h3&gt;

&lt;p&gt;当時の自分に伝えたいことは山程ありますが、まずはマネージャーになりたての時期を想定し、&lt;strong&gt;具体的なアクションよりも、考え方や向き合い方について&lt;/strong&gt;触れていこうと思います。&lt;br /&gt;
マネージャーになった以上1on1をしたりアサインをしたり指示出しをしたり……と業務内容をガラッと変えて成果を出さねばと当時は焦っていましたが、&lt;strong&gt;焦って行動を変えてもなかなか結果が追いつかない&lt;/strong&gt;ことのほうが圧倒的に多かったです。名実ともにマネージャーになるために、まどろっこしいかもしれませんが&lt;strong&gt;まずは考え方のシフトから&lt;/strong&gt;始めてみるのはいかがでしょう。&lt;/p&gt;

&lt;h3 id=&quot;1-帽子のかぶり直しには時間がかかることを理解する&quot;&gt;1. 帽子のかぶり直しには時間がかかることを理解する&lt;/h3&gt;

&lt;p&gt;それまでチームメンバーだった自分が今日からマネージャーになるということは、&lt;strong&gt;『チームメンバー』の帽子から『マネージャー』の帽子にかぶり直しをする必要があります&lt;/strong&gt;。そして帽子をかぶり直したことを自分と周囲の全員が真に理解するには時間がかかります。被り直しが浸透しきっていない例を体験談をもとに挙げてみます。&lt;/p&gt;

&lt;p&gt;1つ目の例では、チームメンバーとの会議の場で、私が「〜〜したい」と意思表示をした場面を思い返してみます。私はチームメンバーと対等な目線で(つまり『チームメンバー』の帽子を被って)アイデアを&lt;strong&gt;提案したつもり&lt;/strong&gt;でいたものの、チームメンバーには&lt;strong&gt;マネージャーからの指示&lt;/strong&gt;だと伝わってしまっていました。このとき私は、周囲から「マネージャーの帽子被っている」と認識されていることを理解していませんでした。私自身が帽子のかぶり直しを自覚できていなかった例です。&lt;/p&gt;

&lt;p&gt;もう1つ例を挙げます。当時私は業務上必要な指示/依頼をする行為を、偉そうな行為と捉え抵抗感を抱いていました。今であれば誠実さや敬意の有無こそが大事だと分かりますが、当時は「何様だ！」と思われないかソワソワしていたのだと思います。この例は、&lt;strong&gt;頭では帽子のかぶり直しをしたことを理解した&lt;/strong&gt;上で指示/依頼業務に臨んでいたものの、&lt;strong&gt;感情が追いつかずにいた&lt;/strong&gt;例です。&lt;br /&gt;
また、チームメンバーのほうが感情が追いつかず「先日まで同僚だったお前になぜそんなこと言われなきゃならないんだ！」と反発してしまうケースも起こり得るでしょうし、チームの代表として他部署の人と会話をしようとしても対等に扱ってもらえないケースもあり得るでしょう。&lt;/p&gt;

&lt;p&gt;これらの例をまとめるとこんな感じです。
&lt;img src=&quot;/assets/2022-12-13-1.jpeg&quot; alt=&quot;被り直しができていないパターン一覧&quot; /&gt;&lt;/p&gt;

&lt;p&gt;帽子のかぶり直しは&lt;strong&gt;自分自身だけでなく周囲の人にも認識してもらう必要があります&lt;/strong&gt;。まずは自分自身が帽子のかぶり直しを意識し行動し、それを積み重ねて少しずつ周囲にも頭で理解し心で納得してもらうことが必要です。感情の問題がある以上、時間をかけることでしか解決できないと割り切って、&lt;strong&gt;徐々にマネージャーになっていく&lt;/strong&gt;つもりで日々の業務に臨むと良いと思います。&lt;/p&gt;

&lt;h3 id=&quot;2-名前のある仕事や日々進捗が出る仕事はごくわずかだと理解する&quot;&gt;2. 名前のある仕事や日々進捗が出る仕事はごくわずかだと理解する&lt;/h3&gt;

&lt;p&gt;マネージャーになると、自分の成果をうまく自覚できず不安や焦りを覚えることがあります。私は今でもあります。その理由は、&lt;strong&gt;分かりやすい名前が付く仕事が少ない&lt;/strong&gt;からと、&lt;strong&gt;短期間で進捗する仕事がほぼない&lt;/strong&gt;からだと考えています。逆に言うとそれまでのエンジニアリング業務は、名前を付けやすく短期間で進捗が見える業務が多いので「今なんの仕事をしているか」がはっきりしていました。たとえば&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;昨日は5件バグフィックスした&lt;/li&gt;
  &lt;li&gt;今日は10コミットした&lt;/li&gt;
  &lt;li&gt;次のリリースに向けて〇〇機能を実装している&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった具合に、作業内容を具体的に表現しやすく、成果を実感しやすいです。&lt;/p&gt;

&lt;p&gt;一方でマネジメント業務では&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プロダクトやチームメンバーの状況を観察する&lt;/li&gt;
  &lt;li&gt;チームを成熟させるための中期的な計画を考える&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;など、なんだか作業内容が読み取りにくい時間の使い方になりがちです。もちろん長期的に見たらこの積み重ねがインパクトのある大きな成果に繋がるのですが(そこが面白さでもありますが)、&lt;strong&gt;昨日と今日の差分を測るのが非常に難しい&lt;/strong&gt;です。&lt;br /&gt;
私が日頃している仕事で名前のある仕事と言ったら『1on1』『採用面接』『ミーティングファシリテーション』くらいです。それ以外の時間は&lt;strong&gt;情報収集しているか、チームメンバーを観察しているか、次のアクションを考えているか&lt;/strong&gt;といった無名のタスクをしています。&lt;/p&gt;

&lt;p&gt;進捗の見えにくい仕事ばかりしていると「何もしていないのではないか」「自分は役に立っていないのではないか」と不安になります。分かりやすい成果が欲しくて、チームビルディングのイベントを企画したり、コードを書きたくなることもあります(もちろんそれらが悪いことではなく、本来マネージャーとして優先すべきことをせずに&lt;strong&gt;目先の達成感のために仕事を選ぶのが良くない&lt;/strong&gt;ということです)。&lt;/p&gt;

&lt;p&gt;そんなとき私は一呼吸おいて、マネジメント業務とは名前のある仕事や日々進捗が出る仕事が少ないものだと思い出すようにしています。マネージャーがチームと向き合って第一にすべきことは、そしてし続けるべきことは、&lt;strong&gt;チームメンバー1人1人を観察し、こまめにフィードバックし、成果を高め続けていくこと&lt;/strong&gt;です。1日観察したからといって成果は出ないですが、1日観察をサボればフィードバックの機会を1つ逃すことになるかもしれません。長期的な成果や目標を目指して辛抱強くマネジメントしていくことが大切です。&lt;/p&gt;

&lt;h3 id=&quot;3-マネージャーへの期待値を理解しチームを観察する&quot;&gt;3. マネージャーへの期待値を理解し、チームを観察する&lt;/h3&gt;

&lt;p&gt;マネジメント業務とは、極端に言えば「上手く成果を出すために何でもする」ことです。言い換えると、&lt;strong&gt;状況に応じて具体的なタスクが変わる&lt;/strong&gt;ということです。ですので、&lt;strong&gt;自分をマネージャーに任命した上長が自分に何を期待しているのかを理解する&lt;/strong&gt;ことが、行動のヒントになります。&lt;/p&gt;

&lt;p&gt;例えば、毎日締め切りに追われて疲弊しきったチームが健全に働けるよう立て直してほしいとか、はたまた前任のマネージャーによってある程度自己組織化されたチームを引き継ぐことで少しずつマネジメント業務に慣れてほしいとか。そういった期待を理解すると、自分がどんなマネジメントをすべきかの糸口が見えてくると思います。もし既に頭の中にその方向性がある場合でも、上長やチームメンバーが自分に望むことと照らし合わせれば、より確度を高められるはずです。&lt;/p&gt;

&lt;p&gt;そして、周囲からの期待にせよ、マネージャーの業務内容にせよ、&lt;strong&gt;『チームの状態』に依って決まることが多い&lt;/strong&gt;です。上述の例では「疲弊しきったチーム」と「自己組織化されたチーム」が登場し、それに依ってマネージャーへの期待内容が変化しています。チームの状態を適切に把握できれば何をすべきかが見え、期待内容も理解しやすいということです。&lt;/p&gt;

&lt;p&gt;それを踏まえて、当時私が参考にしていた&lt;strong&gt;チームの状態を理解するための3つの指標&lt;/strong&gt;を紹介します。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;チームに時間や心のゆとりがない&lt;strong&gt;サバイバルフェーズ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;十分な時間やゆとりがあり、その時間を使って学習や検証を行っている&lt;strong&gt;学習フェーズ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;自分たちの問題を自力で解決し変化し続けている&lt;strong&gt;自己組織化フェーズ&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今の自分たちはどのフェーズにいるのかじっくり観察し見極めることで、次にすべきことが見えてくるかもしれません。チームの状態を測る指標はこれ以外にもたくさんありますが、まずはお手軽な3フェーズに分けて観察するだけでも十分ヒントが得られると思います。&lt;/p&gt;

&lt;h3 id=&quot;参考書籍&quot;&gt;参考書籍&lt;/h3&gt;

&lt;div class=&quot;amazon-link-container&quot;&gt;
  &lt;div class=&quot;amazon-link-body&quot;&gt;
      &lt;a class=&quot;amazon-link-image&quot; href=&quot;https://amzn.to/3WaenlU&quot; target=&quot;_blank&quot;&gt;
        &lt;img src=&quot;https://m.media-amazon.com/images/I/710YEQbMvZL._SY385_.jpg&quot; alt=&quot;&quot; style=&quot;height:120px; width:auto; border:none !important; margin:0px !important;&quot; /&gt;
      &lt;/a&gt;
    &lt;div class=&quot;amazon-link-border&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;amazon-link-label&quot;&gt;
      &lt;span&gt;エラスティックリーダーシップ 自己組織化チームの育て方&lt;/span&gt;
      &lt;a href=&quot;https://amzn.to/3WaenlU&quot; target=&quot;_blank&quot;&gt;Amazon.co.jp で購入する&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;エラスティックリーダーシップ 自己組織化チームの育て方&lt;/strong&gt;&lt;br /&gt;
上で紹介した3つのフェーズはこの本で紹介されていました。それぞれのフェーズをどう見極めるか、どう対処するかが詳しく書かれています。タイトルには「リーダーシップ」とありますが、マネジメントにも通ずる内容、むしろマネジメントとして取り組むべき内容だと思います。マネジメント入門期に読んでもためになりましたし、今読み返しても気づきが得られているので、繰り返し読んで参考になる本です。&lt;/p&gt;

&lt;div class=&quot;amazon-link-container&quot;&gt;
  &lt;div class=&quot;amazon-link-body&quot;&gt;
    &lt;a class=&quot;amazon-link-image&quot; href=&quot;https://amzn.to/3Pxvr31&quot; target=&quot;_blank&quot;&gt;
      &lt;img src=&quot;https://m.media-amazon.com/images/I/51Dsw0fW3qL._SY445_SX342_.jpg&quot; style=&quot;height:120px; width:auto; border:none !important; margin:0px !important;&quot; /&gt;
    &lt;/a&gt;
    &lt;div class=&quot;amazon-link-border&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;amazon-link-label&quot;&gt;
      &lt;span&gt;EQリーダーシップ 成功する人のこころの知能指数の活かし方&lt;/span&gt;
      &lt;a href=&quot;https://amzn.to/3Pxvr31&quot; target=&quot;_blank&quot;&gt;Amazon.co.jp で購入する&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;EQリーダーシップ 成功する人のこころの知能指数の活かし方&lt;/strong&gt;&lt;br /&gt;
あまりメジャーな本ではないのですが、個人的に気に入っています。こちらもタイトルに「リーダーシップ」とありますが、この本ではマネージャーのスキルとしてのリーダーシップが説明されています。チームの状況に応じた6つのリーダーシップが紹介されていて、レベル1の頃に私が抱きがちだった「マネージャーなら〇〇しなきゃ」といった固定観念から解放してくれて、マネジメントの多様性を理解する手助けになりました。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;「マネージャーになったし1on1もしっかりやってメンバーのキャリアもいっぱい考えて開発プロセスもいい感じにしてコード品質も高めて……それからそれから……」と意気込んでスタートしたものの、1ヶ月経っても何も変わってないしマネージャーとして頼られることもないし、どうやってマネージャーとして踏み出せば良いんだ……。&lt;br /&gt;
と悩んだ記憶をたどりながら、当時の自分に向けたアドバイスを書きました。&lt;strong&gt;とにかく焦らず、少しずつマネージャーになっていくんだぞ&lt;/strong&gt;、というのが一番の思いです。&lt;/p&gt;

&lt;p&gt;……なんて大げさにメッセージを残してみたものの、まだまだマネージャーとして道半ばです。チームのフェーズによってマネジメントタスクが変わると書きましたが、比較的得意なフェーズと苦手なフェーズがあったりもします。様々なシチュエーションを経験し試行錯誤をしながら手札を増やしていくという点では、レベル1だった頃と変わりません。そういった意味でも、やはり焦らず少しずつ前進するしかないのだと思います。&lt;/p&gt;

&lt;p&gt;感想はぜひ&lt;a href=&quot;https://twitter.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;までよろしくお願いします。それでは、良いお年を。&lt;/p&gt;</content><author><name></name></author><summary type="html">タイトルのように「来月からエンジニアリングマネージャーやってくれませんか」と言われた経験が私にもあります。もう3〜4年くらい前のことです。おそらく多くのエンジニアと同じように当時の私はマネジメント業に興味がなく、マネージャーになってみたものの何から手を付ければ良いかも分からず、とりあえずチームメンバーとの1on1をセッティングしてみたりしました。</summary></entry><entry><title type="html">スクラムチームがぶち当たる「相対見積もり」の壁と、私たちの乗り越え方</title><link href="https://aloerina01.github.io/blog/2021-10-29-1" rel="alternate" type="text/html" title="スクラムチームがぶち当たる「相対見積もり」の壁と、私たちの乗り越え方" /><published>2021-10-29T00:00:00+00:00</published><updated>2021-10-29T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2021-10-29-1">&lt;p&gt;これまでエンジニアやスクラムマスターとしてスクラムチームに関わって来ましたが、その過程で何度も「相対見積もり」や「ストーリーポイント」に纏わる悩みにぶち当たってきました。工数や期間での見積もりに慣れていた私にとって、それらは理解も実践もしにくい手強いものでした。&lt;/p&gt;

&lt;p&gt;今回は、私が実際に直面した問題と、それらを打破するためチームで取り組んできたことを思い返してみようと思います。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#壁1-相対見積もりの考え方を理解できない&quot; id=&quot;markdown-toc-壁1-相対見積もりの考え方を理解できない&quot;&gt;壁1. 「相対見積もり」の考え方を理解できない&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#壁2-ストーリーポイントが何を見積もる手段かを理解していない&quot; id=&quot;markdown-toc-壁2-ストーリーポイントが何を見積もる手段かを理解していない&quot;&gt;壁2. ストーリーポイントが「何を見積もる手段か」を理解していない&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#壁3-見積もりをコミットメントと捉えてしまう&quot; id=&quot;markdown-toc-壁3-見積もりをコミットメントと捉えてしまう&quot;&gt;壁3. 見積もりをコミットメントと捉えてしまう&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;壁1-相対見積もりの考え方を理解できない&quot;&gt;壁1. 「相対見積もり」の考え方を理解できない&lt;/h3&gt;

&lt;p&gt;バックログ上に積まれたユーザーストーリーやエピックを見積もろうとしたとき、私たちは真っ先に「こんなコンポーネントを新規実装するだろう、おそらく2日くらい掛かる」「あの既存機能をいじる必要があるが、複雑な箇所なので時間がかかりそうだ」と&lt;strong&gt;具体的な作業内容とそれにかかる時間をセットで&lt;/strong&gt;イメージしていました。それらを足し合わせて(さらにバッファを加えて)最終的な見積もりを出していました。&lt;/p&gt;

&lt;p&gt;しかし、これは相対見積もりではありません。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相対的に見積もるには、過去に取り組んだ仕事を基準とし、その仕事との比較で考える&lt;/strong&gt;必要があります。ストーリーポイントで見積もるにせよ、日数で見積もるにせよ、です。&lt;br /&gt;
これを理解し体に馴染ませるために、見積もりの度に「このストーリーは(基準としている)あの仕事と同じくらい？ 倍くらい？ 半分くらい？」と聞き合うようことを繰り返しました。今では基準と比較することにも慣れてきましたが、長いこと苦戦した問題でした。苦戦した要因は、次の『壁2』で紹介する問題と合わさって、相対見積もりをより難しく捉えていたからでもあります。&lt;/p&gt;

&lt;h3 id=&quot;壁2-ストーリーポイントが何を見積もる手段かを理解していない&quot;&gt;壁2. ストーリーポイントが「何を見積もる手段か」を理解していない&lt;/h3&gt;

&lt;p&gt;ストーリーポイントの考え方は、慣れるまでは分かるようで分からないものでした。分かったつもりになっていた私がよくやった失敗は、「このストーリーは基準の2倍くらいの4日程度かかりそう、であればポイントは５だ」と期間を見積もりストーリーポイントに換算してしまうことでした。これはまさしくストーリーポイントの用途を理解していないことの現れです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ストーリーポイントは「規模」を見積もります&lt;/strong&gt;。規模を「作業量」と言い換えることもできます。ストーリーポイントを使う理由は、&lt;strong&gt;作業量の見積もりと期間の見積もりを分離して行うこと&lt;/strong&gt;だと考えると分かりやすかったです。上述の失敗例では期間を見積もってからストーリーポイントに変換していますが、本来のストーリーポイントの使い方に習うなら、&lt;strong&gt;ストーリーポイントによって作業量を見積もり、ベロシティと照らし合わせて期間を導き出す&lt;/strong&gt;が正解です。&lt;/p&gt;

&lt;p&gt;私たちがこの考えに馴染めず苦労した背景には、「相対見積もりをするならストーリーポイント(またはTシャツサイズ等のそれに準ずるもの)を利用しなければならない」と思い込んでいたことがあります。また、いくつかあるストーリーポイントの利点をチームメンバー各々が断片的に知り、それを利用目的だと思い込んでいたことも要因でした。例えば「ストーリーポイントを使えば個々人の力量に依存しない見積もりができること」や「ストーリーポイントを使えば仕様が曖昧でも見積もれること」を、ストーリーポイントを採用する理由だと思っていました。&lt;br /&gt;
そういった利点は多々あるものの、本質的には&lt;strong&gt;ストーリーポイントは「期間」と「作業量」を切り離し別々に見積もる道具&lt;/strong&gt;だと腹落ちしたことで前進しました。&lt;/p&gt;

&lt;p&gt;とはいえ、理解できてもすぐにうまく実践できたわけではありません。&lt;/p&gt;

&lt;h3 id=&quot;壁3-見積もりをコミットメントと捉えてしまう&quot;&gt;壁3. 見積もりをコミットメントと捉えてしまう&lt;/h3&gt;

&lt;p&gt;先述の2つの壁を少しずつ乗り越え、ストーリーポイントを使った相対見積もりに慣れてくると、仕様が固まっていない曖昧な案件に対しても見積もりをするようになりました。言い換えると、作業量の見積もりに「複雑さ」を加味するようになりました。&lt;/p&gt;

&lt;p&gt;「この手の案件はステークホルダーの時間が取りにくく後になって仕様がひっくり返るケースがある」「細かい仕様は決まってないけど、この画面の機能をいじるのであればおそらく作業量はこのくらいになる」と、&lt;strong&gt;作業量に複雑さをかけ合わせたものにポイントをつける&lt;/strong&gt;ようになりました。&lt;/p&gt;

&lt;p&gt;このやり方は一長一短だとは思いますがそれはさておき、より深刻な失敗だったことは、一度見積もったポイントは根性で守り抜こうとしていたことです。もちろん期限を守ることはエンジニアには必須です。ただし&lt;strong&gt;見積もりはコミットメントではない&lt;/strong&gt;ということも忘れてはなりません。見積もりを基にコミットメントを決めることはありますが、見積もりのすべてがコミットメントになるわけではないのです。&lt;/p&gt;

&lt;p&gt;“不確実性のコーン”と表現されるように、見積もりは初期段階ほど不正確です。ましてや私たちのように複雑さを加味するのであれば尚更です。ですので作業量に影響する要素が明らかになる度に&lt;strong&gt;再見積もり&lt;/strong&gt;をし、その確度(実現可能性)を上げることが必要でした。&lt;br /&gt;
加えて、プランナーと「あとどんな情報が揃えば再見積もりができるか」や「見積もりと実働がズレたらどう対応していくか」などについて事前に認識を合わせておくことも、再見積もりを繰り返すプロセスを維持するために必要でした。&lt;/p&gt;

&lt;p&gt;見積もりの確度がどの程度かは、見積もった私たちにしか分かりません。ですのでそれを丁寧にステークホルダーに共有し、確度に応じたプランを用意しておくところまでをセットで行うよう習慣化することで、周囲から再見積もりのプロセスの理解を得やすくなると考えています。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;「相対見積もりといえばストーリーポイントでしょ！」と勢いで始めたもののなかなか定着せず、効果を得られなかった私が、どのような問題に陥っていたかを紹介しました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;相対見積もりとストーリーポイントをごちゃまぜに捉えていたこと&lt;/li&gt;
  &lt;li&gt;ストーリーポイントにより「作業量」を見積もり、その値から「期間」を算出する、という根本的な考え方を理解していなかったこと&lt;/li&gt;
  &lt;li&gt;再見積もりをして確度をあげようとしていなかったこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらが主な失敗でした。乗り越えるためには失敗を自覚し向き合うことはもちろん大事ですが、併せて根気も必要だったと思います。時間をかけて実践とふりかえりを重ねてようやく今の理解度に到達できたので、総括すると「根気強く向き合う」が私たちの乗り越え方だったと言えるかもしれません。と言っても、まだ完璧な相対見積もりができているわけではないので、これからも新しい壁にぶつかりながら試行錯誤していこうと思います。&lt;/p&gt;

&lt;p&gt;最後に、参考書籍を紹介して締めくくります。&lt;br /&gt;
いろいろ読みましたが、一番理解が捗ったのは&lt;a href=&quot;https://amzn.to/3ny06zy&quot; target=&quot;_blank&quot;&gt;アジャイルな見積りと計画づくり ～価値あるソフトウェアを育てる概念と技法～&lt;/a&gt;でした。同じような悩みを持つ開発者の手助けになれば幸いです。&lt;/p&gt;</content><author><name></name></author><summary type="html">これまでエンジニアやスクラムマスターとしてスクラムチームに関わって来ましたが、その過程で何度も「相対見積もり」や「ストーリーポイント」に纏わる悩みにぶち当たってきました。工数や期間での見積もりに慣れていた私にとって、それらは理解も実践もしにくい手強いものでした。</summary></entry><entry><title type="html">esbuild 入門者のための書き置き</title><link href="https://aloerina01.github.io/blog/2021-09-15-1" rel="alternate" type="text/html" title="esbuild 入門者のための書き置き" /><published>2021-09-15T00:00:00+00:00</published><updated>2021-09-15T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2021-09-15-1">&lt;p&gt;最近開発環境を改善する機会が減っていて、Babelやらwebpackやらの情報を追っていませんでした。が、チームメンバーが爆速なesbuildを導入してくれて感動したのを機に、久々にフロントエンドの開発環境について考えてみました。&lt;/p&gt;

&lt;p&gt;今回は手始めに、初めてesbuildに触ったときに感じた「これなに」「どう使うの」「気をつけることは」あたりを書き置きしておきます。ちなみに執筆時点でのesbuildのバージョンは&lt;a href=&quot;https://github.com/evanw/esbuild/releases/tag/v0.12.28&quot; target=&quot;_blank&quot;&gt;0.12.28&lt;/a&gt;です。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#esbuild-とは&quot; id=&quot;markdown-toc-esbuild-とは&quot;&gt;esbuild とは&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#使い方&quot; id=&quot;markdown-toc-使い方&quot;&gt;使い方&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#利用例&quot; id=&quot;markdown-toc-利用例&quot;&gt;利用例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#気をつけたいこと&quot; id=&quot;markdown-toc-気をつけたいこと&quot;&gt;気をつけたいこと&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#css-modules未対応&quot; id=&quot;markdown-toc-css-modules未対応&quot;&gt;CSS Modules未対応&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tsconfigの解釈&quot; id=&quot;markdown-toc-tsconfigの解釈&quot;&gt;tsconfigの解釈&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#動的import-code-splittingの展望&quot; id=&quot;markdown-toc-動的import-code-splittingの展望&quot;&gt;動的import, Code Splittingの展望&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#es5との付き合い方&quot; id=&quot;markdown-toc-es5との付き合い方&quot;&gt;ES5との付き合い方&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#top-lebel-await未対応&quot; id=&quot;markdown-toc-top-lebel-await未対応&quot;&gt;top-lebel await未対応&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわり&quot; id=&quot;markdown-toc-おわり&quot;&gt;おわり&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;esbuild-とは&quot;&gt;&lt;a href=&quot;https://github.com/evanw/esbuild&quot; target=&quot;_blank&quot;&gt;esbuild&lt;/a&gt; とは&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;An extremely fast JavaScript bundler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とにかく速さに重点を置いたバンドラのようです。バンドラということは、並列で比較できるものは&lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;、&lt;a href=&quot;https://rollupjs.org/&quot; target=&quot;_blank&quot;&gt;rollup.jp&lt;/a&gt;、&lt;a href=&quot;https://ja.parceljs.org/&quot; target=&quot;_blank&quot;&gt;Parcel&lt;/a&gt;などです。バンドルと同時にトランスパイルもしてくれるようなので、その点で言えば&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/babel-with-typescript.html&quot; target=&quot;_blank&quot;&gt;tsc&lt;/a&gt;や&lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot;&gt;Babel&lt;/a&gt;が比較対象になるでしょう。&lt;/p&gt;

&lt;p&gt;esbuildは標準で、JS、JSX、TS、TSX、CSS、JSONなどを解釈しバンドルします。パッと見た感じはビルドに必要な一連の処理を担ってくれる印象ですが、&lt;strong&gt;ES5への変換に未対応&lt;/strong&gt;だったり、TypeScriptを解釈するものの&lt;strong&gt;型チェックはしなかったり&lt;/strong&gt;と、ビルド時によく使われる機能が一部ないので、利用の際は要件に合うかの確認が必要そうです。&lt;/p&gt;

&lt;h3 id=&quot;使い方&quot;&gt;使い方&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install -D esbuild&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npx esbuild --bundle ./index.js&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;configファイルなしで実行できるので、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt;して即利用できます。基本的なオプションも揃っています。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Option&lt;/th&gt;
      &lt;th&gt;効果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--bundle&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;依存関係をインライン化します。esbuildはデフォルトでは依存関係をバンドルに含まないので、明示的に有効化する必要があります。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--minify&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;ビルドしたファイルを圧縮します。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--watch&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;ウォッチモードを有効にします。ファイルの変更を検知して再ビルドが走るようになります。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--target&lt;/code&gt;&lt;br /&gt;例: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-target=es2020,chrome58,node12&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;ビルド後に生成するJSのターゲット環境を指定します。デフォルトは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esnext&lt;/code&gt;です。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--sourcemap&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;sourcemapを生成します。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--define&lt;/code&gt;&lt;br /&gt;例: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--define:DEBUG=true&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;グローバル変数を定義します。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--splitting&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Code Splitting を有効化しますが、まだWIPのオプションです。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;自分がよく使いそうなものをピックアップしました。これ以外のオプションは&lt;a href=&quot;https://esbuild.github.io/api/#build-api&quot; target=&quot;_blank&quot;&gt;公式&lt;/a&gt;をご確認ください。&lt;/p&gt;

&lt;h3 id=&quot;利用例&quot;&gt;利用例&lt;/h3&gt;

&lt;p&gt;ES5に変換できないので、Production buildには使いにくいのが現状です。ですのでProduction buildは今まで通りwebpackを使って、Development buildにesbuildを利用するのが無難だと思います。&lt;a href=&quot;https://github.com/privatenumber/esbuild-loader&quot; target=&quot;_blank&quot;&gt;esbuild-loader&lt;/a&gt;を使うとwebpack上でesbuildを利用できます。&lt;/p&gt;

&lt;h3 id=&quot;気をつけたいこと&quot;&gt;気をつけたいこと&lt;/h3&gt;

&lt;p&gt;まだBeta版ということもあって気をつけたほうが良いことはいっぱいあるとは思いますが、私がドキュメントやIssueを見ていて目に止まった部分を書き置きしておきます。&lt;/p&gt;

&lt;h4 id=&quot;css-modules未対応&quot;&gt;CSS Modules未対応&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;0.7.7でExperimentalなCSSのサポートを開始&lt;/li&gt;
  &lt;li&gt;sass/scssの対応はまだの様子&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/evanw/esbuild/issues/20&quot; target=&quot;_blank&quot;&gt;Issue&lt;/a&gt;にて議論中&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tsconfigの解釈&quot;&gt;tsconfigの解釈&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;TS, TSXをビルドするときはtsconfigの設定を読み取る&lt;/li&gt;
  &lt;li&gt;tsconfigの特定フィールドのみ参照される、詳細は&lt;a href=&quot;https://esbuild.github.io/content-types/#tsconfig-json&quot; target=&quot;_blank&quot;&gt;公式&lt;/a&gt;にて&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;動的import-code-splittingの展望&quot;&gt;動的import, Code Splittingの展望&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;動的importの構文には対応している&lt;/li&gt;
  &lt;li&gt;現時点ではCode SplittingはESMのみ対応してるが、ほかのモジュール形式も対応していくつもり&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/evanw/esbuild/issues/16&quot; target=&quot;_blank&quot;&gt;Issue&lt;/a&gt;にて議論中&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;es5との付き合い方&quot;&gt;ES5との付き合い方&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--target=es5&lt;/code&gt;とした場合、元々ES5のコードはES5のままになるが、ES6のコードをES5に変換することはない&lt;/li&gt;
  &lt;li&gt;今後ES5に対応することはなさそう&lt;/li&gt;
  &lt;li&gt;参考&lt;a href=&quot;https://github.com/evanw/esbuild/issues/297&quot; target=&quot;_blank&quot;&gt;Issue&lt;/a&gt;はこちら&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;top-lebel-await未対応&quot;&gt;top-lebel await未対応&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;今後もしばらくは対応できそうにない&lt;/li&gt;
  &lt;li&gt;細かい議論は&lt;a href=&quot;https://github.com/evanw/esbuild/issues/253&quot; target=&quot;_blank&quot;&gt;Issue&lt;/a&gt;にて&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;おわり&quot;&gt;おわり&lt;/h3&gt;

&lt;p&gt;以上、簡単ですがesbuildについての書き置きです。&lt;br /&gt;
冒頭にも書いたように、最近は環境構築する頻度が減っているので、おそらく数カ月後に久々にesbuildを使おうとして右往左往している自分がいることでしょう。そのときに少しでも役立てばいいなと思います(バージョンが進んでほとんど役立たなくなっているかもしれませんが😫)。&lt;/p&gt;</content><author><name></name></author><summary type="html">最近開発環境を改善する機会が減っていて、Babelやらwebpackやらの情報を追っていませんでした。が、チームメンバーが爆速なesbuildを導入してくれて感動したのを機に、久々にフロントエンドの開発環境について考えてみました。</summary></entry><entry><title type="html">穏やかで簡潔なHAPPYコードレビューを実現するChrome拡張をつくってみた</title><link href="https://aloerina01.github.io/blog/2021-07-15-1" rel="alternate" type="text/html" title="穏やかで簡潔なHAPPYコードレビューを実現するChrome拡張をつくってみた" /><published>2021-07-15T00:00:00+00:00</published><updated>2021-07-15T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2021-07-15-1">&lt;p&gt;コードレビュー時に思うように意図が伝わらず、会話のラリーがやたら増えてしまったり、詰問合戦のようなギスギスした雰囲気になってしまったことありませんか？ 私はあります。もう少し気持ちよく無駄なくレビューできないものかと思っていたのですが、先日ふと思いついた対処策があったので試してみました。&lt;/p&gt;

&lt;h3 id=&quot;つくったもの&quot;&gt;つくったもの&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2021-07-15-1.gif&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;コードレビュー時に「アイデア」「質問したい」「議論したい」「修正したい」の4つのアイキャッチをお手軽に付与できるようにするChrome拡張です。&lt;/p&gt;

&lt;h3 id=&quot;解決したかった問題&quot;&gt;解決したかった問題&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;「ここ、なんでこう実装したんですか？」&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;こんな質問をしたレビュワーにはどんな意図があるでしょうか。こんな質問を受け取ったレビュイーはどう感じるでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;レビュワーの意図&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;他にもいろいろ実現手段がある中でこの方法を採用した根拠を知りたい&lt;/li&gt;
  &lt;li&gt;特殊な背景があるようだったらコメントを残すようにお願いしたい&lt;/li&gt;
  &lt;li&gt;納得できない実装方法だったので変えてほしい&lt;/li&gt;
  &lt;li&gt;自分には思いつかない方法だったので、経緯を聞いて学びたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;レビュイーの受け取り方&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;しまった、良くないやり方だったのかも知れない😣&lt;/li&gt;
  &lt;li&gt;散々悩んでたどり着いた解なんだよ、イチャモンつけるな…😡&lt;/li&gt;
  &lt;li&gt;どの選択肢を取るかは「決め」の問題なのになぜ突っ込んできたんだろう🤔&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このようにパッと思いつくだけでもいろいろな意図があり、感じ方があります。意図を含めて互いに丁寧にコメントし合うことができれば最高ですが、言葉選びはレビュワーによりムラが出ますし、忙しいときに言葉足らずになってしまうことがあるかもしれません。レビュイーも見てほしい部分を適切に伝えることが難しいかもしれませんし、未完成の部分が混じっていることもあるでしょう(そして当たり前ですがこれはどちらが悪いかという話ではありません)。&lt;/p&gt;

&lt;p&gt;一人ひとりが解決するのは難しい、だったらツールで解決しよう、という経緯で開発に至りました。&lt;/p&gt;

&lt;h3 id=&quot;コンセプト&quot;&gt;コンセプト&lt;/h3&gt;

&lt;p&gt;アイキャッチには「〜したい」と書かれています。「〜すべき」「〜してください」といった言葉は使われていません。&lt;/p&gt;

&lt;p&gt;多くの場面で、コードレビューにおける対話では互いの背景知識に差があります。実装者(レビュイー)の悩み抜いたプロセスやボツになった選択肢のすべてがレビュワーに見えているわけではありません。レビュワーが持つ広い視野やバイアスのない視点は、長い時間コードを見つめ続けてきた実装者には欠けがちです。&lt;br /&gt;
そういった互いの差に配慮しつつ、正しく自分の考えを伝える(汲み取ってもらう)には、&lt;strong&gt;「〜すべき」といった断定的な言い方や「〜してください」といった命令的な言い回しでは力不足&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;代わりに、効果的にレビューを進める言い回しが「〜したい」という主観的な表現です。&lt;/p&gt;

&lt;p&gt;私たちがレビューの場でしている会話は、実は「何が正しいか」「何が最適か」「このコードは良いか/悪いか」という&lt;strong&gt;事実を正しく理解するための会話&lt;/strong&gt;ではありません。「何を正しいと考えているか」「このコードをどうしたいか」という&lt;strong&gt;認識・解釈・価値観の会話&lt;/strong&gt;の会話です。ですので「(自分は)〜したい」と、主観的な認識を伝えようとすること、ひいては「私は自分のコメントが主観的なものだと自覚しているよ」と伝えることが、丁寧かつ効果的な会話に繋がります。&lt;/p&gt;

&lt;p&gt;「私は正しい、あなたは間違っている」という思い込みのもと行われる会話を減らし、&lt;strong&gt;違って当たり前の認識・解釈・価値観を互いにすり合わせる会話のきっかけを作る&lt;/strong&gt;ことが、今回つくったもののコンセプトなのです。&lt;/p&gt;

&lt;h3 id=&quot;実装の紹介&quot;&gt;実装の紹介&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aloerina01/pr_review_toys&quot; target=&quot;_blank&quot;&gt;aloerina01/pr_review_toys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使った技術&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TypeScript&lt;/li&gt;
  &lt;li&gt;Preact&lt;/li&gt;
  &lt;li&gt;Parcel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Github上のコメント入力欄を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;querySelectorAll&lt;/code&gt;して、Preact製のプルダウンをマウントしているだけです。コードレビュー時のコメント入力欄はユーザーの操作により増減するので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutationObserver&lt;/code&gt;で検知しています。&lt;br /&gt;
小さなアプリケーションをサクッとつくるときはParcelでバンドルすることが多いです。&lt;/p&gt;

&lt;p&gt;ちなみにストアでの提供はしていませんが、リポジトリのREADMEに使い方を記載していますので、気になった方は試してみてくださいね。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;今回作ったChrome拡張自体は大したものではありませんが、そのコンセプトには私がコミュニケーションにおいて大事にしている考え方が詰め込まれています。そしてその考え方は、&lt;a href=&quot;https://amzn.to/3yWHAoI&quot; target=&quot;_blank&quot;&gt;話す技術・聞く技術―交渉で最高の成果を引き出す「3つの会話」&lt;/a&gt;という本の内容が基盤になっています。日常生活の中で頻発する難しい会話を3つに分類し、なぜ難しいのか、どうすれば良くなるのか、について体系的にまとめた内容です。&lt;br /&gt;
何度も読み返していて、私のルーツのような本なので、もし読んだことがある方がいれば&lt;a href=&quot;https://twitter.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;まで感想を送ってくれると嬉しいです！&lt;/p&gt;</content><author><name></name></author><summary type="html">コードレビュー時に思うように意図が伝わらず、会話のラリーがやたら増えてしまったり、詰問合戦のようなギスギスした雰囲気になってしまったことありませんか？ 私はあります。もう少し気持ちよく無駄なくレビューできないものかと思っていたのですが、先日ふと思いついた対処策があったので試してみました。</summary></entry></feed>