<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://aloerina01.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aloerina01.github.io/" rel="alternate" type="text/html" /><updated>2018-10-15T03:41:09+00:00</updated><id>https://aloerina01.github.io/</id><title type="html">mille-feuille code</title><subtitle>Web Developer。同じような過ちを繰り返さないように備忘録を残しています。
</subtitle><entry><title type="html">Vue.nextTickのコードリーディング</title><link href="https://aloerina01.github.io/blog/2018-09-27-1" rel="alternate" type="text/html" title="Vue.nextTickのコードリーディング" /><published>2018-09-27T00:00:00+00:00</published><updated>2018-09-27T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-09-27-1">&lt;h3 id=&quot;vuenexttickとは&quot;&gt;&lt;a href=&quot;https://jp.vuejs.org/v2/api/#Vue-nextTick&quot; target=&quot;_blank&quot;&gt;Vue.nextTick&lt;/a&gt;とは？&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;callbackを延期し、DOMの更新サイクル後に実行します。DOM更新を待ち受けるために、いくつかのデータを変更した直後に使用してください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;VueはDOMを非同期に更新する&lt;/strong&gt;ため、「DOMを更新した後にその更新済みのDOMに対して何らかの処理をする」といったような場面で&lt;code class=&quot;highlighter-rouge&quot;&gt;nextTick&lt;/code&gt;が役立ちます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// single file component&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/template&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;mounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// default この時点ではまだDOMは更新されていない&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nextTick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// hello   DOM更新後にこのコードに到達する &lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;dataの値を更新し、それをDOMに反映するコードです。&lt;/p&gt;

&lt;p&gt;このときVueは、dataの更新処理をある程度ため込み、同じDOMを更新する処理が複数件たまった場合はまとめて1回だけ更新します。つまり非同期的に(コードの記述順とは違った順序で)DOMが更新されるということです。&lt;/p&gt;

&lt;p&gt;もう少し正確な言葉で言うと、ある&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/EventLoop&quot; target=&quot;_blank&quot;&gt;イベントループ&lt;/a&gt;において同じwatcherが複数回更新される場合は、タスクキューには重複除外した1つのタスクが詰められます。そして次のイベントループでタスクを順次捌いていきます。&lt;/p&gt;

&lt;p&gt;そしてこの後に、つまり&lt;strong&gt;タスクキューに入った処理が全て完了した後に&lt;/strong&gt;何か別の処理を行う方法がnextTickというわけです。&lt;/p&gt;

&lt;h3 id=&quot;コードリーディングしてみる&quot;&gt;コードリーディングしてみる&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/vuejs/vue/blob/dev/src/core/util/next-tick.js&quot; target=&quot;_blank&quot;&gt;src/core/util/next-tick.js&lt;/a&gt; に実装されています。コード量が少なく他モジュールへの依存も薄いので、読みやすそうです。ちなみに執筆時点で最新の&lt;a href=&quot;https://github.com/vuejs/vue/releases/tag/v2.5.17&quot; target=&quot;_blank&quot;&gt;v2.5.17&lt;/a&gt;を参考にしています。&lt;/p&gt;

&lt;h5 id=&quot;nexttick関数本体&quot;&gt;nextTick関数本体&lt;/h5&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* 中略 */&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextTick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_resolve&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nextTick'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;_resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useMacroTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;macroTimerFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;microTimerFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* 以下省略 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;主要な部分だけピックアップしています。nextTick関数は引数で受け取った&lt;code class=&quot;highlighter-rouge&quot;&gt;cb&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;callbacks&lt;/code&gt;に詰め、&lt;code class=&quot;highlighter-rouge&quot;&gt;macroTimerFunc&lt;/code&gt;もしくは&lt;code class=&quot;highlighter-rouge&quot;&gt;microTimerFunc&lt;/code&gt;を呼び出しています。これらがどんな関数か見てみます。&lt;/p&gt;

&lt;h5 id=&quot;macrotimerfunc-と-microtimerfunc-の実装&quot;&gt;macroTimerFunc と microTimerFunc の実装&lt;/h5&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 補足: ①callbacksに詰め込んだ関数を実行する本体&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flushCallbacks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;pending&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;copies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;copies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;copies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 補足: ②macroTimerFuncの定義&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setImmediate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'undefined'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isNative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setImmediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;macroTimerFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setImmediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flushCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* 中略 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;macroTimerFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flushCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 補足: ③microTimerFuncの定義&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'undefined'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isNative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;microTimerFunc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flushCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* 省略 */&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flushCallbacks&lt;/code&gt;&lt;/strong&gt;は、&lt;code class=&quot;highlighter-rouge&quot;&gt;callbacks&lt;/code&gt;の中身を取り出して実行し、&lt;code class=&quot;highlighter-rouge&quot;&gt;callbacks&lt;/code&gt;を初期化しています&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;macroTimerFunc&lt;/code&gt;&lt;/strong&gt;は、&lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate&lt;/code&gt;もしくは&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;を使ってflushCallbacksを呼び出しています&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;microTimerFunc&lt;/code&gt;&lt;/strong&gt;は、&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.resolve()&lt;/code&gt;を使ってflushCallbacksを呼び出しています&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここで登場する &lt;strong&gt;macro tasks&lt;/strong&gt; と &lt;strong&gt;micro tasks&lt;/strong&gt; という考え方は&lt;a href=&quot;https://promisesaplus.com/#point-67&quot; target=&quot;_blank&quot;&gt;Promises/A+&lt;/a&gt;にも記載があり、どちらも&lt;strong&gt;現在のイベントループ内の全てのタスクの実行完了後に、タスクを追加で実行する手法&lt;/strong&gt;を指しています。&lt;br /&gt;
nextTickはこの手法を利用して「DOMの更新後に処理をする」ことを実現しているわけですね。&lt;/p&gt;

&lt;p&gt;改めて macro tasks と micro tasks の実装を確認してみます。&lt;/p&gt;

&lt;h5 id=&quot;macro-tasks&quot;&gt;macro tasks&lt;/h5&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;setImmediate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// or&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h5 id=&quot;micro-tasks&quot;&gt;micro tasks&lt;/h5&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;いずれも「イベントループの後に処理を実行する」のでどちらを使ってもnextTickの目的は果たせそうですが、Vueはこれらを使い分けていて、その理由についてコード内にコメントされています。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In &amp;lt; 2.4 we used microtasks everywhere, but there are some scenarios where microtasks have too high a priority and fire in between supposedly sequential events (e.g. #4521, #6690) or even between bubbling of the same event (#6566). &lt;br /&gt;
However, using (macro) tasks everywhere also has subtle problems when state is changed right before repaint (e.g. #6813, out-in transitions).&lt;br /&gt;
Here we use microtask by default, but expose a way to force (macro) task when needed (e.g. in event handlers attached by v-on).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vue2.4以前までは micro tasks のみを利用していていましたが、それだと実行タイミングが早すぎてしまうケースがあり、場面に応じて macro tasks と使い分けているということですね。&lt;br /&gt;
言い換えると、これらは実行タイミングが違うということです。&lt;/p&gt;

&lt;h3 id=&quot;実行タイミングの検証&quot;&gt;実行タイミングの検証&lt;/h3&gt;

&lt;p&gt;macro tasks と micro tasks の実行タイミングはどのように違うのでしょうか？ 簡単なコードで検証してみます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// execute nextTick(macroTask)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;macroTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'call from macroTask (use setTimeout)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// execute nextTick(microTask)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;microTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'call from microTask (use Promise)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;macroTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;microTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-plain&quot;&gt;// console

1: call from microTask (use Promise) (469.1000000020722)
2: call from macroTask (use setTimeout) (488.5999999969499)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;macroTask と microTask をそれぞれ実行します。&lt;br /&gt;
何度やってもPromiseを利用した microTask が先に実行されます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;同期処理をはさんでみます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// execute nextTick(macroTask)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;macroTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'call from macroTask (use setTimeout)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// execute nextTick(microTask)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;microTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'call from microTask (use Promise)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// execute sync function&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;syncSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syncSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'call from sync function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-plain&quot;&gt;//console

1: call from sync function (1525.500000003376)
2: call from microTask (use Promise) (1525.8000000030734)
3: call from macroTask (use setTimeout) (1529.900000008638)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同期処理(タスクキューにあるタスク)を実行した後に microTask » macroTask の順で実行されます。この挙動については、MDNの&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/EventLoop#Run-to-completion&quot; target=&quot;_blank&quot;&gt;Run-to-completion&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/EventLoop#%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AE%E8%BF%BD%E5%8A%A0&quot; target=&quot;_blank&quot;&gt;メッセージの追加&lt;/a&gt;に詳細が記載されています。&lt;/p&gt;

&lt;p&gt;最後に、macro tasks と micro tasks がDOM更新処理と絡んできた場合にどのように動作するのかを検証したコードを残しておきます。&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/aloerina/pqahdwsk/39/embedded/js,html,result/dark/&quot; allowfullscreen=&quot;allowfullscreen&quot; allowpaymentrequest=&quot;&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;nextTickとは直接関係ない余談ですが、DOMの更新ロジックが完了してもすぐに画面に反映されずイベントループの後で反映される、というのも見どころです。&lt;/p&gt;</content><author><name></name></author><summary type="html">Vue.nextTickとは？</summary></entry><entry><title type="html">React+Fluxアプリケーションを正しく設計するための覚書</title><link href="https://aloerina01.github.io/blog/2018-09-14-1" rel="alternate" type="text/html" title="React+Fluxアプリケーションを正しく設計するための覚書" /><published>2018-09-14T00:00:00+00:00</published><updated>2018-09-14T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-09-14-1">&lt;p&gt;Reactの良さを活かしやすいFluxは、Webアプリケーションの設計手法としてずいぶん馴染みのあるものになったように感じます。私もFluxを取り入れた開発を2年近く経験し、知見も溜まり、使い慣れたような気持ちでいました。&lt;/p&gt;

&lt;p&gt;が、使い始めた頃はもちろん、今でも何となく分かったつもりでいる部分があったり、複雑な実装が必要な場面で悩むことがあったりします。「Fluxはダメだ！うまく実現できない！」と投げ出したくなるときもありますが、そんなときこそ基礎へ立ち返る機会。&lt;br /&gt;
そんなわけでFluxに再入門し、&lt;strong&gt;Fluxとは何なのか、どう実装するのが適切なのか&lt;/strong&gt;を&lt;a href=&quot;http://facebook.github.io/flux/&quot; target=&quot;_blank&quot;&gt;公式ドキュメント&lt;/a&gt;に則って整理してみようと思います。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#fluxとは&quot; id=&quot;markdown-toc-fluxとは&quot;&gt;Fluxとは&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#dispatcher&quot; id=&quot;markdown-toc-dispatcher&quot;&gt;Dispatcher&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#要件1-イベントが発生したらすべてのcallbackを実行すること&quot; id=&quot;markdown-toc-要件1-イベントが発生したらすべてのcallbackを実行すること&quot;&gt;要件1 イベントが発生したらすべてのCallbackを実行すること&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#要件2-callbackの実行順序を制御できること&quot; id=&quot;markdown-toc-要件2-callbackの実行順序を制御できること&quot;&gt;要件2 Callbackの実行順序を制御できること&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#action&quot; id=&quot;markdown-toc-action&quot;&gt;Action&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#actionに必要なたった2つのこと&quot; id=&quot;markdown-toc-actionに必要なたった2つのこと&quot;&gt;Actionに必要なたった2つのこと&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#actioncreator&quot; id=&quot;markdown-toc-actioncreator&quot;&gt;ActionCreator&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#flux-standard-action&quot; id=&quot;markdown-toc-flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#store&quot; id=&quot;markdown-toc-store&quot;&gt;Store&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#storeの役割&quot; id=&quot;markdown-toc-storeの役割&quot;&gt;Storeの役割&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#initialstateの実装&quot; id=&quot;markdown-toc-initialstateの実装&quot;&gt;InitialStateの実装&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reduceの実装そしてimmutablestate&quot; id=&quot;markdown-toc-reduceの実装そしてimmutablestate&quot;&gt;Reduceの実装、そしてImmutableState&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#view&quot; id=&quot;markdown-toc-view&quot;&gt;View&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#状態を持たないviews&quot; id=&quot;markdown-toc-状態を持たないviews&quot;&gt;状態を持たないViews&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#storeとのパイプラインとなり状態を受け取るcontroller-views&quot; id=&quot;markdown-toc-storeとのパイプラインとなり状態を受け取るcontroller-views&quot;&gt;Storeとのパイプラインとなり状態を受け取るController-Views&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#viewのまとめ&quot; id=&quot;markdown-toc-viewのまとめ&quot;&gt;Viewのまとめ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#私がfluxを採用する理由&quot; id=&quot;markdown-toc-私がfluxを採用する理由&quot;&gt;私がFluxを採用する理由&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fluxとは&quot;&gt;Fluxとは&lt;/h3&gt;

&lt;p&gt;Fluxとは、&lt;strong&gt;クライアントサイドのデータフローの設計パターン&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-09-14-1-flux.png&quot; alt=&quot;flux data flow&quot; /&gt;
&lt;small&gt;&lt;a href=&quot;https://facebook.github.io/flux/docs/in-depth-overview.html#content&quot; target=&quot;_blank&quot;&gt;In Depth Overview - Flux&lt;/a&gt;より&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Fluxの代名詞的なこの図でも示されている通り、Fluxは&lt;strong&gt;データの流れを一方向に強制します&lt;/strong&gt;。そして一方向に流れるデータを受け取る/送る4つの登場人物(Action, Dispatcher, Store, View)が&lt;strong&gt;どのようにデータを扱うかを定義する&lt;/strong&gt;ことで、アプリケーション内の見通しを良く保つ設計となっています。&lt;/p&gt;

&lt;p&gt;この一方向データフローは&lt;strong&gt;イベント駆動&lt;/strong&gt;で実現されます。詳細は後述しますが簡単に流れをまとめると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ボタンクリックなどをトリガーにして&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;と呼ばれるイベントとデータのかたまりが&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dispatcher&lt;/strong&gt;と呼ばれるイベントハブに集約され&lt;/li&gt;
  &lt;li&gt;Dispatcherに登録されたCallbackによって&lt;strong&gt;Store&lt;/strong&gt;の状態を更新し&lt;/li&gt;
  &lt;li&gt;そしてStoreの変更を検知した&lt;strong&gt;View&lt;/strong&gt;が自身を更新します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このように、Fluxは&lt;strong&gt;一方向データフロー&lt;/strong&gt;と&lt;strong&gt;イベント駆動&lt;/strong&gt;を根幹とする設計手法となっています。これを念頭に置いた上で、Fluxの4つの役割がどういうものなのか考えていきます。&lt;/p&gt;

&lt;h3 id=&quot;dispatcher&quot;&gt;Dispatcher&lt;/h3&gt;

&lt;p&gt;Dispatcherはアプリケーション全体で唯一のイベントハブです。イベント駆動であるFluxのコアであり、Fluxのデータフローを支えるための2つの要件を満たす必要があります。&lt;/p&gt;

&lt;h4 id=&quot;要件1-イベントが発生したらすべてのcallbackを実行すること&quot;&gt;要件1 イベントが発生したらすべてのCallbackを実行すること&lt;/h4&gt;

&lt;p&gt;Dispatcherは、&lt;code class=&quot;highlighter-rouge&quot;&gt;addEventListener&lt;/code&gt;のように「特定のイベントに特定のCallbackを紐づける」のではなく、&lt;strong&gt;何らかのイベントがdispatchされたら登録されている全てのCallbackを実行します&lt;/strong&gt;。その際、Callbackには&lt;strong&gt;Payload&lt;/strong&gt;と呼ばれる「イベントに関する情報を持つオブジェクト」を引数として渡します。ここまでがDispatcherの役割です。&lt;/p&gt;

&lt;p&gt;Payloadに応じてStoreの中身をどう更新するか(または更新しないか)は、Callback側で判断することになります。&lt;/p&gt;

&lt;p&gt;ここまでをまとめると、Dispatcherとは「Callbackを登録し、イベントがdispatchされたら登録されたすべてのCallbackにPayloadを渡し実行する」ものであると言えます。コードで表現すると以下のようになります。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dispatcher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Dispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;余談ですが、Dispatcherは「アプリケーション全体で&lt;strong&gt;唯一の&lt;/strong&gt;イベントハブ」なのでシングルトンで実装しています。&lt;/p&gt;

&lt;h4 id=&quot;要件2-callbackの実行順序を制御できること&quot;&gt;要件2 Callbackの実行順序を制御できること&lt;/h4&gt;

&lt;p&gt;Storeを更新する際、実行順序を意識しなければならない場面もあると思います。例えば「ユーザーの設定を更新して、それに応じて表示する情報を更新する」といったケースですね。これに対応することがDispatcherのもう一つの要件です。つまり&lt;strong&gt;Callbackの実行順序を制御する&lt;/strong&gt;ことです。&lt;/p&gt;

&lt;p&gt;Fluxの設計手法を実現するための最小限のライブラリである&lt;a href=&quot;http://facebook.github.io/flux/docs/flux-utils.html#content&quot; target=&quot;_blank&quot;&gt;Flux Utils&lt;/a&gt;で実例を確認してみます。Flux Utilsに実装されている&lt;a href=&quot;https://github.com/facebook/flux/blob/master/src/Dispatcher.js&quot; target=&quot;_blank&quot;&gt;Dispatcher.js&lt;/a&gt;には&lt;code class=&quot;highlighter-rouge&quot;&gt;waitFor&lt;/code&gt;という関数が定義されていて、これがCallbackの実行順序を制御しています。&lt;/p&gt;

&lt;p&gt;waitFor関数はCallbackの中から呼び出すもので、「あのCallbackの実行を待ってから自身を実行する」という制御をすることができます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;UserSettingStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hoge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callbackId1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// callbackを登録すると、識別子が発行されます&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callbackId1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// UsdrSettingStoreの更新を待ちます&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userSetting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSettingStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// UserSettingStoreの更新後に最新の状態を取得します&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;DispatcherにCallbackを登録すると、Callbackの識別子が発行されます&lt;/li&gt;
  &lt;li&gt;Callback内で&lt;code class=&quot;highlighter-rouge&quot;&gt;waitFor&lt;/code&gt;を呼び出し、引数に実行を待ちたい識別子を渡します&lt;/li&gt;
  &lt;li&gt;あとは同期的に処理を書くだけでOKです&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;waitFor関数は実装の一例ですが、このようにCallbackの実行順序を管理できる仕組みを持っておくことが必要です。&lt;/p&gt;

&lt;h3 id=&quot;action&quot;&gt;Action&lt;/h3&gt;

&lt;h4 id=&quot;actionに必要なたった2つのこと&quot;&gt;Actionに必要なたった2つのこと&lt;/h4&gt;

&lt;p&gt;Actionは、そのアプリケーション内でどんなユーザーオペレーションが起きるのか(ログインする、登録する、等)を定義するものです。言い換えると&lt;strong&gt;ユースケースを定義するもの&lt;/strong&gt;です。Actionの要件は以下の2つです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;プレーンなオブジェクトであること&lt;/li&gt;
  &lt;li&gt;ユースケースを表す&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;プロパティを持っていること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;とてもシンプルですね。ちなみにActionオブジェクト内に定義される&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;は一般的に&lt;strong&gt;ActionType&lt;/strong&gt;と呼ばれます。&lt;/p&gt;

&lt;p&gt;また、Actionには&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;プロパティ以外に、ユースケースを実行するために必要な値を持たせることもできます。以下のコードはTODOアプリの「TODOを追加する」Actionの実装例です。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ADD_TODO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ActionType&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hoge'&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 新しく追加するTODOの文字列&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// actionをdispatcherにわたす&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このActionがDispatcherに渡されることで、Fluxのデータフローが始まります。&lt;/p&gt;

&lt;h4 id=&quot;actioncreator&quot;&gt;ActionCreator&lt;/h4&gt;

&lt;p&gt;実際のコードでは、Actionを生成しDispatcherに送るまでの一連の処理を行うヘルパーメソッドを実装するケースが多く、このヘルパーメソッドを&lt;strong&gt;ActionCreator&lt;/strong&gt;と呼びます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActionTypes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./ActionTypes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatcher&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./Dispatcher'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addTodo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActionTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ADD_TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 定数化されたActionType&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;flux-standard-action&quot;&gt;Flux Standard Action&lt;/h4&gt;

&lt;p&gt;Flux思想のライブラリのひとつである&lt;a href=&quot;https://redux.js.org/&quot; target=&quot;_blank&quot;&gt;Redux&lt;/a&gt;では、「Actionとはこう実装すべき」という指標を定義しています。それが&lt;a href=&quot;https://github.com/redux-utilities/flux-standard-action&quot; target=&quot;_blank&quot;&gt;Flux Standard Action (FSA)&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;FSAは「読みやすさ」「使いやすさ」「シンプルさ」をコンセプトとし、上述の2つの要件に加え4つのルールを設けています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Actionは&lt;code class=&quot;highlighter-rouge&quot;&gt;payload&lt;/code&gt;プロパティを持つことができる&lt;/li&gt;
  &lt;li&gt;Actionは&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;プロパティを持つことができる&lt;/li&gt;
  &lt;li&gt;Actionは&lt;code class=&quot;highlighter-rouge&quot;&gt;meta&lt;/code&gt;プロパティを持つことができる&lt;/li&gt;
  &lt;li&gt;Actionは&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;payload&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;meta&lt;/code&gt;以外のプロパティを持ってはいけない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;プロパティはActionTypeのことですね。「typeは&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;を使って同じものか判定できるべきだ」と定義していますが、一般的にActionTypeはStringで実装することが多いと思うので、特に意識する必要はなさそうです。&lt;/p&gt;

&lt;p&gt;FSAにおける&lt;code class=&quot;highlighter-rouge&quot;&gt;payload&lt;/code&gt;プロパティは今まで説明してきた「Payload」より狭義です。先述したPayloadは「Dispatcherに渡されるもの」であり、つまりActionオブジェクトそのものを指していました。それに対してFSAのPayloadは「Actionの実行に必要な値」のみを指しています。「TODOを追加する」Actionの例でいうと、&lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt;部分のみがPayloadということになります。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ADD_TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hoge'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;FSAにおける&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;プロパティは、エラーが起きたことを通知するために&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;をセットして使います。「エラーであることを正常時と同じ方法で伝達する」という点で&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.reject&lt;/code&gt;に似ている、と説明されています。&lt;code class=&quot;highlighter-rouge&quot;&gt;error: true&lt;/code&gt;のときは&lt;code class=&quot;highlighter-rouge&quot;&gt;payload&lt;/code&gt;にはエラーオブジェクトを詰めるのが一般的な用法です。&lt;/p&gt;

&lt;p&gt;FSAにおける&lt;code class=&quot;highlighter-rouge&quot;&gt;meta&lt;/code&gt;プロパティは、&lt;code class=&quot;highlighter-rouge&quot;&gt;payload&lt;/code&gt;に詰めるべきでないものを持つための補助的なものです。&lt;/p&gt;

&lt;p&gt;以上がFSAのルールです。&lt;br /&gt;
FSAはReduxを使う上で守るべきものですが、Redux以外の方法でFlux設計をする場合でも選択肢のひとつとして検討してみるといいと思います。&lt;/p&gt;

&lt;h3 id=&quot;store&quot;&gt;Store&lt;/h3&gt;

&lt;h4 id=&quot;storeの役割&quot;&gt;Storeの役割&lt;/h4&gt;

&lt;p&gt;Storeは&lt;strong&gt;アプリケーションのState(状態)&lt;/strong&gt;と、&lt;strong&gt;それを操作するロジック&lt;/strong&gt;を持ちます。これだけ聞くとMVW(Whatever)のModelにも似ていますが、いくつか大きく異なる点があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getterのみを持ち、setterを持たない&lt;/li&gt;
  &lt;li&gt;setterの代わりにStoreを更新するための関数を持ち、それをDispatcherのCallbackとして登録する&lt;/li&gt;
  &lt;li&gt;Storeが変更されたら、イベントを発火し変更をViewに伝える&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActionTypes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./ActionTypes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatcher&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./Dispatcher'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dispatcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// CallbackをDispatcherに登録&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// getter&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Storeが持つStateを更新するための関数&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActionTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ADD_TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;nextState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Store内のStateが更新されたらイベントを発火&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように、Storeが保持する値を直接更新する方法(Setter)は存在しません。Storeが持つ値をひとまとめの&lt;code class=&quot;highlighter-rouge&quot;&gt;State&lt;/code&gt;とみなし、&lt;strong&gt;どのような条件でどのようにStateを更新するかを定義している&lt;/strong&gt;関数が実装されています。Dispatcherの説明時に度々登場した「Callback」は、Storeで実装されるというわけですね。&lt;/p&gt;

&lt;p&gt;ここまでの話をまとめると、&lt;strong&gt;何らかのActionがDispatcherに渡されると、Dispatcherに登録されているすべてのCallbackが実行され、そのCallbackが各々のStoreを更新していく&lt;/strong&gt;ということになります。&lt;/p&gt;

&lt;p&gt;ここまでで「どのようにViewを変更するか」の話が出ていないことからも分かるように、Viewとロジックは完全に切り離されることになります。アプリケーションの状態を変更するレイヤーでは「どのように状態を変えるか」にのみ専念すれば良く、変更後の状態に応じてViewをどのように変えるかはView側が気にかければ良いというわけです。&lt;/p&gt;

&lt;div style=&quot;border-radius:10px;background-color:#f7f7f7;padding:12px 20px;margin:42px 0 48px;&quot;&gt;

ただし、実際にはStoreがViewの状態を保持しなければならない場面も出てくると思います。つまりSoteには「アプリケーションの状態を保持するStore」と「Viewの状態を保持するStore」という2種類が存在するということになります。  
とはいえこれは公式ドキュメント外のお話。また別の機会に考えをまとめてみようと思います。

&lt;/div&gt;

&lt;h4 id=&quot;initialstateの実装&quot;&gt;InitialStateの実装&lt;/h4&gt;

&lt;p&gt;ViewはStateを取得するためにStoreのgetterを叩きます。ただ、初期描画時にはStoreが空っぽなので、初期値を定義しておく必要があります。上の実装例では&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;の中で初期値を定義していますが、別の関数としてくくり出しておくのが一般的です。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;reduceの実装そしてimmutablestate&quot;&gt;Reduceの実装、そしてImmutableState&lt;/h4&gt;

&lt;p&gt;Stateを更新するCallbackの実装方法においても、一般的に良しとされているパターンがあります。それが&lt;strong&gt;Reduce関数&lt;/strong&gt;です。Reduce関数は&lt;strong&gt;現在のStateとPayloadを受け取り、新しいStateを返す純粋関数&lt;/strong&gt;です。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActionTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ADD_TODO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こうすることでStoreのテストがしやすかったり、データの更新ロジックの周りに副作用が起きにくかったり、&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatcher.waitFor&lt;/code&gt;などと組み合わせても煩雑にならず可読性の高い状態を維持できたり…といったことが期待されます。&lt;/p&gt;

&lt;p&gt;Reduce関数と併せて、&lt;strong&gt;StateをImmutableにする&lt;/strong&gt;実装パターンもよく使われます。Reduce関数以外のところで意図せずStateが書き換えられてしまうことを防ぎ、堅牢性を高める手法です。&lt;/p&gt;

&lt;p&gt;Flux Utilsの&lt;a href=&quot;https://github.com/facebook/flux/blob/master/src/stores/FluxReduceStore.js&quot; target=&quot;_blank&quot;&gt;FluxReduceStore.js&lt;/a&gt;は、これらのパターンを組み込んだStoreを実装するためのライブラリです。このStoreを継承したStoreを実装すると、自然に由緒正しきStoreを実装することができます(できました)。&lt;/p&gt;

&lt;h3 id=&quot;view&quot;&gt;View&lt;/h3&gt;

&lt;p&gt;Fluxにおける「View」という役割には、実は2つの登場人物が含まれます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;状態を持たない&lt;strong&gt;Views&lt;/strong&gt; (役割としてのViewと区別するために複数形で表現しています)&lt;/li&gt;
  &lt;li&gt;Storeとのパイプラインとなり状態を受け取る&lt;strong&gt;Controller-Views&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;状態を持たないviews&quot;&gt;状態を持たないViews&lt;/h4&gt;

&lt;p&gt;Fluxにおける「View」の基本的な役割はシンプルで、&lt;strong&gt;外から状態を受け取り、テンプレートにはめ込み表示する&lt;/strong&gt;のみです。これが「自身では状態を持たない」ということです。&lt;/p&gt;

&lt;p&gt;ReactComponentで表現すると、&lt;strong&gt;Stateを持たず、Propsを受け取るだけのComponent&lt;/strong&gt;です。&lt;strong&gt;&lt;a href=&quot;https://reactjs.org/docs/components-and-props.html#functional-and-class-components&quot; target=&quot;_blank&quot;&gt;Functional Component&lt;/a&gt;&lt;/strong&gt;を使って実装します。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoComponet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{props.isDone}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように関数としてComponentを定義するのがFunctional Componentです。&lt;br /&gt;
従来のClass Componentと違いStateを持ったりインスタンス変数を持ったりできず、「propsを受け取る」機能だけを持つComponentです。そのためViewsの役割を明示的に守れるので、推奨されています。&lt;/p&gt;

&lt;p&gt;とはいえ、Viewsが状態を絶対持ってはいけないというわけではなくて、Component内で完結する「表示に関わる状態」を持つことは可能です。Reactで実装する場合は、Class Componentとして実装します。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoListComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* 略 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これらのComponentをツリー状に組み合わせて(つまりReactの一般的な用法で)FluxのViewは構成されます。ツリーの上から下へとpropsのバケツリレーをしながら状態を渡して、画面に要素を表示していくわけです。&lt;/p&gt;

&lt;h4 id=&quot;storeとのパイプラインとなり状態を受け取るcontroller-views&quot;&gt;Storeとのパイプラインとなり状態を受け取るController-Views&lt;/h4&gt;

&lt;p&gt;ViewsだけではStoreの情報を受け取る仕組みがありません。これを担うのが、&lt;strong&gt;ツリーの最上部に配置される(つまりルートComponentとなる)Controller-Views&lt;/strong&gt;です。具体的な要件は2つです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Storeの変更を監視する&lt;/li&gt;
  &lt;li&gt;StoreからStateを取得し、Viewsに流し込むStateを形成する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Flux UtilsではController-Viewsを&lt;strong&gt;Container&lt;/strong&gt;と呼んでいて、ReactComponentをベースにContainerを生成する&lt;a href=&quot;https://github.com/facebook/flux/blob/master/src/container/FluxContainer.js&quot; target=&quot;_blank&quot;&gt;FluxContanier.js&lt;/a&gt;が用意されています。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStore&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./TodoStore'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HogeStore&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./HogeStore'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RootComponent&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 1. 変更を監視するStoreを列挙する&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getStores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HogeStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 2. Viewsに流し込むStateを生成する&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calculateState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;todoState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TodoStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hogeState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HogeStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 3. ViewsのpropsにStateを流し込む&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ChildComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; 
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 4. Container化する&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RootComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FluxContainerを使ったController-Viewsの実装例です。&lt;/p&gt;

&lt;p&gt;FluxContainerとFluxStoreとつなぎ込むため、2つのstaticメソッドが用意されています。&lt;code class=&quot;highlighter-rouge&quot;&gt;getStores&lt;/code&gt;で変更を監視するStoreを決め、Storeが変更されたら呼出される&lt;code class=&quot;highlighter-rouge&quot;&gt;calculateState&lt;/code&gt;でViewsに流し込むStateを形成します。このStateはComponentの&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;にセットされるので、あとは通常のReactComponentのようにRender関数で子Componentへ渡せばOKです。&lt;/p&gt;

&lt;p&gt;ちなみにFluxContainer.js内で&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;されている&lt;a href=&quot;https://github.com/facebook/flux/blob/master/src/container/FluxContainerSubscriptions.js&quot; target=&quot;_blank&quot;&gt;FluxContainerSubscriptions.js&lt;/a&gt;に「①Storeの変更を監視する」ロジックがまとまっていて参考になりました。&lt;/p&gt;

&lt;h4 id=&quot;viewのまとめ&quot;&gt;Viewのまとめ&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Fluxの「View」には2つの登場人物がいる&lt;/li&gt;
  &lt;li&gt;状態を持たないViews
    &lt;ul&gt;
      &lt;li&gt;原則&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;を持たないReactComponent&lt;/li&gt;
      &lt;li&gt;Functinal Componentで実装することが推奨されている&lt;/li&gt;
      &lt;li&gt;表示に関する状態を持つ場合はClass Componentで実装する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Storeとのパイプラインとなり状態を受け取るController-Views
    &lt;ul&gt;
      &lt;li&gt;要件①「Storeの変更を監視する」&lt;/li&gt;
      &lt;li&gt;要件②「StoreからStateを取得し、Viewsに流し込むStateを形成する」&lt;/li&gt;
      &lt;li&gt;Flux UtilsではController-Viewsを「Container」と呼ぶ&lt;/li&gt;
      &lt;li&gt;FluxContainer.jsを利用してController-Viewsを実装できる
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getStores&lt;/code&gt;で監視するStoreを決める&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;calculateState&lt;/code&gt;で流し込むStateを形成する&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;私がfluxを採用する理由&quot;&gt;私がFluxを採用する理由&lt;/h3&gt;

&lt;p&gt;Fluxを利用することで得られた一番のメリットは「チーム開発において破綻しにくいこと」でした。&lt;/p&gt;

&lt;p&gt;複数人で開発しているとアプリケーションの成長スピードが早く、コード量はどんどん増えていきます。時期が過ぎれば「特定の機能を一新する」なんて場面も出てきたりします。そのような場面でも影響範囲が最小限に抑えられ、ベースの設計が破綻することなく対応し続けられたと感じています。&lt;/p&gt;

&lt;p&gt;Fluxは現代のWebアプリケーションでよくある&lt;strong&gt;複雑なUIとデータ構造を持つアプリケーション&lt;/strong&gt;を想定して作られています。それ故、アプリケーションが肥大化しても各Moduleの責務が分離されていて、互いに疎結合で、一部の修正が他に影響せず、堅牢なアプリケーションを維持することが(比較的)しやすくなるわけですね。&lt;/p&gt;

&lt;p&gt;また、誰が実装しても大きなバラツキが生じにくかったという点でも、破綻しにくさが感じられました。「状態をどこで管理するべきか」「ビジネスロジックをどこに書くべきか」といったような実装の差(もしくは迷い)は、MVWで実装してたときに比べ少なかったように感じます。&lt;br /&gt;
MVWのほうがドメイン層やアプリケーション層の柔軟さ・解釈の広さ等があるからかもしれません。&lt;/p&gt;

&lt;p&gt;まとめると、Fluxの破綻しにくさとは、①明確に責務が分離された設計思想であること、②どこに何を実装するかという迷いや個人差が少なくなること、にあると感じています。もちろんFluxのメリット・デメリットの体感には個人差がありますが、これが私がFluxを採用する理由です(MVWも好きですし、もちろん時と場合によってそちらを採用することもあります)。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;FluxはWebアプリケーションの設計方法の選択肢として今後も利用されていくのだと思います。でもFluxは完璧ではありません。&lt;br /&gt;
Fluxの問題点や苦手分野については様々なところで議論されている通りで、基本的な用法では対応しきれない場面も出てくると思います。非同期処理、複雑なドメイン層の表現、アニメーション…、他にも課題はいろいろです(体感的には山盛りです)。が、それらに立ち向かうためにも、まずは基礎を100％理解していることが必要だと思います。&lt;/p&gt;

&lt;p&gt;そんなわけで今回はFlux再入門の話でした。気になる箇所や間違っている箇所がありましたら&lt;a href=&quot;https://twitter.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;までご連絡ください。&lt;/p&gt;</content><author><name></name></author><summary type="html">Reactの良さを活かしやすいFluxは、Webアプリケーションの設計手法としてずいぶん馴染みのあるものになったように感じます。私もFluxを取り入れた開発を2年近く経験し、知見も溜まり、使い慣れたような気持ちでいました。</summary></entry><entry><title type="html">DartでWebフロントの開発はできる？ エコシステムから見るDartの現状</title><link href="https://aloerina01.github.io/blog/2018-08-01-1" rel="alternate" type="text/html" title="DartでWebフロントの開発はできる？ エコシステムから見るDartの現状" /><published>2018-08-01T00:00:00+00:00</published><updated>2018-08-01T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-08-01-1">&lt;p&gt;JSに似て読み書きしやすいシンタックスに加え、型推論やジェネリクスなど魅力的な機能を備えたDart。JavaScriptに変換する仕組みがある点や、&lt;strong&gt;iOS、Android、Webの3大Clientで使える言語&lt;/strong&gt;を目指して設計されている点を踏まえると、DartでのWebフロントエンド開発も夢ではないように感じます。&lt;/p&gt;

&lt;p&gt;ただ、言語がよければすぐに使えるというわけではなく、使いやすさや開発環境も大切な要素の1つです。&lt;br /&gt;
昨今のWebフロントエンドはできることが増え、それに伴いエコシステムもとても進歩していて、複雑で大規模な開発でもスムーズに行えるようになってきている印象です(1番最初の環境構築が大変とよく言われますが、その大変さも徐々に緩和されてきていると思います)。&lt;/p&gt;

&lt;p&gt;そこで、&lt;strong&gt;DartでのWebフロントエンド開発がどの程度現実的なのか&lt;/strong&gt;を「エコシステム」という観点でまとめてみました。各々のツールの簡単な使い方も併記しています。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-dart-sdk&quot; id=&quot;markdown-toc-1-dart-sdk&quot;&gt;1. Dart SDK&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-パッケージ管理ツール-pub&quot; id=&quot;markdown-toc-2-パッケージ管理ツール-pub&quot;&gt;2. パッケージ管理ツール pub&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#pubspecyaml&quot; id=&quot;markdown-toc-pubspecyaml&quot;&gt;pubspec.yaml&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#den&quot; id=&quot;markdown-toc-den&quot;&gt;den&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pubの基本コマンド&quot; id=&quot;markdown-toc-pubの基本コマンド&quot;&gt;pubの基本コマンド&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#pub-get&quot; id=&quot;markdown-toc-pub-get&quot;&gt;pub get&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#pub-global-activate-&quot; id=&quot;markdown-toc-pub-global-activate-&quot;&gt;pub global activate &lt;package&gt;&lt;/package&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#pub-run&quot; id=&quot;markdown-toc-pub-run&quot;&gt;pub run&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#pub-upgrade&quot; id=&quot;markdown-toc-pub-upgrade&quot;&gt;pub upgrade&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#npmとの比較表&quot; id=&quot;markdown-toc-npmとの比較表&quot;&gt;npmとの比較表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pub用語&quot; id=&quot;markdown-toc-pub用語&quot;&gt;pub用語&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#application-package--library-package&quot; id=&quot;markdown-toc-application-package--library-package&quot;&gt;Application package / Library package&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#entrypoint&quot; id=&quot;markdown-toc-entrypoint&quot;&gt;Entrypoint&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-projectの雛形構築ツール-stagehand&quot; id=&quot;markdown-toc-3-projectの雛形構築ツール-stagehand&quot;&gt;3. projectの雛形構築ツール stagehand&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-コンパイラとビルド環境&quot; id=&quot;markdown-toc-4-コンパイラとビルド環境&quot;&gt;4. コンパイラとビルド環境&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#2つのコンパイラ-dart2js-と-ddc&quot; id=&quot;markdown-toc-2つのコンパイラ-dart2js-と-ddc&quot;&gt;2つのコンパイラ dart2js と DDC&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dart1xでのビルド環境&quot; id=&quot;markdown-toc-dart1xでのビルド環境&quot;&gt;Dart1.xでのビルド環境&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dart2xでのビルド環境&quot; id=&quot;markdown-toc-dart2xでのビルド環境&quot;&gt;Dart2.xでのビルド環境&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build_runner-を使ったビルドのカスタマイズ&quot; id=&quot;markdown-toc-build_runner-を使ったビルドのカスタマイズ&quot;&gt;build_runner を使ったビルドのカスタマイズ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sassのビルド&quot; id=&quot;markdown-toc-sassのビルド&quot;&gt;sassのビルド&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-感想&quot; id=&quot;markdown-toc-5-感想&quot;&gt;5. 感想&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-おまけ-公式ドキュメントの読み方&quot; id=&quot;markdown-toc-6-おまけ-公式ドキュメントの読み方&quot;&gt;6. おまけ 公式ドキュメントの読み方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-dart-sdk&quot;&gt;1. Dart SDK&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.dartlang.org/tools/sdk&quot; target=&quot;_blank&quot;&gt;Dart SDK&lt;/a&gt; はDartの開発に必要なライブラリ群とCLIツールです。執筆時点では安定版の&lt;code class=&quot;highlighter-rouge&quot;&gt;1.24.3&lt;/code&gt;と、プレリリース版の&lt;code class=&quot;highlighter-rouge&quot;&gt;2.0.0-dev.69.2&lt;/code&gt;が存在します。&lt;/p&gt;

&lt;div style=&quot;border-radius:10px;background-color:#eaf7ff;padding:12px 20px;margin:42px 0 48px;&quot;&gt;

&lt;p style=&quot;font-weight:600&quot;&gt;2018/08/08 追記&lt;/p&gt;

Dart2.0.0が正式にリリースされ安定版となりました。記事内でDart1.xへの言及がところどころありますが、これからDartを使い始める場合はDart2.xを利用するのが良いと思います。

&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew tap dart-lang/dart
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;dart         &lt;span class=&quot;c&quot;&gt;# 安定版をインストールする場合&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew sintall dart &lt;span class=&quot;nt&quot;&gt;--devel&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# プレリリース版をインストールする場合&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;なお、Web開発のためにDartをインストールする場合は、インストール時に&lt;code class=&quot;highlighter-rouge&quot;&gt;--with-dartium --with-content-shell&lt;/code&gt;オプションをつけるよう推奨されることがありますが、これらは&lt;strong&gt;Dart1.xでのみ利用する&lt;/strong&gt;ものです。&lt;strong&gt;Dartium&lt;/strong&gt;はDartVMを内蔵するブラウザで、&lt;strong&gt;content shell&lt;/strong&gt;は同じくDartVMを内蔵するテスト用のヘッドレスブラウザですが、Dart2.xでは開発環境が大幅に変わりこれらが不要となったためです(開発環境の詳細は後述します)。&lt;/p&gt;

&lt;h3 id=&quot;2-パッケージ管理ツール-pub&quot;&gt;2. パッケージ管理ツール pub&lt;/h3&gt;

&lt;p&gt;DartSDKをインストールすると併せて&lt;strong&gt;&lt;a href=&quot;https://www.dartlang.org/tools/pub&quot; target=&quot;_blank&quot;&gt;pub&lt;/a&gt;というパッケージ管理ツール&lt;/strong&gt;がインストールされます。パッケージの依存関係とバージョン情報を載せたファイルを用意してコマンドで一発インストール、というnpmでもお馴染みのものです。&lt;/p&gt;

&lt;h4 id=&quot;pubspecyaml&quot;&gt;pubspec.yaml&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;依存するパッケージ&lt;/strong&gt;と&lt;strong&gt;そのバージョン情報&lt;/strong&gt;などを記しておくファイルです。&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;のような役割をします。npmと使い方が似ているので、とっつきやすくてありがたいですね。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Sample&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.0.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Sample project&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Aloerina&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;=2.0.0-dev.68.0&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;3.0.0'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bootstrap_sass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^4.1.2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;dev_dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build_web_compilers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^0.4.0&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;=0.6.0&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;0.12.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;強いて言うなら、依存パッケージを追加するときにエディタで直接修正する必要があるのは少し面倒だと思いました。&lt;a href=&quot;https://pub.dartlang.org/&quot; target=&quot;_blank&quot;&gt;Dart Packages&lt;/a&gt;でインストールしたいパッケージを調べ&lt;code class=&quot;highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt;への記述方法を確認しコピペする…というのはやはり手間です。&lt;/p&gt;

&lt;h4 id=&quot;den&quot;&gt;den&lt;/h4&gt;
&lt;p&gt;そこで助かるツールが&lt;strong&gt;&lt;a href=&quot;https://github.com/seaneagan/den&quot; target=&quot;_blank&quot;&gt;den&lt;/a&gt;&lt;/strong&gt;です。&lt;code class=&quot;highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt;の初期化や依存関係の追記をしてくれるCLIツールです。&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -S &amp;lt;package名&amp;gt;&lt;/code&gt;に相当するツールですね。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pub global activate den   &lt;span class=&quot;c&quot;&gt;# denのインストール&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;den spec                  &lt;span class=&quot;c&quot;&gt;# pubspec.yamlの生成&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;den &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &amp;lt;package名&amp;gt;   &lt;span class=&quot;c&quot;&gt;# 依存関係の追加&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;pubの基本コマンド&quot;&gt;pubの基本コマンド&lt;/h4&gt;

&lt;h5 id=&quot;pub-get&quot;&gt;pub get&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pubspec.yaml&lt;/code&gt;に書かれている依存ライブラリを一括インストールしローカルにキャッシュします。同時に、初回であれば&lt;code class=&quot;highlighter-rouge&quot;&gt;pubspec.lock&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;.packages&lt;/code&gt;が作成されます。前者は名前の通りバージョンのロックファイルで、後者はローカルのどのディレクトリにキャッシュしたかを記すファイルです。ローカルキャッシュから再インストールする場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;--offline&lt;/code&gt;オプションを使います。&lt;/p&gt;

&lt;h5 id=&quot;pub-global-activate-&quot;&gt;pub global activate &lt;package&gt;&lt;/package&gt;&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g&lt;/code&gt;と同じです。パッケージをグローバルにインストールします。&lt;/p&gt;

&lt;h5 id=&quot;pub-run&quot;&gt;pub run&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pub get&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;pub global&lt;/code&gt;でインストールしたexecutable(CLIから実行可能な)packageを実行します。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pub run &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;package名]
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pub global run &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;package名]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;pub-upgrade&quot;&gt;pub upgrade&lt;/h5&gt;

&lt;p&gt;依存パッケージのバージョンを最新にあげ、&lt;code class=&quot;highlighter-rouge&quot;&gt;pubspec.lock&lt;/code&gt;の内容を更新します。&lt;/p&gt;

&lt;h4 id=&quot;npmとの比較表&quot;&gt;npmとの比較表&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;npm&lt;/th&gt;
      &lt;th&gt;pub (den)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;npm init&lt;/td&gt;
      &lt;td&gt;den spec&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;npm install&lt;/td&gt;
      &lt;td&gt;pub get&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;npm run [npm_script名]&lt;/td&gt;
      &lt;td&gt;pub run [package名]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;npm install -g [package名]&lt;/td&gt;
      &lt;td&gt;pub global activate [package名]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;npm install -S [package名]&lt;/td&gt;
      &lt;td&gt;den install [package名]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;npm install -D [package名]&lt;/td&gt;
      &lt;td&gt;den install –dev [package名]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;npm upgrade&lt;/td&gt;
      &lt;td&gt;pub upgrade&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;npm ls&lt;/td&gt;
      &lt;td&gt;pub deps&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;pub用語&quot;&gt;pub用語&lt;/h4&gt;

&lt;p&gt;npmと同じ感覚でドキュメントを読み進めていくと齟齬が出る(出た)用語をピックアップしておきます。詳細は&lt;a href=&quot;https://www.dartlang.org/tools/pub/glossary&quot; target=&quot;_blank&quot;&gt;公式の用語集&lt;/a&gt;からどうぞ。&lt;/p&gt;

&lt;h5 id=&quot;application-package--library-package&quot;&gt;Application package / Library package&lt;/h5&gt;

&lt;p&gt;Application packageとLibrary packageは対義語です。Application packageとはコマンドラインやブラウザから直接呼び出させるpackageを指し、Library packageはApplication packageからライブラリとして利用されるpackageです。&lt;/p&gt;

&lt;h5 id=&quot;entrypoint&quot;&gt;Entrypoint&lt;/h5&gt;

&lt;p&gt;意味合い的にはJavaScriptを実装するときと同じなのですが、Dartにおいては一般的に&lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;が実装されている&lt;code class=&quot;highlighter-rouge&quot;&gt;.dart&lt;/code&gt;ファイルがエントリーポイントとなります。&lt;/p&gt;

&lt;h3 id=&quot;3-projectの雛形構築ツール-stagehand&quot;&gt;3. projectの雛形構築ツール stagehand&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/dart-lang/stagehand&quot; target=&quot;_blank&quot;&gt;stagehand&lt;/a&gt;&lt;/strong&gt;というツールを利用してDartのプロジェクトの雛形を作ることができます。Reactでいうcreate-react-appやVueでいうvue-cliのようなものです。グローバルにインストールして雛形を作りたいディレクトリで実行します。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pub global activate stagehand
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;first_project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;first_project
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;stagehand &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;template名]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Templateは現時点で6種類ありますが、Webアプリ開発用は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;必要最低限のみ用意された&lt;strong&gt;&lt;a href=&quot;https://github.com/dart-lang/stagehand/tree/master/templates/web-simple&quot; target=&quot;_blank&quot;&gt;web-simple&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;AndularDartを組み込むための&lt;strong&gt;&lt;a href=&quot;https://github.com/dart-lang/stagehand/tree/master/templates/web-angular&quot; target=&quot;_blank&quot;&gt;web-angular&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つです。web-simpleでプロジェクトを作ってみたところ、HelloWorld的なHTML/CSS/Dartファイルとpubspec.yamlなどが用意されました。雛形が用意されたあとは依存するpackageをインストールしてローカルサーバを立ち上げればブラウザで確認できます。このあたりも&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;からの&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;と同じ流れなので理解しやすいしお手軽でした。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pub get       &lt;span class=&quot;c&quot;&gt;# 依存packageのインストール&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;webdev serve  &lt;span class=&quot;c&quot;&gt;# ローカルサーバの起動&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;サーバの起動に使っているwebdevについては後述します。&lt;/p&gt;

&lt;h3 id=&quot;4-コンパイラとビルド環境&quot;&gt;4. コンパイラとビルド環境&lt;/h3&gt;

&lt;p&gt;Dartで作られたWebアプリを実行するには、&lt;strong&gt;DartVMが搭載されたブラウザで直接実行する&lt;/strong&gt;か、&lt;strong&gt;JavaScriptにコンパイルしてから標準ブラウザで実行する&lt;/strong&gt;か、の2つの方法があります。開発やテストといった過程では前者でも十分ですが、リリースするには後者の方法をとる必要があるため、用途に応じてコンパイラや実行環境を使い分ける必要があります。&lt;/p&gt;

&lt;p&gt;Dartのコンパイラにはどんなものがあるのかと、それぞれのDartバージョンでどのようにそれらを使えばよいかをまとめておきます。&lt;/p&gt;

&lt;h4 id=&quot;2つのコンパイラ-dart2js-と-ddc&quot;&gt;2つのコンパイラ dart2js と DDC&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://webdev.dartlang.org/tools/dart2js&quot; target=&quot;_blank&quot;&gt;Dart-to-JavaScript Compiler(dart2js)&lt;/a&gt;&lt;/strong&gt;はDart1.xから存在するコンパイラです。&lt;strong&gt;コードの最適化&lt;/strong&gt;をしたり&lt;strong&gt;minify&lt;/strong&gt;などのオプションがあったりと本番用のコンパイルができるだけでなく、問題のある箇所をワーニング表示したりと開発用に利用することもできます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://webdev.dartlang.org/tools/dartdevc&quot; target=&quot;_blank&quot;&gt;Dart Development Compiler(DDC)&lt;/a&gt;&lt;/strong&gt;はDart2.xで登場したコンパイラです。その名の通り開発用に特化しており、&lt;strong&gt;差分ビルド&lt;/strong&gt;や&lt;strong&gt;ホットリロード&lt;/strong&gt;に対応しています。&lt;/p&gt;

&lt;h4 id=&quot;dart1xでのビルド環境&quot;&gt;Dart1.xでのビルド環境&lt;/h4&gt;

&lt;p&gt;dart1.xでは、開発時はDartVMを搭載した&lt;strong&gt;Dartium&lt;/strong&gt;や&lt;strong&gt;content shell&lt;/strong&gt;を利用し、リリース時にはdart2jsでコンパイルしてjsを生成します。それぞれpubコマンドを利用して行えます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pub serve&lt;/code&gt; … ローカルサーバを起動します。Dariumで確認することができます。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pub build&lt;/code&gt; … dart2jsを実行します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dart2xでのビルド環境&quot;&gt;Dart2.xでのビルド環境&lt;/h4&gt;

&lt;p&gt;Dart2.xではDartVMを一切使わずに開発できます。そのためDartiumもcontent shellも必要なくなります。&lt;br /&gt;
またDart2.xではbuildやserveのコマンドを、pubの代わりに&lt;strong&gt;&lt;a href=&quot;https://webdev.dartlang.org/tools/webdev&quot; target=&quot;_blank&quot;&gt;webdev&lt;/a&gt;&lt;/strong&gt;というCLIツールを使って行います。webdevはpubからインストールして使います。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pub global activate webdev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コマンド名はpubでビルドするときと同じなのでDart1.xから2.xへマイグレーションした場合も気楽そうです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webdev serve&lt;/code&gt; … DDCを実行しローカルサーバを起動します。標準ブラウザで確認することができます。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webdev build&lt;/code&gt; … dart2jsを実行します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;まとめ&quot;&gt;まとめ&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th&gt;for release&lt;/th&gt;
      &lt;th&gt;for development&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Dart1.x&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pub build&lt;/code&gt;&lt;br /&gt; dart2jsでjsを生成&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pub serve&lt;/code&gt;&lt;br /&gt; Dartium, content shell などのDartVM上で直接実行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Dart2.x&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webdev build&lt;/code&gt;&lt;br /&gt; dart2jsでjsを生成&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webdev serve&lt;/code&gt;&lt;br /&gt; DDCでコンパイルしたものを標準ブラウザで実行&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;build_runner-を使ったビルドのカスタマイズ&quot;&gt;build_runner を使ったビルドのカスタマイズ&lt;/h4&gt;

&lt;p&gt;webdevを使えば特別な設定なくすぐにビルドを行えますが、&lt;strong&gt;&lt;a href=&quot;https://webdev.dartlang.org/tools/build_runner&quot; target=&quot;_blank&quot;&gt;build_runner&lt;/a&gt;&lt;/strong&gt;を使ってビルドをカスタマイズすることも可能です。簡単に言うとタスクランナーのようなものです。&lt;/p&gt;

&lt;p&gt;まずはインストール方法から。pubspec.yamlにdependencyを追記して&lt;code class=&quot;highlighter-rouge&quot;&gt;pub get&lt;/code&gt;します。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;dev_dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build_runner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^0.9.0&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build_web_compilers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^0.4.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次にコンフィグファイルを用意します。build_runnnerはデフォルトで&lt;code class=&quot;highlighter-rouge&quot;&gt;build.yaml&lt;/code&gt;という名前のファイルを読み込んで実行しますが、&lt;code class=&quot;highlighter-rouge&quot;&gt;build.hoge.yaml&lt;/code&gt;と命名すればオプションをつけて指定することができます。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pub run build_runner build                &lt;span class=&quot;c&quot;&gt;# build.yamlを読み込む&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pub run build_runner build &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; hoge  &lt;span class=&quot;c&quot;&gt;# build.hoge.yamlを読み込む&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;webpackの設定ファイルを本番用と開発用で分ける時に&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.prod.js&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.dev.js&lt;/code&gt;とするケースがありますが、同じような感覚で使えそうです。&lt;/p&gt;

&lt;p&gt;あとはコンフィグファイルの中身次第でビルドをカスタマイズできますが、詳しい&lt;a href=&quot;https://github.com/dart-lang/build/tree/master/docs&quot; target=&quot;_blank&quot;&gt;設定の仕方&lt;/a&gt;については情報が多いのでいずれ別記事にて。&lt;/p&gt;

&lt;h4 id=&quot;sassのビルド&quot;&gt;sassのビルド&lt;/h4&gt;

&lt;p&gt;DDCを使えばホットリロードに対応できると書きましたが、sassも同様にあるべきです。これは公式のツールでは(原時点では)対応できないのでライブラリを利用します。&lt;strong&gt;&lt;a href=&quot;https://pub.dartlang.org/packages/sass_builder&quot; target=&quot;_blank&quot;&gt;sass_builder&lt;/a&gt;&lt;/strong&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;pub get&lt;/code&gt;して、build_runnerで実行するよう設定します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pubspec.yaml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;dev_dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sass_builder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^2.0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;build.yaml&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;$default&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;builders&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;sass_builder&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;outputStyle&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;compressed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;webdev serve&lt;/code&gt;をすればsassのビルドも実行されます。&lt;/p&gt;

&lt;p&gt;別の方法として、sassは今まで通りnode-sassなどを使うというのもアリだと思います。それなら既存のビルド環境を引き継いで使えますし、無理に全部Dartに寄せなくてもいいかもしれませんね。&lt;/p&gt;

&lt;h3 id=&quot;5-感想&quot;&gt;5. 感想&lt;/h3&gt;

&lt;p&gt;一通り触りながら簡単な実装をしてみた感想は「&lt;strong&gt;それなりに揃っている&lt;/strong&gt;」でした。npmなどと比較してみても必要なものは最低限あるし、簡単に利用するための仕組みも用意されています。本気でWebクライアント開発言語になろうとしていることを感じられました。&lt;/p&gt;

&lt;p&gt;また、DartはWebだけでなくネイティブアプリの開発も視野に入れていて、こちらも入門しやすい仕組みが用意されていました。&lt;a href=&quot;/blog/2018-07-01-1&quot;&gt;WebフロントエンジニアがDart × Flutterに入門した話&lt;/a&gt;に詳細をまとめてありますので、よければ併せてどうぞ。&lt;/p&gt;

&lt;p&gt;一方で「productionレベルで利用できるか」については即答できなさそうです。productionで利用するには信頼のおけるライブラリや大規模アプリに向くフレームワークなども必要でしょうし、dart2jsの最適化の品質についても検証の余地があると思います。そういったことも今後検証してみようと思いますので、一緒にDart × Webフロントエンドを盛り上げていきたい！という方はぜひ&lt;a href=&quot;https://twitter.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;までご感想・ご意見をお願いします。&lt;/p&gt;

&lt;h3 id=&quot;6-おまけ-公式ドキュメントの読み方&quot;&gt;6. おまけ 公式ドキュメントの読み方&lt;/h3&gt;

&lt;p&gt;Dartはドキュメントが豊富なのがいいところですが、体系的に理解するには何から読めばいいのか…と少し悩みました。ので、最後に私が読んだドキュメントをまとめて締めくくります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web開発用のツールの一覧を眺める &lt;a href=&quot;https://webdev.dartlang.org/tools&quot; target=&quot;_blank&quot;&gt;Dart Tools for the Web&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;jsへのコンパイルの基本を知る &lt;a href=&quot;https://webdev.dartlang.org/tools/dart2js&quot; target=&quot;_blank&quot;&gt;dart2js&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;最新の開発用コンパイラをdart2jsと比較する &lt;a href=&quot;https://webdev.dartlang.org/tools/dartdevc&quot; target=&quot;_blank&quot;&gt;dartdevc&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;ビルドツールを知る &lt;a href=&quot;https://webdev.dartlang.org/tools/webdev&quot; target=&quot;_blank&quot;&gt;webdev&lt;/a&gt;, &lt;a href=&quot;https://webdev.dartlang.org/tools/build_runner&quot; target=&quot;_blank&quot;&gt;build_runner&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dartの1.xと2.xを比較する &lt;a href=&quot;https://webdev.dartlang.org/dart-2&quot; target=&quot;_blank&quot;&gt;Dart 2 Migration Guide for Web Apps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Get Startedする &lt;a href=&quot;https://webdev.dartlang.org/guides/get-started&quot; target=&quot;_blank&quot;&gt;Get Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;pubのパッケージ管理を理解する &lt;a href=&quot;https://www.dartlang.org/tools/pub&quot; target=&quot;_blank&quot;&gt;Pub Package Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">JSに似て読み書きしやすいシンタックスに加え、型推論やジェネリクスなど魅力的な機能を備えたDart。JavaScriptに変換する仕組みがある点や、iOS、Android、Webの3大Clientで使える言語を目指して設計されている点を踏まえると、DartでのWebフロントエンド開発も夢ではないように感じます。</summary></entry><entry><title type="html">WebフロントエンジニアがDart × Flutterに入門した話</title><link href="https://aloerina01.github.io/blog/2018-07-01-1" rel="alternate" type="text/html" title="WebフロントエンジニアがDart × Flutterに入門した話" /><published>2018-07-01T00:00:00+00:00</published><updated>2018-07-01T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-07-01-1">&lt;p&gt;Flutterとは、Dartという言語でモバイルアプリを開発するためのSDKです。iOSアプリとAndroidアプリを同じコードベースで実装できるとのことで、普段はWebアプリを開発している私にもとっつきやすそうなので入門してみました。&lt;/p&gt;

&lt;p&gt;一通り入門が済んだので、どうやって入門したか、入門してみてどうだったか、Webエンジニアの視点でFlutter・Dartに期待することなどをまとめました。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#基礎知識&quot; id=&quot;markdown-toc-基礎知識&quot;&gt;基礎知識&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dartとは&quot; id=&quot;markdown-toc-dartとは&quot;&gt;Dartとは&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#flutterとは&quot; id=&quot;markdown-toc-flutterとは&quot;&gt;Flutterとは&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#入門の仕方&quot; id=&quot;markdown-toc-入門の仕方&quot;&gt;入門の仕方&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#概要&quot; id=&quot;markdown-toc-概要&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ハンズオン&quot; id=&quot;markdown-toc-ハンズオン&quot;&gt;ハンズオン&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#dart-sdkのインストール&quot; id=&quot;markdown-toc-dart-sdkのインストール&quot;&gt;Dart SDKのインストール&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#flutterのインストール&quot; id=&quot;markdown-toc-flutterのインストール&quot;&gt;Flutterのインストール&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#vscodeプラグインのインストール&quot; id=&quot;markdown-toc-vscodeプラグインのインストール&quot;&gt;VSCodeプラグインのインストール&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#android端末検証端末の接続そしてdeploy&quot; id=&quot;markdown-toc-android端末検証端末の接続そしてdeploy&quot;&gt;Android端末(検証端末)の接続、そしてDeploy&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#入門してみてどうだったか&quot; id=&quot;markdown-toc-入門してみてどうだったか&quot;&gt;入門してみてどうだったか&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dart言語について&quot; id=&quot;markdown-toc-dart言語について&quot;&gt;Dart言語について&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#開発環境について&quot; id=&quot;markdown-toc-開発環境について&quot;&gt;開発環境について&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#flutterについて&quot; id=&quot;markdown-toc-flutterについて&quot;&gt;Flutterについて&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おすすめの読み物&quot; id=&quot;markdown-toc-おすすめの読み物&quot;&gt;おすすめの読み物&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;基礎知識&quot;&gt;基礎知識&lt;/h3&gt;

&lt;h4 id=&quot;dartとは&quot;&gt;&lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt;とは&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Googleが開発している言語&lt;/li&gt;
  &lt;li&gt;JavaやJavaScriptに似たシンタックス&lt;/li&gt;
  &lt;li&gt;型を付けても付けなくても書ける&lt;/li&gt;
  &lt;li&gt;DartVM上で動く&lt;/li&gt;
  &lt;li&gt;JavaScriptにコンパイルできる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dartの文法については&lt;a href=&quot;https://www.dartlang.org/guides/language/language-tour&quot;&gt;Language Tour&lt;/a&gt;をさらっと眺めるだけでも結構把握できると思います。普段JavaやJavaScriptを使っている人ならすぐに書けそうなワクワク感を味わえるかも(私がそうでした)。&lt;/p&gt;

&lt;h4 id=&quot;flutterとは&quot;&gt;&lt;a href=&quot;https://flutter.io/&quot;&gt;Flutter&lt;/a&gt;とは&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;iOSとAndroidアプリを開発するためのSDK&lt;/li&gt;
  &lt;li&gt;マテリアルデザインに則ったUIパーツを標準提供&lt;/li&gt;
  &lt;li&gt;hot reloadでサクサクアプリ開発できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React Nativeと比較してみて感じたことは&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;FlutterにはOSのガイドラインに則ったWidgetが&lt;strong&gt;公式に&lt;/strong&gt;用意されている&lt;/li&gt;
  &lt;li&gt;Widgetでの画面構築はHTML＆CSSに慣れきった人にはツライ(詳細後述します)&lt;/li&gt;
  &lt;li&gt;どちらも設計が&lt;strong&gt;ステートレスView＆単一データフロー&lt;/strong&gt;になるという点は似ている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんな感じです。どんなWidgetがあるかを把握し使いこなせれば高速に開発できる反面、慣れるまで(暗記するまで)がけっこうしんどい…という所感です。&lt;/p&gt;

&lt;h3 id=&quot;入門の仕方&quot;&gt;入門の仕方&lt;/h3&gt;

&lt;h4 id=&quot;概要&quot;&gt;概要&lt;/h4&gt;
&lt;p&gt;公式ドキュメントが丁寧に作られているので、それに沿っていくだけで開発環境の準備ができます。私は&lt;strong&gt;Mac × Visual Studio Code&lt;/strong&gt;で開発したかったので、ざっくり以下のことをしました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Dart SDK&lt;/strong&gt;のインストール(参考：&lt;a href=&quot;https://www.dartlang.org/tools/sdk&quot;&gt;Install Dart&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Flutter&lt;/strong&gt;のインストール(参考：&lt;a href=&quot;https://flutter.io/get-started/install/&quot;&gt;Get Started: Install - Flutter&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;開発したいアプリのOSに応じて&lt;strong&gt;Xcode, Android Studio&lt;/strong&gt;のインストール&lt;/li&gt;
  &lt;li&gt;VSCode用の&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code&quot;&gt;Dartプラグイン&lt;/a&gt;、&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=franzsilva.fs-flutter-snippets&quot;&gt;Flutterプラグイン&lt;/a&gt;のインストール&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Flutterの公式ドキュメントにはエディタの設定の方法まで書いてあり、VSCode以外にもAndroid Studioでの設定方法が載っています。Androidアプリ開発者、Webアプリ開発者の両方にスムーズに使ってもらうことを想定しているのでしょうか(ありがたいですね)。&lt;/p&gt;

&lt;h4 id=&quot;ハンズオン&quot;&gt;ハンズオン&lt;/h4&gt;

&lt;h5 id=&quot;dart-sdkのインストール&quot;&gt;Dart SDKのインストール&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap dart-lang/dart
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;dart &lt;span class=&quot;nt&quot;&gt;--with-content-shell&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--with-dartium&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;flutterのインストール&quot;&gt;Flutterのインストール&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://flutter.io/get-started/install/&quot;&gt;Get Started: Install - Flutter&lt;/a&gt;からzipを落とし展開しPATHを通します。そのあとは&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter doctor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このコマンドを叩くと、Flutterの開発に必要なものが揃っているかどうか、揃えるために次に何をすればいいのかを教えてくれます。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Doctor summary &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;to see all details, run flutter doctor &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;- &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x] &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Flutter &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Channel beta, v0.4.4, on Mac OS X 10.12.6 16G1212, locale ja-JP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✗] Android toolchain - develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Android devices
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;✗ Unable to locate Android SDK.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;Install Android Studio from: https://developer.android.com/studio/index.html&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;On first launch it will assist you &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;installing the Android SDK components.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;or visit https://flutter.io/setup/#android-setup &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;detailed instructions&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;If Android SDK has been installed to a custom location, &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ANDROID_HOME&lt;/span&gt; to that location.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[!]&lt;/span&gt; iOS toolchain - develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;iOS devices
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;✗ Xcode installation is incomplete&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; a full installation is necessary &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;iOS development.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;Download at: https://developer.apple.com/xcode/download/&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;Or &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;Xcode via the App Store.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;Once installed, run:&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;xcode-select &lt;span class=&quot;nt&quot;&gt;--switch&lt;/span&gt; /Applications/Xcode.app/Contents/Developer&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;✗ libimobiledevice and ideviceinstaller are not installed. To &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;, run:&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--HEAD&lt;/span&gt; libimobiledevice&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ideviceinstaller&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;✗ ios-deploy not installed. To &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ios-deploy&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;✗ CocoaPods not installed.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;CocoaPods is used to retrieve the iOS platform side&lt;span class=&quot;s1&quot;&gt;'s plugin code that responds to your plugin usage on the Dart side.**
**Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.**
**For more info, see https://flutter.io/platform-plugins**
**To install:**
**brew install cocoapods**
**pod setup**
[✗] Android Studio (not installed)
[!] VS Code (version 1.23.1)
[!] Connected devices
    ! No devices available

! Doctor found issues in 5 categories.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Android Studioがインストールされてないよ！等、教えてくれていますね)&lt;/p&gt;

&lt;p&gt;このコマンドが大変ありがたく、その後もつまずいたらとりあえず&lt;code class=&quot;highlighter-rouge&quot;&gt;flutter doctor&lt;/code&gt;を叩くと何かしら前に進みました。開発環境の構築でハマるのは入門あるあるだと思うので、Flutterの心遣いに感謝するばかりです。&lt;/p&gt;

&lt;h5 id=&quot;vscodeプラグインのインストール&quot;&gt;VSCodeプラグインのインストール&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code&quot;&gt;Dartプラグイン&lt;/a&gt;、&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=franzsilva.fs-flutter-snippets&quot;&gt;Flutterプラグイン&lt;/a&gt;をインストールしたものの、VSCodeのコマンドパレットから&lt;code class=&quot;highlighter-rouge&quot;&gt;Flutter: New Project&lt;/code&gt;をしようとしたらFlutter SDKがないと怒られました。設定にFlutterの所在を追記することで解決。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-plain&quot;&gt;&quot;dart.flutterSdkPath&quot;: &quot;/Users/aloerina/flutter&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみにNew ProjectでつくられたディレクトリにはHelloWorld的なコードが最初から入っていました。&lt;/p&gt;

&lt;h5 id=&quot;android端末検証端末の接続そしてdeploy&quot;&gt;Android端末(検証端末)の接続、そしてDeploy&lt;/h5&gt;

&lt;p&gt;今回はAndroidアプリで検証をします。&lt;br /&gt;
USBデバッグを許可した実機を接続するか、Android Studioのエミュレータを起動するかが必要なので後者を選択しました。Android Studioの公式の&lt;a href=&quot;https://developer.android.com/studio/run/managing-avds&quot;&gt;仮想端末の作成と管理&lt;/a&gt;に書いてある通りにやるとスムーズでした。&lt;/p&gt;

&lt;p&gt;エミュレータを起動したらVSCodeのステータスバー(右下)に起動したエミュレータ名が書いてあればOKです。書いてない場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;flutter emulators&lt;/code&gt;を叩いて表示に従えばOKです。&lt;/p&gt;

&lt;p&gt;検証端末の準備ができたらflutterを起動します。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでDeployが済んでエミュレータにアプリが表示されます🎉&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;🔥  To hot reload your app on the fly, press “r”. To restart the app entirely, press “R”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;hot reloadの準備できてるよ！といって待機してくれていますね。これで開発環境の構築は完了です。ここからはチュートリアルを試したり写経したりして楽しみました。&lt;/p&gt;

&lt;h3 id=&quot;入門してみてどうだったか&quot;&gt;入門してみてどうだったか&lt;/h3&gt;

&lt;h4 id=&quot;dart言語について&quot;&gt;Dart言語について&lt;/h4&gt;

&lt;p&gt;新しい言語を書いているとは思えないくらい、学習コストほぼゼロで読み書きできることに感動します。hot reloadと相まって新しいことを試してすぐに画面に反映されるスピード感・ワクワク感はたまりません。&lt;/p&gt;

&lt;p&gt;すぐ書ける楽しみだけでなく、JavaScriptのような手軽さや、静的型付けやジェネリクスなどを取り揃えた安心感などにも好感でした。公式の&lt;a href=&quot;https://www.dartlang.org/guides/language/language-tour#important-concepts&quot;&gt;Important Concepts&lt;/a&gt;にこれらに関係するDartのコンセプトがまとまっていたので、ざっくり意訳してみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;変数に代入できる値はすべて(数値、関数、null、など何でも)&lt;em&gt;Object&lt;/em&gt;であり、すべての&lt;em&gt;Object&lt;/em&gt;は&lt;em&gt;Class&lt;/em&gt;のインスタンスです。すべての&lt;em&gt;Object&lt;/em&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;クラスを継承します。&lt;/li&gt;
  &lt;li&gt;Dartは強く型付けされていますが、Dartは型を推測できるため型定義は必須ではありません。型が不明であることを明示的に宣言したいときは、特殊な型である&lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic&lt;/code&gt;を使用することができます。&lt;/li&gt;
  &lt;li&gt;Dartは&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;dynamic&amp;gt;&lt;/code&gt;などのジェネリクスに対応しています。&lt;/li&gt;
  &lt;li&gt;Dartは&lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;などのトップレベル関数、staticメソッドやインスタンスメソッド、ローカル関数などを定義できます。&lt;/li&gt;
  &lt;li&gt;Javaと違い&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;などのスコープ定義はありません。代わりに変数名を&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;から始めることでprivateと認識します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;変数のスコープを&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;で判別する点は好みではないのですが(命名は書く側の好きにさせて欲しい)、それ以外はいいと思いました。Interfaceとジェネリクスがあると手堅く設計できますし、DIなども可能になりますよね。&lt;code class=&quot;highlighter-rouge&quot;&gt;async/await&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt;などで&lt;a href=&quot;https://www.dartlang.org/guides/language/language-tour#asynchrony-support&quot;&gt;非同期処理&lt;/a&gt;を自然に書けるのもステキです。&lt;/p&gt;

&lt;p&gt;言語機能を更に深掘りするには&lt;a href=&quot;https://www.dartlang.org/guides/language/effective-dart&quot;&gt;Effective Dart&lt;/a&gt;がおすすめです。Dartはとにかく公式ドキュメントの充実っぷりがすごいですね。&lt;/p&gt;

&lt;p&gt;魅力的な言語だと思うので今後も継続的に発展していってほしいと思います。いずれAltJSのひとつとなる日が来たりするのでしょうか。&lt;/p&gt;

&lt;h4 id=&quot;開発環境について&quot;&gt;開発環境について&lt;/h4&gt;

&lt;p&gt;べた褒め続きで少々気まずさもありますが、私が開発環境に必要だと思う&lt;strong&gt;セットアップ・メンテの手軽さ&lt;/strong&gt;と&lt;strong&gt;開発速度&lt;/strong&gt;が保たれていてよかったです。特に上述した&lt;code class=&quot;highlighter-rouge&quot;&gt;flutter doctor&lt;/code&gt;コマンドには幾度となく助けられました。問題にぶち当たってもググらず解決できるってすごいですよね。&lt;/p&gt;

&lt;p&gt;hot reloadは普段Webフロントを開発している自分には必須の機能でした。アプリはビルドやら何やらに時間のかかるイメージだったので(あくまでイメージです)、アプリ開発への敷居が下がったように感じました。&lt;/p&gt;

&lt;p&gt;また、些細なことかもしれませんがVSCodeのプラグインが&lt;strong&gt;閉じカッコの位置をコメントアウトのように表示してくれる&lt;/strong&gt;のが便利でした(コメントアウト「のように」表示しているだけで実際にコメントが追記されるわけではありません)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-07-01-1-editor.png&quot; alt=&quot;editor sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この機能に初めて出会って感動したのですが、これって一般的なんでしょうか？&lt;/p&gt;

&lt;h4 id=&quot;flutterについて&quot;&gt;Flutterについて&lt;/h4&gt;

&lt;p&gt;OS推奨のUIがWidgetとして網羅されているため誰でも一定レベルのデザインのアプリを作れるのはすごいと思いますが、いかんせんWidgetの使い方にクセがありました。&lt;/p&gt;

&lt;p&gt;画面の情報すべてをWidgetで表現するため、Layoutに関わる&lt;a href=&quot;https://docs.flutter.io/flutter/widgets/Padding-class.html&quot;&gt;Padding&lt;/a&gt;や&lt;a href=&quot;https://docs.flutter.io/flutter/widgets/Align-class.html&quot;&gt;Alignment&lt;/a&gt;などもWidgetとして組み込まなければなりません。たとえばカードリスト画面を作る場合、以下のようにWidgetを入れ子にする必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-plain&quot;&gt;Scaffold Widget (画面全体を構成する) 
  &amp;gt; ListView Widget (Scaffoldの中にListViewを配置する)
    &amp;gt; Padding Widget (ListView内の要素にPaddingをつける)
      &amp;gt; Card Widget (Paddingのとられた空間にカードを配置する)
        &amp;gt; Column Widget (カード内に復数の要素を縦積みする)
          &amp;gt; Padding Widget (縦積みする要素にPaddingをつける)
            &amp;gt; Text Widget (タイトルなどの文字列を表示する)
              &amp;gt; TextAlign Widget (文字列のAlignmentを指定する)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表示要素を表す&lt;code class=&quot;highlighter-rouge&quot;&gt;ListView&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Card&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt;と並列関係で&lt;code class=&quot;highlighter-rouge&quot;&gt;Padding&lt;/code&gt;などが存在するわけです。ものによってもっと簡単に記述できる仕組みもあるのですが、HTMLで要素を構成してCSSで装飾する手法に慣れている人にはかなり抵抗があるのではないでしょうか…。&lt;/p&gt;

&lt;p&gt;ただ、アプリのビルドなど詳しく知らない部分を棚上げしたまま開発できる点はよかったです。とりあえず動くものを作ってみてリリースするときに改めてキャッチアップする、とすると開発意欲を落とさず完成にこぎつけそうです。&lt;/p&gt;

&lt;h3 id=&quot;おすすめの読み物&quot;&gt;おすすめの読み物&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DartとFlutterの魅力を知るには &lt;a href=&quot;https://adwd.github.io/dart-flutter-slide/#/&quot;&gt;DART/FLUTTER 入門 + 最強の勤怠アプリを作った話&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Flutterで何が作れるかを把握するには &lt;a href=&quot;https://flutter.io/showcase/&quot;&gt;Showcase - Flutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;とりあえずFlutterで動くサンプルを作るなら &lt;a href=&quot;https://codelabs.developers.google.com/codelabs/flutter/index.html?index=..%2F..%2Findex#0&quot;&gt;Building Beautiful UIs with Flutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Firebaseと組み合せる方法を理解するには &lt;a href=&quot;https://codelabs.developers.google.com/codelabs/flutter-firebase/index.html?index=..%2F..%2Findex#0&quot;&gt;Firebase for Flutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Widgetでレイアウトする方法を理解するには &lt;a href=&quot;https://flutter.io/tutorials/layout/&quot;&gt;Building Layouts in Flutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Stateの概念を理解するなら &lt;a href=&quot;https://flutter.io/tutorials/interactive/&quot;&gt;Adding Interactivity to Your Flutter App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Flutterで作られたアプリのコードリーディングには &lt;a href=&quot;https://github.com/konifar/droidkaigi2018-flutter&quot;&gt;konifar/droidkaigi2018-flutter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文中で紹介した以外にも、これらを読みながら実装をしていくとかなり理解が捗りました。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;Webアプリとネイティブアプリそれぞれのメリット・デメリットや向き不向きを把握していると、なにか作ろうと思ったときに引出しが多くなっていいんじゃないかなと思います。その第一歩としてDartとFlutterは有用だと思いました。Webエンジニアが取り組みやすいネイティブアプリ開発のプラットフォームであるFlutter、JSに似たシンタックスで書きやすいDart。これから更に理解を深めていこうと思います。&lt;br /&gt;
DartやFlutterについて語りたい場合は是非&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;までどうぞ。&lt;/p&gt;</content><author><name></name></author><summary type="html">Flutterとは、Dartという言語でモバイルアプリを開発するためのSDKです。iOSアプリとAndroidアプリを同じコードベースで実装できるとのことで、普段はWebアプリを開発している私にもとっつきやすそうなので入門してみました。</summary></entry><entry><title type="html">ブランチをMergeする前にbaseブランチの履歴が進んでいないかを確認するスクリプトを書いた</title><link href="https://aloerina01.github.io/blog/2018-06-15-1" rel="alternate" type="text/html" title="ブランチをMergeする前にbaseブランチの履歴が進んでいないかを確認するスクリプトを書いた" /><published>2018-06-15T00:00:00+00:00</published><updated>2018-06-15T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-06-15-1">&lt;p&gt;git-flowで運用していると、releaseブランチとhotfixブランチなど複数のブランチからリリースが行われるケースがあります。その場合リリースされたものを次のreleaseブランチにきちんと反映しないと、ソースが巻き戻ってしまう事故に繋がります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-06-15-1-main.jpg&quot; alt=&quot;flow図&quot; /&gt;
(あくまでイメージ図です、developブランチなどの詳細は省略しています)&lt;/p&gt;

&lt;p&gt;私の業務ではgit-flowを少しカスタマイズした運用をしています。なのでまさに上図のように&lt;strong&gt;hotfixブランチをreleaseブランチに反映し忘れる&lt;/strong&gt;問題を起こしてしまうことがありました。これを防ぐための方法はいろいろありますが、今回は&lt;strong&gt;「releaseブランチとmasterブランチが枝分かれしたコミット」&lt;/strong&gt;と&lt;strong&gt;「最新のmasterブランチのコミット」&lt;/strong&gt;を比較し結果を教えてくれるスクリプトを用意してみました。&lt;/p&gt;

&lt;p&gt;以下のような使用を想定しています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CIに仕込み、releaseブランチのPull Requestに結果をコメントさせる&lt;/li&gt;
  &lt;li&gt;slack botに仕込み、定期的に結果を通知する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;実装&quot;&gt;実装&lt;/h3&gt;

&lt;h4 id=&quot;全体の構成&quot;&gt;全体の構成&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;masterブランチ(baseとなるブランチ)の最新コミットの&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;を取得する&lt;/li&gt;
  &lt;li&gt;ターゲットとなるブランチとmasterブランチ(baseとなるブランチ)が枝分かれした&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;を取得する&lt;/li&gt;
  &lt;li&gt;それらを比較し、差分がないかどうかを判定する&lt;/li&gt;
  &lt;li&gt;CIから実行された場合は判定結果をPull Requestにコメントする&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;ソース&quot;&gt;ソース&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;text_color_red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[37;41;1m&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;text_color_green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[37;42;1m&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;text_color_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 第1引数にチェック対象のbranch&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;target_branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 第2引数に比較対象のbranch、指定がなければmasterとする&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;base_branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

git fetch

&lt;span class=&quot;c&quot;&gt;# base_branchの最新のcommitを取得する&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;latest_commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git log origin/&lt;span class=&quot;nv&quot;&gt;$base_branch&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1 | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/commit &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# target_branchがbase_branchのどのcommitから枝分かれしたのかを調べる&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;base_commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git show-branch &lt;span class=&quot;nt&quot;&gt;--merge-base&lt;/span&gt; origin/&lt;span class=&quot;nv&quot;&gt;$target_branch&lt;/span&gt; origin/&lt;span class=&quot;nv&quot;&gt;$base_branch&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;latest commit: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git log &lt;span class=&quot;nv&quot;&gt;$latest_commit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;based  commit: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git log &lt;span class=&quot;nv&quot;&gt;$base_commit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 「base_branchの最新commit」と「枝分かれしたcommit」を比較&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$latest_commit&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$base_commit&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;最新の&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$base_branch&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;が取り込まれています&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;✅ &quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;APPROVE&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text_color_green&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text_color_reset&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$base_branch&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;が進んでいる可能性があります&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;🚫 &quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REQUEST_CHANGES&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text_color_red&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text_color_reset&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# CIによる実行でなければここで終了&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CI&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CI&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 該当のPull Requestを取得できているか確認する&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CI_PULL_REQUEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CI_PULL_REQUEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Fail to find a pull request.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pr_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CI_PULL_REQUEST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/^.*pull&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 結果をPull RequestにReviewとしてコメントする&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-XPOST&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Authorization: token &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$icon$comment&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$event&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 https://github.com/api/v3/repos/&lt;span class=&quot;nv&quot;&gt;$CIRCLE_PROJECT_USERNAME&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$CIRCLE_PROJECT_REPONAME&lt;/span&gt;/pulls/&lt;span class=&quot;nv&quot;&gt;$pr_number&lt;/span&gt;/reviews
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(CircleCIを使う前提で変数を定義しています)&lt;/p&gt;

&lt;p&gt;ソースは&lt;a href=&quot;https://github.com/aloerina01/check-master-history&quot;&gt;GitHub&lt;/a&gt;でも公開しています。&lt;/p&gt;

&lt;h4 id=&quot;感想&quot;&gt;感想&lt;/h4&gt;

&lt;h5 id=&quot;ログに色をつけたらいい感じでした&quot;&gt;ログに色をつけたらいい感じでした&lt;/h5&gt;
&lt;p&gt;ログを読みやすくしたくて文字色や背景色を変えています。色属性を変数化したら、ログの見やすさもコードの見やすさもいい感じでした。&lt;a href=&quot;https://qiita.com/dojineko/items/49aa30018bb721b0b4a9&quot;&gt;こちらの記事&lt;/a&gt;の色見本帳がとても便利で感謝です。&lt;/p&gt;

&lt;h5 id=&quot;head-と-tail-が便利で乱用しました&quot;&gt;head と tail が便利で乱用しました&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head -n&lt;/code&gt;は&lt;strong&gt;入力の冒頭からn行を抽出し出力する&lt;/strong&gt;コマンドです。&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;git show-branch&lt;/code&gt;は複数に渡り情報が表示されるので、head/tailを使うと最新/最古の情報を抽出できて便利でした。&lt;/p&gt;

&lt;h5 id=&quot;sedも便利で乱用しました&quot;&gt;sedも便利で乱用しました&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;は&lt;strong&gt;入力をコマンドに従って処理し出力する&lt;/strong&gt;コマンドです。今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;sed -e s/置換前/置換後&lt;/code&gt;として文字列を置換します。置換前で&lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;に入れた部分(グループ化した部分)を、置換後に&lt;code class=&quot;highlighter-rouge&quot;&gt;\1(特殊変数)&lt;/code&gt;で抜き出しています。これが便利すぎて、入力から一部の文字列を切りとって出力する場面では乱用してしまいます。&lt;/p&gt;

&lt;h5 id=&quot;そこそこ活躍するスクリプトになりました&quot;&gt;そこそこ活躍するスクリプトになりました&lt;/h5&gt;

&lt;p&gt;Merge漏れ事故の対策は他にもいろいろ案がある中、諸々の事情により一旦の場しのぎとして作った程度でしたが、そこそこ活躍しているようで作った甲斐がありました。shellを書く機会があまりないので、作ること自体も楽しめました。&lt;/p&gt;

&lt;p&gt;現場からの報告は以上です。引き続きよろしくお願いします。&lt;/p&gt;</content><author><name></name></author><summary type="html">git-flowで運用していると、releaseブランチとhotfixブランチなど複数のブランチからリリースが行われるケースがあります。その場合リリースされたものを次のreleaseブランチにきちんと反映しないと、ソースが巻き戻ってしまう事故に繋がります。</summary></entry><entry><title type="html">コマンド一つでReactの開発環境が100％整うライブラリx0の紹介</title><link href="https://aloerina01.github.io/blog/2018-05-30-1" rel="alternate" type="text/html" title="コマンド一つでReactの開発環境が100％整うライブラリx0の紹介" /><published>2018-05-30T00:00:00+00:00</published><updated>2018-05-30T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-05-30-1">&lt;h3 id=&quot;はじめに&quot;&gt;はじめに&lt;/h3&gt;

&lt;p&gt;いきなりですが、Reactの開発環境を用意するのって大変だと思うのです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM&lt;/code&gt;をnpm installする&lt;/li&gt;
  &lt;li&gt;ES6+で書くためにpolyfillを入れる&lt;/li&gt;
  &lt;li&gt;ES6+で書くためにBabelの設定をする&lt;/li&gt;
  &lt;li&gt;JSXを書くためにBabelの設定をする&lt;/li&gt;
  &lt;li&gt;ビルドするためにWebpackの設定をする&lt;/li&gt;
  &lt;li&gt;bundleしたJSを読み込むindexページのHTMLを作成する&lt;/li&gt;
  &lt;li&gt;作ったものを確認するためにローカルサーバの設定(実装)をする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にもサーバサイドのことまで含めると更にやることが増えます。知っていれば大した作業ではないのかもしれませんが、セットアップってたまにしかやらないのでやり方を忘れがち、そしてハマりがちです。ちょっとReact触ってみよう、ちょっとコンポーネント試作してみよう、という意欲を消滅させるには十分すぎる障害だと思います。&lt;/p&gt;

&lt;p&gt;先日、この問題をコマンド一つで解決してくれる &lt;strong&gt;&lt;a href=&quot;https://compositor.io/x0/&quot;&gt;x0&lt;/a&gt;&lt;/strong&gt; というライブラリを触ってみたので、使い方と使用感をまとめました。&lt;/p&gt;

&lt;h3 id=&quot;whats-this&quot;&gt;What’s this&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-05-30-hellox0.gif&quot; alt=&quot;x0demo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;a href=&quot;https://compositor.io/x0/&quot;&gt;@compositor/x0&lt;/a&gt; より&lt;/small&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Zero-config React development environment and static site generator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;設定なしで使えるReact開発環境＆静的サイトジェネレーター&lt;/strong&gt;とのことです。上述したnpm install・ビルドスクリプトの用意・ローカルサーバの用意などをまとめてやってくれます。これでReactのコンポーネントを書くことのみに専念できますね。&lt;/p&gt;

&lt;h3 id=&quot;how-to-use&quot;&gt;How to use&lt;/h3&gt;

&lt;h4 id=&quot;1-install-する&quot;&gt;1. install する&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @compositor/x0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;公式ではグローバルに入れて使うことを促していますが、私は作業ディレクトリにdevDependencyでインストールしています。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;sample-x0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sample-x0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; @compositor/x0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-componentを実装する&quot;&gt;2. componentを実装する&lt;/h4&gt;

&lt;p&gt;今回はこのようなディレクトリ構成にします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-plain&quot;&gt;sample-x0
  ├ package.json
  └ components
      ├ HelloWorld.js
      ├ ...
      └ ...(その他コンポーネント)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;HelloWorld.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;3-ビルドデプロイする&quot;&gt;3. ビルド＆デプロイする&lt;/h4&gt;

&lt;p&gt;ビルドしてローカルサーバにデプロイするには&lt;code class=&quot;highlighter-rouge&quot;&gt;x0 [componentを含むディレクトリ]&lt;/code&gt;というコマンドを叩きます。&lt;code class=&quot;highlighter-rouge&quot;&gt;--open (-o)&lt;/code&gt;のオプションをつけると、サーバ起動後にデフォルトブラウザを起動してくれます。&lt;/p&gt;

&lt;p&gt;グローバルインストールしている場合&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;x0 components &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;devDependencyでインストールしている場合&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npx x0 components &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;デプロイされると&lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt;以下に配置したコンポーネント名が一覧で表示され、選択するとそのコンポーネントが描画されたページへ遷移します。&lt;/p&gt;

&lt;h4 id=&quot;4-エントリーポイントをつくる&quot;&gt;4. エントリーポイントをつくる&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt;以下に配置されたコンポーネントはそれぞれ単体で画面に表示されますが、それらを組み合わせた画面をつくることもできます。&lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt;以下にいくつかのコンポーネントとエントリーポイントとなる&lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;を実装します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Title.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Contents.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;main.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./Title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Contents&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./Contents'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Fruits Basket&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Contents&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'apple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'orange'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'peach'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080/main&lt;/code&gt;に2つのコンポーネントが表示されます。&lt;/p&gt;

&lt;h3 id=&quot;feeling&quot;&gt;Feeling&lt;/h3&gt;

&lt;p&gt;使用感はけっこう良かったです。実際に利用した場面を挙げておきます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最新バージョンのReactを試す&lt;/li&gt;
  &lt;li&gt;複雑なロジックを持つコンポーネントを試作する&lt;/li&gt;
  &lt;li&gt;コンポーネントのPlayBookをつくる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最新バージョンのReactを軽く触ろうと思ったとき、本当にシンプルに&lt;strong&gt;コンポーネントのロジックのみを実装して動作確認までできた&lt;/strong&gt;ので、お手軽さは100点でした。&lt;/p&gt;

&lt;p&gt;また、指定したディレクトリ以下のコンポーネントを一覧表示してくれるので、簡易版のコンポーネントPlayBookとしても利用できました。&lt;/p&gt;

&lt;p&gt;その他にも、まだ触っていませんが役立ちそうな機能がいくつかありました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;webpackの設定を時前で用意してbundleできる
    &lt;ul&gt;
      &lt;li&gt;CLIのオプション&lt;code class=&quot;highlighter-rouge&quot;&gt;--webpack&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;のpathを指定できるので、productionビルド時は自前のビルドスクリプトを通す、等できそう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;画面に表示するHTMLを自前で用意して差し替えられる
    &lt;ul&gt;
      &lt;li&gt;PlayBookのIndexページをリッチにできそう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mdx-js/mdx&quot;&gt;MDX&lt;/a&gt;を使える(使ったことはない)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;気になる点は&lt;strong&gt;公式のドキュメントが薄い&lt;/strong&gt;点です。かなりのことを自動でやってくれているので、その内部がどうなっているのか、どこをカスタマイズできるのか、についてもう少し簡単に把握できるとより使いやすいと思います。&lt;/p&gt;

&lt;p&gt;もう1点気になるのは&lt;strong&gt;依存ライブラリがかなり多い点&lt;/strong&gt;です。これも自動でいろいろしてくれる代償ですが、babelのPluginだけでも相当数依存していました。&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-stage-0&lt;/code&gt;まで使うのは個人的にはやり過ぎと感じました。&lt;/p&gt;

&lt;h3 id=&quot;create-react-appとの使い分け&quot;&gt;create-react-appとの使い分け&lt;/h3&gt;

&lt;p&gt;最後にcreate-react-appとの使い分けについてですが、&lt;strong&gt;ローカルで実行する環境の用意&lt;/strong&gt;や&lt;strong&gt;ちょっとしたものの開発&lt;/strong&gt;が目的ならx0で十分という印象です。&lt;/p&gt;

&lt;p&gt;逆に&lt;strong&gt;production用のプロジェクトの簡易セットアップ&lt;/strong&gt;にはcreate-react-appを使うほうが後々カスタマイズしやすいかなと思います(実績の面でも良いかなと)。&lt;br /&gt;
create-react-appの使い方については&lt;a href=&quot;/blog/2017-02-28-1&quot;&gt;Reactを秒速で使い始められるcreate-react-appの使い方と使い心地&lt;/a&gt;にまとめてありますので併せてどうぞ。&lt;/p&gt;

&lt;p&gt;ちなみに、大規模なアプリケーションであったりビルドの仕方やテストなど細かいところまで調整したいときはライブラリに頼らず全部自前で用意しています。適材適所使い分けて幸せな開発ライフを送っていきたいですね。&lt;/p&gt;</content><author><name></name></author><summary type="html">はじめに</summary></entry><entry><title type="html">ForkリポジトリをFork元から切り離してスタンドアローンなリポジトリにする</title><link href="https://aloerina01.github.io/tip/2018-05-21-1" rel="alternate" type="text/html" title="ForkリポジトリをFork元から切り離してスタンドアローンなリポジトリにする" /><published>2018-05-21T00:00:00+00:00</published><updated>2018-05-21T00:00:00+00:00</updated><id>https://aloerina01.github.io/tip/1</id><content type="html" xml:base="https://aloerina01.github.io/tip/2018-05-21-1">&lt;p&gt;Forkして作ったリポジトリだけれどFork元にMergeしたりせず普通のリポジトリとして扱いたい、という稀なケースの対応を経験したので知見をメモします。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;To detach the fork and turn it into a standalone repository on GitHub, contact GitHub Support. If the fork has forks of its own, let support know if the forks should move with your repository into a new network or remain in the current network.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と&lt;a href=&quot;https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/#commit-was-made-in-a-fork&quot;&gt;Github Help&lt;/a&gt;に書いてありました。&lt;/p&gt;

&lt;p&gt;Fork元から切り離しStandaloneなリポジトリにしたい場合はGithub Supportに連絡してね、そのときはリポジトリをどこのネットワーク化に配置したいのかも教えてね、とのことです。&lt;br /&gt;
自身ではできないようです。&lt;/p&gt;

&lt;h3 id=&quot;実際にやってみたときのこと&quot;&gt;実際にやってみたときのこと&lt;/h3&gt;

&lt;p&gt;拙い英語で連絡しました。2通やり取りしたのですが、だいたい翌日の朝方2時〜3時くらいに返信が来たのでとても素早く対応いただけたと感じました。&lt;/p&gt;

&lt;p&gt;やり取りの内容の雰囲気を載せておきます(原文ママではないです)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1通目&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;In the below repository, I want to detach the fork and turn it into a standalone repository.&lt;br /&gt;
https://github.com/aloerina01/aloerina01.github.io&lt;/p&gt;

  &lt;p&gt;How can I do ? 
 Thank you for being patient with my English.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;1通目の返信&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’d be happy to help you with that! I see that your fork has 1 fork of its own. Would you like it to remain under aloerina01/aloerina01.github.io, or should it move under [fork元リポジトリ名]?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2通目&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Thanks for your helping!&lt;/p&gt;

  &lt;p&gt;Please excuse my lack of explanation…&lt;br /&gt;
I would like to remain under aloerina01/aloerina01.github.io.&lt;br /&gt;
This is my Github Pages repository, therefore I never merge to [fork元リポジトリ名].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2通目の返信&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Thanks for confirming! I’ve detached that fork with it’s child for you. It may take a few minutes for that to complete.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Helpページを熟読せずにSupportに連絡してしまったせいでやり取りが2往復になってしまって迷惑をかけてしまいましたが、素早くそして快く対応してくれたGithubに感謝です。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;</content><author><name></name></author><summary type="html">Forkして作ったリポジトリだけれどFork元にMergeしたりせず普通のリポジトリとして扱いたい、という稀なケースの対応を経験したので知見をメモします。</summary></entry><entry><title type="html">メンテナンスしやすいVueComponentを設計するために気をつけていること</title><link href="https://aloerina01.github.io/blog/2018-05-01-1" rel="alternate" type="text/html" title="メンテナンスしやすいVueComponentを設計するために気をつけていること" /><published>2018-05-01T00:00:00+00:00</published><updated>2018-05-01T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-05-01-1">&lt;h3 id=&quot;はじめに&quot;&gt;はじめに&lt;/h3&gt;
&lt;p&gt;VueをつかってWebアプリケーションを実装するとき、Componentをどう切るかって誰でも一度は悩みますよね(悩みますよね？)。とりあえず思いつくままに切ってみたり、繰り返し使いそうなもので切ってみたり、CSSのスコープで切ってみたり…。いろいろな切り口があると思います。&lt;/p&gt;

&lt;p&gt;この「いろいろな切り口」でコンポーネントを切ることができる点が、コンポーネント設計を難しくしている所以だと考えています。&lt;/p&gt;

&lt;p&gt;そこで今回は、&lt;strong&gt;どのような切り口・観点でコンポーネントを切ればよいのか&lt;/strong&gt;、&lt;strong&gt;そのときに気をつけるべきことは何か&lt;/strong&gt;、といったComponentの設計方法についてまとめてみます。&lt;br /&gt;
すべての実用ケースを想定できているわけではないと思いますが、大小いくつかのWebアプリを開発する際に利用してみて今のところいい感じに運用できている方法です(というか自然と収束して出来上がった考え方という感じです)。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#はじめに&quot; id=&quot;markdown-toc-はじめに&quot;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#基本の考え方は責務の分離&quot; id=&quot;markdown-toc-基本の考え方は責務の分離&quot;&gt;基本の考え方は「責務の分離」&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#container-の責務&quot; id=&quot;markdown-toc-container-の責務&quot;&gt;Container の責務&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-画面の構成を表現すること&quot; id=&quot;markdown-toc-1-画面の構成を表現すること&quot;&gt;1. 画面の構成を表現すること&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-他画面との関係性を表現すること&quot; id=&quot;markdown-toc-2-他画面との関係性を表現すること&quot;&gt;2. 他画面との関係性を表現すること&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#viewmodel-component-の責務&quot; id=&quot;markdown-toc-viewmodel-component-の責務&quot;&gt;ViewModel Component の責務&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#view-component-の責務&quot; id=&quot;markdown-toc-view-component-の責務&quot;&gt;View Component の責務&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#design-component-の責務&quot; id=&quot;markdown-toc-design-component-の責務&quot;&gt;Design Component の責務&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#factory-component-の責務&quot; id=&quot;markdown-toc-factory-component-の責務&quot;&gt;Factory Component の責務&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#higher-order-component-の責務&quot; id=&quot;markdown-toc-higher-order-component-の責務&quot;&gt;Higher-Order Component の責務&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;基本の考え方は責務の分離&quot;&gt;基本の考え方は「責務の分離」&lt;/h3&gt;

&lt;p&gt;コンポーネントを切るときに心がけていることは&lt;strong&gt;責務を分けるためにコンポーネントを切る&lt;/strong&gt;ということです。責務を分けるということは、「変更理由」「影響範囲」「役割」を明確にするということに繋がります。&lt;/p&gt;

&lt;p&gt;ではVueのコンポーネントには具体的にどんな責務を持ち得るのか。リストアップしてみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「&lt;strong&gt;Container&lt;/strong&gt;」の責務&lt;/li&gt;
  &lt;li&gt;「Component」の責務
    &lt;ul&gt;
      &lt;li&gt;MVVMにおける「&lt;strong&gt;ViewModel&lt;/strong&gt;」の責務&lt;/li&gt;
      &lt;li&gt;Templateが肥大化したときに分割されつくられる「&lt;strong&gt;View&lt;/strong&gt;」の責務&lt;/li&gt;
      &lt;li&gt;「&lt;strong&gt;汎用UIパーツ&lt;/strong&gt;」としての責務&lt;/li&gt;
      &lt;li&gt;「&lt;strong&gt;動的コンポーネント(Factory)&lt;/strong&gt;」としての責務&lt;/li&gt;
      &lt;li&gt;「&lt;strong&gt;Higher-Order Component&lt;/strong&gt;」の責務&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現時点で私が必要だと感じているのは、これら、Containerの責務と5つのComponentの責務です。&lt;br /&gt;
少し用語の補足をすると、1つの画面を表現するコンポーネントのことをこの記事ではReactにならって「&lt;strong&gt;Container&lt;/strong&gt;」と呼びます(Vueの世界だと「View」や「Page」と呼ばれたりしていますが、曖昧なのでReactにならいます)。例えばブログを作る場合、「TopページContainer」「記事ページContainer」「カテゴリページContainer」などが考えられます。そしてContainer内に配置される(Containerの子コンポーネントとなる)コンポーネントのことを「&lt;strong&gt;Component&lt;/strong&gt;」と表記します。&lt;/p&gt;

&lt;p&gt;では、これらの責務がどんなものなのか考えていきます。&lt;/p&gt;

&lt;h3 id=&quot;container-の責務&quot;&gt;Container の責務&lt;/h3&gt;

&lt;p&gt;Containerの責務とはざっくり言うと&lt;strong&gt;①画面の構成を表現すること&lt;/strong&gt;、&lt;strong&gt;②他画面との関係性を表現すること&lt;/strong&gt;、の2つです。掘り下げると以下のような機能・役割が考えられます。&lt;/p&gt;

&lt;h4 id=&quot;1-画面の構成を表現すること&quot;&gt;1. 画面の構成を表現すること&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;画面内に配置するComponentを定義する&lt;br /&gt;
(Templateを見れば画面内にどんなComponentが並ぶのかが分かる)&lt;/li&gt;
  &lt;li&gt;画面全体で必要なModelやStateを管理する&lt;br /&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;を見ればどんなデータを扱うのかが分かる)&lt;/li&gt;
  &lt;li&gt;画面内で共通の処理を定義する&lt;br /&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;を見れば共通のロジックが分かる)&lt;/li&gt;
  &lt;li&gt;Component間のイベントバスになる&lt;br /&gt;
(子ComponentAのイベントをトリガーに子ComponentBの状態を変える、等)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-他画面との関係性を表現すること&quot;&gt;2. 他画面との関係性を表現すること&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;画面同士でデータや状態のやりとりを行う&lt;/li&gt;
  &lt;li&gt;ルーティング処理を定義する&lt;/li&gt;
  &lt;li&gt;vue-routerがurlと紐付けるコンポーネントとなる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Containerは1画面に1つと基準が明確なので、コンポーネントを切るときにはあまり困らないです。が、機能を実装する際に「これは本当にContainerが持つべきもものか」を意識していないと、&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;はどんどん肥大化してしまいます。言い換えれば「とりあえずContainerに実装しておけば動く」という機能が多いということです。&lt;br /&gt;
なので画面に機能を足すときには、後述する各Componentに機能を移譲できないか？ を常に検討するようにし、Containerの責務を必要最低限を保つようにしています。&lt;/p&gt;

&lt;h3 id=&quot;viewmodel-component-の責務&quot;&gt;ViewModel Component の責務&lt;/h3&gt;
&lt;p&gt;ここからはContainer内に配置するComponentについてのパターンです。&lt;br /&gt;
Vueは双方向バインディングができることから、MVVMな設計で利用されることがよくあります。&lt;a href=&quot;/blog/2017-08-29-1&quot;&gt;Vue+VuexでMVVMなWebApplicationを設計するときに考えたいこと&lt;/a&gt;の記事にも書きましたが、Vueのコンポーネントは&lt;strong&gt;MVVMのV(View)とVM(ViewModel)の機能を併せ持っています&lt;/strong&gt;。簡単に言えば単一コンポーネントの&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;の部分がViewで、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;の部分がViewModelという感じです。&lt;/p&gt;

&lt;p&gt;つまりComponentは、標準で&lt;strong&gt;ViewModel(とView)の責務を持っている&lt;/strong&gt;ということです。&lt;br /&gt;
ここでViewModelの役割を見直してみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PresentationロジックとStateを持つ&lt;/li&gt;
  &lt;li&gt;Modelに依存する&lt;/li&gt;
  &lt;li&gt;Modelを監視する&lt;/li&gt;
  &lt;li&gt;Viewと双方向データバインディングする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったことが挙げられます。これをVueの言葉で言い換えると&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;にコンポーネントを操作するロジックを持つ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;にコンポーネントのStateを定義する&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;にコンポーネントに必要なModelを定義し、リアクティブに更新する&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Templateに&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;で定義した値を反映する、また&lt;code class=&quot;highlighter-rouge&quot;&gt;v-model&lt;/code&gt;等でTemplateの変更を検知する&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。これらが過不足なく実装されていると、ViewModelとしての責務を持つComponentだと言えそうです。&lt;/p&gt;

&lt;p&gt;では過不足なくとはどういう状態か。&lt;br /&gt;
これはViewModelの設計の粒度に依るので正解はないと思いますが、ViewModel Component各々が1機能ずつ責務を担っていて、その粒度が揃っていればいいと思います。&lt;/p&gt;

&lt;p&gt;これができているか確認するのは案外簡単で、ViewModel Componentの名前をリストアップしてみたときに、「&lt;strong&gt;名前から責務が分かるか&lt;/strong&gt;」「&lt;strong&gt;その粒度が同程度に見えるか&lt;/strong&gt;」で判断できます。責務は1つなのでそれが適切に名前に反映されていれば合格で、もし反映できないなら責務を持ちすぎていている可能性があります。&lt;br /&gt;
(Componentを細かく切りすぎてしまって責務のないComponentができているケースもたまにありますが、個人的に多い例は責務を持ちすぎているパターンです……)&lt;/p&gt;

&lt;p&gt;Vueのコンポーネントは、Vueの仕様的に見てもそれ単体で動作するように実装できる仕様であり、MVVM的に見てもViewModelはそれ単体で1つの機能を実現するものです。そのためVueのコンポーネントは、&lt;strong&gt;基本的にはそれ単体で動くViewModel Componentとして切るのが良い&lt;/strong&gt;と思います。&lt;/p&gt;

&lt;p&gt;ただそれだけだと対応できないパターンがいくつかあるので、そのために以下に別パターンのComponentの切り方を用意しています。&lt;/p&gt;

&lt;h3 id=&quot;view-component-の責務&quot;&gt;View Component の責務&lt;/h3&gt;
&lt;p&gt;コンポーネントのTemplateを書いていると、ループ対象を別コンポーネントとして抜き出したい場合や、Templateがでかすぎるので分割したい場合などがあると思います。こういった例で使えるのがView Componentです。&lt;/p&gt;

&lt;p&gt;View ComponentはReactのように&lt;strong&gt;ステートレスなコンポーネントで、親コンポーネントから受け取る&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;のみで動作させます&lt;/strong&gt;。そのため、基本的には&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;は定義しません。&lt;/p&gt;

&lt;p&gt;親から受け取ったものをTemplateにはめ込んで表示し、親から受け取った関数をたたく。それだけの責務を持つこのComponentは、&lt;strong&gt;独自のViewのみを持ちViewModelを持たないComponent&lt;/strong&gt;だと言えます。&lt;/p&gt;

&lt;p&gt;このView Componentを実装するときに意識していることは、このコンポーネントが「親の一部である」ということです。親のTemplateを分割しただけのものであるということを意識し、ロジックを実装したり過剰に機能を持たせたりしないように注意しています。それができない場合は、コンポーネントの切り方が間違っている可能性を疑います。&lt;br /&gt;
例外はあるかもしれませんが、多くの場合は切り方を変えることで解決します。&lt;/p&gt;

&lt;h3 id=&quot;design-component-の責務&quot;&gt;Design Component の責務&lt;/h3&gt;

&lt;p&gt;これはView Componentの亜種で、実装の仕方はView Componentと同様です。つまりステートレスで&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;を受け取って動作します。&lt;/p&gt;

&lt;p&gt;ただ目的が違い、View Componentが親のTemplate分割を目的に作られるのに対し、こちらは&lt;strong&gt;UIパーツのデザイン共通化を目的に作られます&lt;/strong&gt;。アプリ内でLabel付きButtonのUIを統一したい、ダイアログのUIを統一したい、といった場合に作られます。&lt;/p&gt;

&lt;p&gt;そのため、粒度の小さいパーツはTemplateと&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;をHTML標準のタグと同じ状態にしておくと、使うときに楽だったり後々置き換えが効いたりして便利です。&lt;/p&gt;

&lt;h3 id=&quot;factory-component-の責務&quot;&gt;Factory Component の責務&lt;/h3&gt;

&lt;p&gt;今までのコンポーネントとは性質が少し違い、&lt;strong&gt;表示するComponentを動的に切り替える機能を持つComponentがFactory Component&lt;/strong&gt;です。  具体的には以下のような役割を持ちます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;でtypeを受け取る&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jp.vuejs.org/v2/api/#is&quot;&gt;v-bind:is&lt;/a&gt;を使ってtypeに応じたComponentをレンダリングする&lt;/li&gt;
  &lt;li&gt;描画するComponentたちの&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;を抽象化する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;漠然としていてピンとこないかもしれないのでサンプルコードを載せます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;template&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;componentName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:componentData=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;componentData&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;script&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;componentData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;componentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'component-a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'component-b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;で受け取ったtypeに応じて、描画するComponentを&lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:is&lt;/code&gt;で切り替えています。switch文を使っていますが、type名がそのままComponent名となるようにしてもいいですし、Factory Methodっぽくしてもいいと思います。&lt;/p&gt;

&lt;p&gt;また、どのComponentにも&lt;code class=&quot;highlighter-rouge&quot;&gt;componentData&lt;/code&gt;を渡しています。この部分が&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;の抽象化です。抽象化しているので、Factory Componentを呼び出している側はどのComponentが描画されるのかを気にする必要がなくなりますね。&lt;/p&gt;

&lt;h3 id=&quot;higher-order-component-の責務&quot;&gt;Higher-Order Component の責務&lt;/h3&gt;

&lt;p&gt;Componentを引数にとり新たなComponentを返す関数、言い換えると&lt;strong&gt;Componentを様々な方法で再利用できる仕組みがHigher-Order Component&lt;/strong&gt;です。Reactにも同じ概念がありますね。実装方法の差はあれど、責務は似ています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Factoryとなり、表示するComponentを動的に切り替える&lt;/li&gt;
  &lt;li&gt;ComponentをWrapし、Decoratorパターンのように機能を追加する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;をproxyし、加工する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このようなことができます(他にもいろいろできます)。&lt;br /&gt;
これはやろうとすればかなりトリッキーなこともできる仕組みで、また(抽象レイヤーであるために)責務が曖昧になりやすいので、個人的にはなるべく使わないようにしています。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;Containerとしての責務と、Componentとしての責務5パターンをまとめました。&lt;br /&gt;
これら以外にも様々な切り口があると思いますが、現時点で自分の中で有用だと思うものを整理してみました。ディスカッションのたたき台にでもなればと思いますので、ご感想・ご意見がありましたらぜひ&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;まで。&lt;/p&gt;</content><author><name></name></author><summary type="html">はじめに VueをつかってWebアプリケーションを実装するとき、Componentをどう切るかって誰でも一度は悩みますよね(悩みますよね？)。とりあえず思いつくままに切ってみたり、繰り返し使いそうなもので切ってみたり、CSSのスコープで切ってみたり…。いろいろな切り口があると思います。</summary></entry><entry><title type="html">経験の棚卸し 2018年4月編</title><link href="https://aloerina01.github.io/blog/2018-04-13-1" rel="alternate" type="text/html" title="経験の棚卸し 2018年4月編" /><published>2018-04-13T00:00:00+00:00</published><updated>2018-04-13T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-04-13-1">&lt;h3 id=&quot;ことはじめ&quot;&gt;ことはじめ&lt;/h3&gt;

&lt;p&gt;業務やプライベートで開発していて躓いたことや考えたことをブログにまとめていますが、&lt;strong&gt;まとめるほどじゃないけど経験したこと&lt;/strong&gt;がけっこうあるなあと感じていました。&lt;br /&gt;
それらの中には時間が経つと忘れてしまうことも多くて、経験が蒸発していってしまうような気がしてどこかもったいなさを感じていました。&lt;/p&gt;

&lt;p&gt;とはいえ「スキルセット」として表現するには呼び名に困る内容であったり、経験値がそこまで高くないものであったりと表現に悩むことも多く、結果的にどこにも書き残せずにただただ蒸発していくばかりでした。&lt;/p&gt;

&lt;p&gt;そこで&lt;strong&gt;「棚卸し」と称して、最近経験したことを雑にまとめてみよう&lt;/strong&gt;と思います。雑に始めてみるのでもしかしたらこれっきりになるかもしれません。&lt;/p&gt;

&lt;p&gt;なお、「成果」ではなくあくまで「経験したこと」を羅列するので、そこはご理解いただければと。&lt;/p&gt;

&lt;h3 id=&quot;棚卸し&quot;&gt;棚卸し&lt;/h3&gt;

&lt;h4 id=&quot;実装に関連する経験&quot;&gt;実装に関連する経験&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Vue(v2.x)の利用
    &lt;ul&gt;
      &lt;li&gt;ゼロベースでのSPAの設計・SSRの設計&lt;/li&gt;
      &lt;li&gt;v1からのマイグレーション&lt;/li&gt;
      &lt;li&gt;Vuexの導入・設計(&lt;a href=&quot;/blog/2017-08-29-1&quot;&gt;Vue+VuexでMVVMなWebApplicationを設計するときに考えたいこと&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reactの利用
    &lt;ul&gt;
      &lt;li&gt;FluxUtilsを利用したFluxの実装&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/aloerina/reactdetukurudong-de-rendaringu&quot;&gt;動的レンダリング&lt;/a&gt;の設計&lt;/li&gt;
      &lt;li&gt;Jest、Enzymeを利用した単体テスト&lt;/li&gt;
      &lt;li&gt;create-react-appの利用&lt;/li&gt;
      &lt;li&gt;インタラクティブなComponentの実装&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebViewの利用&lt;/li&gt;
  &lt;li&gt;Jekyllの利用&lt;/li&gt;
  &lt;li&gt;フロントエンドの速度改善&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;開発環境に関連する経験&quot;&gt;開発環境に関連する経験&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;CircleCI(v1)の導入
    &lt;ul&gt;
      &lt;li&gt;ビルドスクリプトの実装&lt;/li&gt;
      &lt;li&gt;デプロイスクリプトの実装&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;フロントエンドの開発環境の構築
    &lt;ul&gt;
      &lt;li&gt;Babelの設定(&lt;a href=&quot;/blog/2018-03-19-1&quot;&gt;Babelの設定を見直すための逆引きガイド&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Polyfillの設定&lt;/li&gt;
      &lt;li&gt;Webpack(v4)の設定&lt;/li&gt;
      &lt;li&gt;grunt、gulpの撤去・移行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Webpackのマイグレーション(v1→v3)&lt;/li&gt;
  &lt;li&gt;テストケースの作成(&lt;a href=&quot;/blog/2016-10-31-1&quot;&gt;開発者なりに考えたQA(品質保証)の話をしてみよう&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/danger/danger&quot;&gt;danger&lt;/a&gt;の導入&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;業務プロセスに関連する経験&quot;&gt;業務プロセスに関連する経験&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;プランニングのお手伝い
    &lt;ul&gt;
      &lt;li&gt;ペルソナ作成&lt;/li&gt;
      &lt;li&gt;UXの検討&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;リリースフローの改善&lt;/li&gt;
  &lt;li&gt;5人程度のチームのスケジュール調整・タスク管理&lt;/li&gt;
  &lt;li&gt;コードレビュー、コードレビュー会の実施&lt;/li&gt;
  &lt;li&gt;モブプロの試運転&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;
&lt;p&gt;書き出してみたものの、なんとなく名前をつけられる経験ばかりが挙がってしまった感じがあります…。もっと曖昧な経験もあるはずなのですが思い出せなかったので既に蒸発しきってしまったのかもしれません。&lt;/p&gt;

&lt;p&gt;感想は&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;までどうぞ。&lt;/p&gt;</content><author><name></name></author><summary type="html">ことはじめ</summary></entry><entry><title type="html">Jekyllで作るWebサイトのURLをいい感じにする方法</title><link href="https://aloerina01.github.io/blog/2018-04-05-1" rel="alternate" type="text/html" title="Jekyllで作るWebサイトのURLをいい感じにする方法" /><published>2018-04-05T00:00:00+00:00</published><updated>2018-04-05T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-04-05-1">&lt;p&gt;&lt;img src=&quot;/assets/2018-04-05-1.png&quot; alt=&quot;jekyll&quot; /&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#この記事の効能&quot; id=&quot;markdown-toc-この記事の効能&quot;&gt;この記事の効能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#仕組みを知る&quot; id=&quot;markdown-toc-仕組みを知る&quot;&gt;仕組みを知る&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#変換対象となるディレクトリ構成&quot; id=&quot;markdown-toc-変換対象となるディレクトリ構成&quot;&gt;変換対象となるディレクトリ構成&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#url生成のルールとファイル命名ルール&quot; id=&quot;markdown-toc-url生成のルールとファイル命名ルール&quot;&gt;URL生成のルールとファイル命名ルール&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1つ1つの記事に任意のurlを付与する&quot; id=&quot;markdown-toc-1つ1つの記事に任意のurlを付与する&quot;&gt;1つ1つの記事に任意のURLを付与する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#すべてのpostsに一定のルールでurlを付与する&quot; id=&quot;markdown-toc-すべてのpostsに一定のルールでurlを付与する&quot;&gt;すべてのpostsに一定のルールでURLを付与する&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#_configymlの設定例&quot; id=&quot;markdown-toc-_configymlの設定例&quot;&gt;_config.ymlの設定例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ポイント1--front-matterのデフォルト値を指定する&quot; id=&quot;markdown-toc-ポイント1--front-matterのデフォルト値を指定する&quot;&gt;ポイント1:  Front Matterのデフォルト値を指定する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ポイント2-frontmatterのデフォルト値の適用範囲を指定する&quot; id=&quot;markdown-toc-ポイント2-frontmatterのデフォルト値の適用範囲を指定する&quot;&gt;ポイント2: FrontMatterのデフォルト値の適用範囲を指定する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ポイント3-collectionsの機能を使ってtypeを追加する&quot; id=&quot;markdown-toc-ポイント3-collectionsの機能を使ってtypeを追加する&quot;&gt;ポイント3: Collectionsの機能を使ってtypeを追加する&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;この記事の効能&quot;&gt;この記事の効能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一つ一つのページに任意のURLを設定出来るようになります&lt;/li&gt;
  &lt;li&gt;各ページに一定のルールでURLを割り振れるようになります&lt;/li&gt;
  &lt;li&gt;公式に書いてある&lt;a href=&quot;https://jekyllrb.com/docs/permalinks/&quot;&gt;Permalinks&lt;/a&gt;, &lt;a href=&quot;https://jekyllrb.com/docs/frontmatter/&quot;&gt;Front Matter&lt;/a&gt;あたりの仕組みを理解できます&lt;/li&gt;
  &lt;li&gt;ついでに関連する&lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;Collections&lt;/a&gt;という機能をやんわり理解できます&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;仕組みを知る&quot;&gt;仕組みを知る&lt;/h3&gt;

&lt;h4 id=&quot;変換対象となるディレクトリ構成&quot;&gt;変換対象となるディレクトリ構成&lt;/h4&gt;

&lt;p&gt;Jekyllのルールに則ったディレクトリにコンテンツ(ファイル)を配置すると、Jekyllはそのファイルを静的ページ(HTML)に変換してくれます。そして静的ページ1つ1つに対してURLが付与されます。&lt;br /&gt;
例えば記事のように蓄積されていくコンテンツの場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;以下にコンテンツファイルを配置することで記事ごとのHTMLを生成してくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-plain&quot;&gt;.
├── _config.yml
|
(省略)
| 
├── _posts
|   ├── 2018-04-01.md
|   └── 2018-04-02-how-to-use.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;url生成のルールとファイル命名ルール&quot;&gt;URL生成のルールとファイル命名ルール&lt;/h4&gt;

&lt;p&gt;Jekyllはコンテンツのファイル名をもとにURLを自動生成します。そのため、コンテンツファイルは&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;year4桁&amp;gt;-&amp;lt;month2桁&amp;gt;-&amp;lt;day2桁&amp;gt;-&amp;lt;タイトル&amp;gt;.md&lt;/code&gt;と命名する必要があります。&lt;/p&gt;

&lt;p&gt;これをもとにJekyllは&lt;code class=&quot;highlighter-rouge&quot;&gt;/year4桁/month2桁/day2桁/タイトル.html&lt;/code&gt;というURLのHTMLを生成します。加えて、記事にカテゴリを指定している場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;/カテゴリ/year4桁/month2桁/day2桁/タイトル.html&lt;/code&gt;というURLのHTMLを生成します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2018-04-01.md&lt;br /&gt;
      → &lt;code class=&quot;highlighter-rouge&quot;&gt;/2018/04/01.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;2018-04-02-how-to-use.md&lt;br /&gt;
      → &lt;code class=&quot;highlighter-rouge&quot;&gt;/2018/04/02/how-to-use.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;2018-04-03.mdに「diary」カテゴリを指定&lt;br /&gt;
      →&lt;code class=&quot;highlighter-rouge&quot;&gt;/diary/2018/04/03.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;2018-04-04-cooking.md「diary」「recipe」カテゴリを指定&lt;br /&gt;
      →&lt;code class=&quot;highlighter-rouge&quot;&gt;/diary/recipe/2018/04/04/cooking.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このURL生成ルールをJekyllの設定的には&lt;code class=&quot;highlighter-rouge&quot;&gt;/:categories/:year/:month/:day/:title.html&lt;/code&gt;と表現します。&lt;/p&gt;

&lt;h3 id=&quot;1つ1つの記事に任意のurlを付与する&quot;&gt;1つ1つの記事に任意のURLを付与する&lt;/h3&gt;
&lt;p&gt;上述のURL生成ルールがJekyllのデフォルトなのですが、このルールを無視して記事ごとに独自のURLを付与することができます。記事の冒頭でタイトルなどを定義する領域( = &lt;strong&gt;Front Matter&lt;/strong&gt; )に&lt;code class=&quot;highlighter-rouge&quot;&gt;permalink&lt;/code&gt;という項目を追記します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2018-04-01.md&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Jekyllの使い方&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/article/how-to-use&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こうすることでファイル名の日付を無視して&lt;code class=&quot;highlighter-rouge&quot;&gt;/article/how-to-use&lt;/code&gt;というURLで記事を生成してくれます。&lt;/p&gt;

&lt;p&gt;余談ですが、このFront Matterはテンプレート内で使える変数を宣言することができます。たとえば複数人から入稿されるサイトにて記事内にWriter名を表示したい場合は、以下のようにFront Matterを利用できます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_posts/2018-04-01.md のFrontMatterに&lt;code class=&quot;highlighter-rouge&quot;&gt;writer&lt;/code&gt;という項目を定義&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Jekyllの使い方&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/article/how-to-use&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aloerina&lt;/span&gt;  
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;_layouts/post.html テンプレートから&lt;code class=&quot;highlighter-rouge&quot;&gt;page.writer&lt;/code&gt;という変数で値を利用&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&amp;lt;/h1&amp;gt;
&amp;lt;!-- 省略 --&amp;gt;
&amp;lt;p&amp;gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;すべてのpostsに一定のルールでurlを付与する&quot;&gt;すべてのpostsに一定のルールでURLを付与する&lt;/h3&gt;
&lt;p&gt;Front Matterを使えば記事1つ1つに個別のURLを設定できました。しかしこれを毎回書くのは面倒くさいですよね。そこで&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;を使ってFrontMatterのデフォルト値を指定します。「URLを&lt;code class=&quot;highlighter-rouge&quot;&gt;/artilce/&amp;lt;タイトル名&amp;gt;.html&lt;/code&gt;とする」例を使って解説します。&lt;/p&gt;

&lt;h4 id=&quot;_configymlの設定例&quot;&gt;_config.ymlの設定例&lt;/h4&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;posts&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/article/:title.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ポイント1--front-matterのデフォルト値を指定する&quot;&gt;ポイント1:  Front Matterのデフォルト値を指定する&lt;/h4&gt;
&lt;p&gt;Front Matterのデフォルト値を指定する&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults&lt;/code&gt;には、大きく2つの項目があります。&lt;strong&gt;どのファイルに対してデフォルト値を設定するかを表す&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt;&lt;/strong&gt;と、&lt;strong&gt;どんなデフォルト値にするかを表す&lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt;&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt;ほうが理解は簡単で、FrontMatterに書くときと同じように書けばOKです。URLを指定したいなら&lt;code class=&quot;highlighter-rouge&quot;&gt;permalink: xxxx&lt;/code&gt;と、カテゴリを指定したいなら&lt;code class=&quot;highlighter-rouge&quot;&gt;categories: xxxxx&lt;/code&gt;と書くだけです。上述した&lt;code class=&quot;highlighter-rouge&quot;&gt;writer&lt;/code&gt;のような独自の変数をここで定義することもできますし、複数の項目を並べて指定することもできます。&lt;/p&gt;

&lt;p&gt;今回はURLにタイトルを入れたいので&lt;code class=&quot;highlighter-rouge&quot;&gt;:title&lt;/code&gt;という変数を使いましたが、他にもpermalinkの指定に使える変数があります。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;変数名&lt;/th&gt;
      &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;:year&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる年&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:month&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる月&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:i_month&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる0埋めしない月&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:day&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる日&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:i_day&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる0埋めしない日&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:short_year&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる年の下2桁&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:title&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できるタイトル&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:categories&lt;/td&gt;
      &lt;td&gt;Postに対して指定されたカテゴリ&lt;br /&gt; もしカテゴリが存在しない場合は無視&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:date&lt;/td&gt;
      &lt;td&gt;/:categories/:year/:month/:day/:title.html&lt;br /&gt; Jekyllに組み込まれているPermalink&lt;br /&gt; 何も指定しない場合はこれが適用される&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:pretty&lt;/td&gt;
      &lt;td&gt;/:categories/:year/:month/:day/:title/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:none&lt;/td&gt;
      &lt;td&gt;/:categories/:title.html&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;ポイント2-frontmatterのデフォルト値の適用範囲を指定する&quot;&gt;ポイント2: FrontMatterのデフォルト値の適用範囲を指定する&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt;は&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;という2つの要素を持ちます&lt;/strong&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt;とは違いこれら以外の要素を追加することはできません。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;とはどのディレクトリにあるファイルに対してデフォルト値を適用するのか&lt;/strong&gt;を表します。上の例のように空文字にした場合はすべてのファイルが適用対象になります。空文字でもいいのですが必須の項目です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;はpath内にあるファイルのうち、該当するタイプのファイルに対してデフォルト値を適用する&lt;/strong&gt;という絞込を行う機能です。そのためtypeはなくてもOKな項目です。ちなみに&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;以下にあるファイルには内部的に&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;というタイプが割り当てられています。&lt;/p&gt;

&lt;p&gt;つまり今回の設定例では、&lt;strong&gt;全ファイルの中で&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;タイプのファイルに&lt;code class=&quot;highlighter-rouge&quot;&gt;permalink&lt;/code&gt;をデフォルトとして適用する&lt;/strong&gt;となるわけです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;を組み合わせてデフォルト値の適用範囲を設定できるわけですが、この&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;が聞きなれず設定の仕方も少し厄介なので次項でまとめてみます。&lt;/p&gt;

&lt;h4 id=&quot;ポイント3-collectionsの機能を使ってtypeを追加する&quot;&gt;ポイント3: Collectionsの機能を使ってtypeを追加する&lt;/h4&gt;
&lt;p&gt;Webサイトは記事ページ(Jekyll内ではpostsと呼ばれるもの)だけですべてがまかなえるわけではなく、たとえば写真や制作物を載せるページであったり、Documentを載せるページであったりと、様々な様式のページが必要になることがあります。これを表現するのが&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;という概念であり、&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;を定義するものがCollectionsです&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;実は&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;には内部的に以下のような設定を持っています。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これは「&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;というタイプを用意して、これをJekyllの変換対象とする」ということを表現しています。そしてこのtype名に&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;をつなげた_postsディレクトリ以下にあるファイルが、&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;タイプのファイルとなります。&lt;/p&gt;

&lt;p&gt;つまりtypeを増やしたい場合は以下の2つの作業が必要ということになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Collectionにtypeを定義する&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;定義したtype名の先頭に&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;をつけたディレクトリを用意する&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この機能により、最初に記した「変換対象となるディレクトリ」を増やすことができ、また&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;と組み合わせて&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults&lt;/code&gt;の適用範囲を柔軟に指定できるようになるわけです。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Jekyllのコンテンツファイルには命名ルール(&lt;code class=&quot;highlighter-rouge&quot;&gt;:year-:month-:day-:title.md&lt;/code&gt;)がある&lt;/li&gt;
  &lt;li&gt;Jekyllはデフォルトで&lt;code class=&quot;highlighter-rouge&quot;&gt;/:year/:month/:day/:title.html&lt;/code&gt;というURLを生成する&lt;/li&gt;
  &lt;li&gt;記事個別にURLを指定する場合は&lt;strong&gt;Front Matter&lt;/strong&gt;を使う&lt;/li&gt;
  &lt;li&gt;記事一括でURLを指定する場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;に&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults&lt;/code&gt;&lt;/strong&gt;を指定する
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt;&lt;/strong&gt;でデフォルト値を定義する&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt;&lt;/strong&gt;でデフォルト値の指定範囲を定義する
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;は適用対象となるディレクトリを表す&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;はpath内にあるファイルをさらに絞り込むのに使う&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;typeを増やすには&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;に&lt;strong&gt;Collections&lt;/strong&gt;を指定する
    &lt;ul&gt;
      &lt;li&gt;何も指定せずとも&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;タイプだけは内部的に定義されている&lt;/li&gt;
      &lt;li&gt;Collectionsにtypeを指定したら、&lt;code class=&quot;highlighter-rouge&quot;&gt;_type名&lt;/code&gt;というディレクトリを用意する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;けっこう複雑で理解するまでに苦労しましたが、わかってしまえば自在にURLを設定することができて便利でした。このブログのソースも&lt;a href=&quot;https://github.com/aloerina01/aloerina01.github.io&quot;&gt;Github&lt;/a&gt;上で公開していますので、ご参考にどうぞ。&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>