<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="https://aloerina01.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aloerina01.github.io/" rel="alternate" type="text/html" /><updated>2019-10-30T06:48:01+00:00</updated><id>https://aloerina01.github.io/feed.xml</id><title type="html">mille-feuille code</title><subtitle>Web Developer。同じような過ちを繰り返さないように備忘録を残しています。
</subtitle><entry><title type="html">チームが上手く失敗するためにマネージャーの私にできること</title><link href="https://aloerina01.github.io/blog/2019-10-24-1" rel="alternate" type="text/html" title="チームが上手く失敗するためにマネージャーの私にできること" /><published>2019-10-24T00:00:00+00:00</published><updated>2019-10-24T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2019-10-24-1">&lt;p&gt;私は現在、フロントエンドエンジニア5人のチームのマネージャーと、職種混合8人チームのスクラムマスターを担当しています。どちらの役割においても、&lt;strong&gt;チームがより自律的で効果的になること&lt;/strong&gt;を意識して関わっています。&lt;/p&gt;

&lt;p&gt;ところで、&lt;strong&gt;心配性な&lt;/strong&gt;私はチームが将来出くわすであろう失敗やトラブルを予測して先回りで対策しようとする傾向にありました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;この案件は〇〇さんが担当したら苦戦するかもしれないから、△△さんにヘルプはいる準備をしておいてもらおう&lt;/li&gt;
  &lt;li&gt;ふりかえりの開催は面倒臭がられるだろうから、自分が開催する役目をしよう&lt;/li&gt;
  &lt;li&gt;この人とあの人は相性が悪くて上手く進捗しないだろうから、別々のチームにしよう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;実例ではないのですが、例えばこんな感じです。&lt;br /&gt;
こういったリスクヘッジや環境整備などは、本の言葉を借りるなら「未来や人間関係の不確実性を減らすこと」と言えそうで、マネージャーの仕事であるように感じていました。&lt;/p&gt;

&lt;p&gt;一方で、&lt;strong&gt;その不確実性は本当に解消すべきものだったのか？ チームが失敗して学ぶチャンスだったのではないか？&lt;/strong&gt; という不安も感じるようになりました…。この不安を通じて考え方が少し変わったと思うので、自分語りしながら整理してみようと思います。&lt;/p&gt;

&lt;h3 id=&quot;失敗を恐れているのは誰か&quot;&gt;失敗を恐れているのは誰か&lt;/h3&gt;

&lt;p&gt;「このままだと上手くいかないかもしれない、問題が起きるかもしれない」という思いは誰かの頭の中で生まれます。それはチームメンバー、マネージャー、もしくは外部の人ということも……。もちろん人により見えてる景色が違うので懸念や不安も違うはずですが、&lt;strong&gt;誰かの目線では解決の余地のあること、大した問題でもないこと&lt;/strong&gt;を、心配性の私は勝手に不安がっていた可能性もあるわけです。&lt;/p&gt;

&lt;p&gt;この解決策は言うだけなら簡単で、&lt;strong&gt;チームで会話して懸念や不安を共有すれば良い&lt;/strong&gt;ですよね。ただ実行するのは難しく……日頃から胸の内をオープンにし合える関係性・コミュニケーションの場を作っておくことが大事だと痛感させられました。&lt;/p&gt;

&lt;h3 id=&quot;それは失敗じゃない実績解除だ&quot;&gt;それは失敗じゃない、実績解除だ&lt;/h3&gt;

&lt;p&gt;失敗を避けていた自分の振る舞いを変えるキッカケとなった発想は、「&lt;strong&gt;その失敗は本当にしてはいけない失敗なのか&lt;/strong&gt;」でした。&lt;/p&gt;

&lt;p&gt;私は寝る前に(ひどいときは朝起きてからも)失敗したことを思い返して何がどうダメだったのかを延々考える癖があります。この積み重ねでしか前進できない自覚もあって、私にとって&lt;strong&gt;失敗は必要な要素&lt;/strong&gt;だと認識するようになりました。ということは、もしかしたらチームにとっても失敗する経験は必要なのかもしれません。&lt;/p&gt;

&lt;p&gt;そう思ってチームメンバーをかえりみると、各々から「同じ失敗を繰り返さないようにしよう」という意志が感じ取れました。ちゃんと失敗を見つめ返して乗り越えて糧にしようという気概がありました。そうなるとあとは私がチームを信じて、チームに失敗してもらうだけですよね。&lt;/p&gt;

&lt;p&gt;そんな尊い行為を失敗なんてネガティブな言葉では呼びたくなくて、&lt;strong&gt;実績解除&lt;/strong&gt;と呼ぶようにしています。&lt;/p&gt;

&lt;h3 id=&quot;実績解除のあとの展開を予測する&quot;&gt;実績解除のあとの展開を予測する&lt;/h3&gt;

&lt;p&gt;チームが実績解除の積み重ねで前進するようになったとはいえ、起きてはいけない問題もあります。そしてそれを阻止したり回避したりする責任はマネージャーにあるでしょう。&lt;br /&gt;
阻止することは難しくないと思っていました。「失敗を予測して阻止する」ことができるなら「失敗の影響範囲や重要度を予測して阻止する」こともできると踏んだわけです。&lt;/p&gt;

&lt;p&gt;しかしいざ取り組んでみたら、&lt;strong&gt;どこまで挑戦してもらって、どこを未然に防ぐか&lt;/strong&gt;のバランスを常にとり続ける難しさが待っていました。特に秀でたところのない私にとって「バランス感覚が良いこと」は生存戦略のつもりだったのですが、このバランス取りはすごく難しくて、今でも悩み続けています。&lt;/p&gt;

&lt;h3 id=&quot;パターンは頼もしくて脆い&quot;&gt;パターンは頼もしくて、脆い&lt;/h3&gt;

&lt;p&gt;チームが実績解除に挑むのと時を同じくして、私は「チームにとって最適な実績解除をどうやって経験してもらうか」の課題に挑戦し続けることになります。どれほどの難易度の経験をどのタイミングでしてもらうのが良いか、その経験のチャンスはどこに転がっているか…と日々悩み臨んでいるのですが、当然のように毎回失敗をします。&lt;/p&gt;

&lt;p&gt;失敗しては別のアプローチをしてまた失敗して…を延々繰り返していれば選択肢も増えるし、うまくいった選択肢はパターンとして自分の中に定着したりもします。&lt;strong&gt;パターンを覚えて強くなったと錯覚した&lt;/strong&gt;日もありました。&lt;br /&gt;
少し考えれば気づけたことですが、全く同じ人間はいないので同じパターンが通用することなんてないわけです。パターンを覚えたからといってレベルアップしたわけではないのです。&lt;/p&gt;

&lt;p&gt;大事なのは、パターンの使い回しではなく応用です。応用に必要なものは&lt;strong&gt;具体策より方針&lt;/strong&gt;です。つまり、上手くいったアプローチをパターンとして蓄積させる過程では、個別具体的な部分を削ぎ落とし抽象化させていくことも必要なのでした。なんとか言語化までできたパターンの例を挙げてみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;問題が起き得ることに気づいても何もせず、あえて問題を起こさせる。&lt;strong&gt;一度経験してしまえば次回は防げるであろう事例&lt;/strong&gt;で使う&lt;/li&gt;
  &lt;li&gt;特定の問題に目を向けるよう、または集中するよう促す。&lt;strong&gt;解決策を試行錯誤する過程で実績解除できるであろう事例&lt;/strong&gt;で使う&lt;/li&gt;
  &lt;li&gt;自分が取り組む問題に協力してもらえないか聞く。&lt;strong&gt;マネージャーが実績解除する姿を追体験させたい事例&lt;/strong&gt;で使う&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いざ言葉にしてみるとパターンと呼ぶには見すぼらしい感じがしますね。それでもこれらを呼吸するように引き出せる状態になれば、一人ひとりの反応を見ることに集中できるようになり、コミュニケーションを洗練させられる気がします。そうなることを目指して、今しばらくはこの脆いパターンを蓄積させていこうと思う次第です。&lt;/p&gt;

&lt;h3 id=&quot;本音&quot;&gt;本音&lt;/h3&gt;

&lt;p&gt;自分の失敗をふりかえることを通じて失敗の必要性を実感し、チームが実績解除して前進していくことを意識するようになった話でした。&lt;/p&gt;

&lt;p&gt;これが今自分にできることだと信じていますが、正直なところ全然自信はなくて、チームが前進しているかどうかも不安です。もっと別の視点や要素があるよ！という方はぜひ&lt;a href=&quot;https://twitter.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;まで一言アドバイスをよろしくお願いします。&lt;/p&gt;</content><author><name></name></author><summary type="html">私は現在、フロントエンドエンジニア5人のチームのマネージャーと、職種混合8人チームのスクラムマスターを担当しています。どちらの役割においても、チームがより自律的で効果的になることを意識して関わっています。</summary></entry><entry><title type="html">VuexのStore設計のTips - 薄いGetter</title><link href="https://aloerina01.github.io/blog/2019-09-25-1" rel="alternate" type="text/html" title="VuexのStore設計のTips - 薄いGetter" /><published>2019-09-25T00:00:00+00:00</published><updated>2019-09-25T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2019-09-25-1">&lt;p&gt;Vue + Vuexで中〜大規模なアプリケーションの開発をするとき、どんな設計にするか未だによく悩みます。試してみては捨ててを繰り返していて、そろそろ自分の中でベターなパターンを固めたいと思いつつも固まらず、気づけば数年経ちました。&lt;/p&gt;

&lt;p&gt;そういった前提を踏まえつつではありますが、&lt;strong&gt;現時点&lt;/strong&gt;で設計時に意識していることをTips的に少しずつまとめてみようと思います。今回はVuexのGetterに関するお話です。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#getterの役割を見直す&quot; id=&quot;markdown-toc-getterの役割を見直す&quot;&gt;Getterの役割を見直す&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#副作用のないクエリとして実装する&quot; id=&quot;markdown-toc-副作用のないクエリとして実装する&quot;&gt;副作用のないクエリとして実装する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#プロパティアクセスとメソッドアクセスを区別して命名する&quot; id=&quot;markdown-toc-プロパティアクセスとメソッドアクセスを区別して命名する&quot;&gt;プロパティアクセスとメソッドアクセスを区別して命名する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#プリミティブでシンプルなクエリとして実装する&quot; id=&quot;markdown-toc-プリミティブでシンプルなクエリとして実装する&quot;&gt;プリミティブでシンプルなクエリとして実装する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#表示用の加工処理はcomponentに実装する&quot; id=&quot;markdown-toc-表示用の加工処理はcomponentに実装する&quot;&gt;表示用の加工処理はComponentに実装する&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#例外1-加工された値の賞味期限が長い場合&quot; id=&quot;markdown-toc-例外1-加工された値の賞味期限が長い場合&quot;&gt;例外1. 加工された値の賞味期限が長い場合&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#例外2-加工処理が複数componentで繰り返される場合&quot; id=&quot;markdown-toc-例外2-加工処理が複数componentで繰り返される場合&quot;&gt;例外2. 加工処理が複数Componentで繰り返される場合&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;getterの役割を見直す&quot;&gt;Getterの役割を見直す&lt;/h3&gt;

&lt;p&gt;VuexはFluxアーキテクチャを参考にしており、他のFlux系フレームワークと同様にStoreではStateを保持し、Stateが更新されるとそれをViewに通知します。&lt;br /&gt;
このときVuexのStoreは&lt;strong&gt;Getterを通じてStateの一部を切り出して&lt;/strong&gt;Viewに渡すことができます。よくあるFlux系Storeは&lt;code class=&quot;highlighter-rouge&quot;&gt;getState&lt;/code&gt;関数などでStateオブジェクトを丸々渡すケースが多いので対照的ですよね。&lt;/p&gt;

&lt;p&gt;この性質に着目すると、VuexのStoreは外部に対して&lt;strong&gt;読み込み系のGetter&lt;/strong&gt;と&lt;strong&gt;書き込み系のAction(とMutation)&lt;/strong&gt;の仕組みを備えていると考えられます。&lt;/p&gt;

&lt;h3 id=&quot;副作用のないクエリとして実装する&quot;&gt;副作用のないクエリとして実装する&lt;/h3&gt;

&lt;p&gt;書き込み系と読み込み系の分離といえば、CQS (Command-Query Separation) や CQRS (Command and Query Responsibility Segregation) などの設計パターンが思い当たります。ここではよりシンプルなCQSを参考に考えます。&lt;/p&gt;

&lt;p&gt;CQSの基本的な考え方は、オブジェクトが持つメソッドを大きく2つのカテゴリに分類するというものです。1つは副作用が起き得る書き込み系の処理の&lt;strong&gt;Command&lt;/strong&gt;、もう一つは副作用のない読み込み系の処理の&lt;strong&gt;Query&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;Getterもこれにならって副作用が起きないように実装します。&lt;br /&gt;
これだけ見ると当たり前なのですが、「〇〇を表示したときにイベントをemitする」「〇〇を表示したときにフラグを立てる」といった実装をするとき、〇〇を返すGetterの中でemitしたりフラグを立てたりするのもNGなので要注意です。代わりに副作用の起きる処理はMutationやActionに寄せます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// NG&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isShown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// OK&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mutations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;shown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isShown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&quot;プロパティアクセスとメソッドアクセスを区別して命名する&quot;&gt;プロパティアクセスとメソッドアクセスを区別して命名する&lt;/h3&gt;

&lt;p&gt;これは完全に好みの話なので蛇足ですが、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プロパティアクセスのGetterは返すデータを表す名詞で命名する&lt;/li&gt;
  &lt;li&gt;メソッドアクセスのGetterは&lt;code class=&quot;highlighter-rouge&quot;&gt;find{名詞}&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;find{名詞}By{条件}&lt;/code&gt;と命名し、引数に条件をとる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というマイルールで実装しています。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// プロパティアクセスの場合は名詞で命名する&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// メソッドアクセスの場合は動詞(find)で命名する&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;findBook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// 条件別にGetterを用意する場合は 動詞 + by条件 と命名する&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;findBooksByAuthor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;findBookByISBN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ISBN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ISBN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ISBN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ちなみに過去に&lt;code class=&quot;highlighter-rouge&quot;&gt;getHoge&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filterHoge&lt;/code&gt;など動詞を使い分けていたこともあったのですが、開発者によって使い分けルールが曖昧だったので最近はすべて&lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;に統一しています。&lt;/p&gt;

&lt;h3 id=&quot;プリミティブでシンプルなクエリとして実装する&quot;&gt;プリミティブでシンプルなクエリとして実装する&lt;/h3&gt;

&lt;p&gt;Getterで取り出した値をどう使うかは使う側に依存するので、値を加工したりせずState(の一部)をそのまま返すだけのシンプルなGetterを実装するように意識します。&lt;br /&gt;
これを守るためにも上述の命名ルールが役立っていて、データをまるごと返す場合はデータ名を使った名詞で命名し、データの集合から一部を検索して返す場合はfindで命名すると限定することで、自然とシンプルでプリミティブな役割を持つクエリとして実装することができます。&lt;/p&gt;

&lt;p&gt;では、データを加工して渡したい場合はどうするのが良いでしょうか？&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;firstName&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;lastName&lt;/code&gt;を組み合わせて一つの&lt;code class=&quot;highlighter-rouge&quot;&gt;fullName&lt;/code&gt;文字列として扱う例のように、Stateの値は書き換えないまま一時的に加工された値を生成する場面はよくあると思います。この加工処理をどこで担うのが良いでしょうか？&lt;/p&gt;

&lt;h3 id=&quot;表示用の加工処理はcomponentに実装する&quot;&gt;表示用の加工処理はComponentに実装する&lt;/h3&gt;

&lt;p&gt;Stateを加工したり組み合わせたりして表示に適した値に変換する処理は、原則Component側で担うようにしています。StoreからGetterで取得した値をComputedなどで変換して表示する……という実装方法です。&lt;br /&gt;
データモデルやアプリケーションの状態といったコアな情報のみをStoreで持ち、Viewの状態をComponentで持つようにすることで、&lt;strong&gt;Viewの仕様変更に耐えやすくする&lt;/strong&gt;狙いです。&lt;/p&gt;

&lt;p&gt;ちなみにFluxではViewの状態もStoreに持たせる傾向にありますが、Vue + VuexアプリケーションをMVVMと捉えるならVueComponentはVMに相当し、表示のための加工とその結果の保持を担うべき場所とみなすことができます。捉え方によって解釈も変わってきそうですが、私は&lt;strong&gt;StoreのGetterをViewに依存させないこと(Viewの仕様に引きずられないこと)&lt;/strong&gt;を重視したいので、MVVM寄りの捉え方をすることが多いです。&lt;/p&gt;

&lt;p&gt;とはいえこれはあくまで原則。&lt;br /&gt;
例外的な場面での対処法も考慮しておく必要があります。&lt;/p&gt;

&lt;h4 id=&quot;例外1-加工された値の賞味期限が長い場合&quot;&gt;例外1. 加工された値の賞味期限が長い場合&lt;/h4&gt;

&lt;p&gt;1つ目の例外は、加工された値の賞味期限がComponentのライフサイクルより長い場合です。複数のComponentで使われる場合もこれに該当します。&lt;/p&gt;

&lt;p&gt;Componentが破棄された後も値を保持し続けなければいけない場合は、当然ですがStoreで保持しなければなりません。Storeで保持する以外にもClosureで実装したりSingletonで実装したりと値の保持方法はありますが、状態を持つ仕組みが複数存在すると複雑さが増すので注意が必要です。&lt;/p&gt;

&lt;h4 id=&quot;例外2-加工処理が複数componentで繰り返される場合&quot;&gt;例外2. 加工処理が複数Componentで繰り返される場合&lt;/h4&gt;

&lt;p&gt;そこそこの規模・複雑さのアプリケーションを開発していると、「Module分けされたAとBのStoreからStateを取ってきて組み合わせに応じた表示をする」なんて場面が出てくるかもしれません。また「複雑な条件分岐を経てどのように加工されるかが決まる」といった場面もあり得るでしょう。&lt;br /&gt;
このように加工処理が複雑で、なおかつ複数のComponentで必要な場合は、加工処理を関数として外出しする選択肢がとれます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 外出しした加工処理の実装&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stateA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stateB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 引数をもとに加工された値を生成して返す&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// component側&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;convert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./convert'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;displayValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 外出しされた加工処理を利用する&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stateA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stateB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例えば「Listを表示する画面にて、ユーザーがソート方法を切り替えるとインタラクティブにItemの並び順が変わる」といったような場面では、数種類のsort関数を外出ししておくことができそうですよね。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;
&lt;p&gt;設計に関することは日々うにゃうにゃ考えているものの、当たり前の内容であったり状況次第で何とでも解釈できる内容であったりして、書き残すことにあまり意味を感じていませんでした。が、いざ設計しようと思ったときに考慮すべき観点や選択肢としてパッと浮かんでくるものは、やはり言語化して腹落ちしたものなんですよね。&lt;/p&gt;

&lt;p&gt;また、言語化することでフィードバックをもらえたり議論のきっかけになったりする良さもあると思うので、1ヶ月後には意見が変わっているかもしれませんがこうして書き残す試みを今後もしていこうと思います。&lt;/p&gt;</content><author><name></name></author><summary type="html">Vue + Vuexで中〜大規模なアプリケーションの開発をするとき、どんな設計にするか未だによく悩みます。試してみては捨ててを繰り返していて、そろそろ自分の中でベターなパターンを固めたいと思いつつも固まらず、気づけば数年経ちました。</summary></entry><entry><title type="html">みんなのモブプロの疑問に答えてみた</title><link href="https://aloerina01.github.io/blog/2019-07-25-1" rel="alternate" type="text/html" title="みんなのモブプロの疑問に答えてみた" /><published>2019-07-25T00:00:00+00:00</published><updated>2019-07-25T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2019-07-25-1">&lt;p&gt;先日モブプロMeetupが開催されました。モブプロに関する知見や悩みが共有されて、モブプロの楽しさや難しさを再認識できる良い時間でした。&lt;/p&gt;

&lt;p&gt;ところで、このイベントでは参加者から質問を集める機会があったのですが、どれも身近に感じる質問だったので、自分の思考整理のために私の目線で答えて見ようと思います。現場の実例共有も兼ねて。&lt;/p&gt;

&lt;h3 id=&quot;有識者が参加していない場合コードレビューをどうしていますか&quot;&gt;有識者が参加していない場合、コードレビューをどうしていますか？&lt;/h3&gt;

&lt;p&gt;参加者に合わせてモブプロのゴールを調整しています。&lt;br /&gt;
私のチームのモブプロでは有識者が参加しているケースが多いので、「GitHub上でのコードレビューなく即Mergeできる状態」を目指すことが多いです。とはいえ欠席が重なり有識者がいない場合もあるので、その際は「参加者の中では合意の取れた状態」を目指し、あとで有識者にレビューしてもらったりしています。急ぎでない場合は別の案件に取り組む、できる部分だけやる、といった選択をとることもあります。&lt;/p&gt;

&lt;h3 id=&quot;暴走しがちな人がいる場合にどう対処しますか&quot;&gt;暴走しがちな人がいる場合にどう対処しますか？&lt;/h3&gt;

&lt;p&gt;私のチームでは、ナビゲーターの一人だけが発言しまくるといった暴走よりも、ドライバーが一人でコードを書き進めちゃう暴走のほうが起きがちです。私もやりがちなのですが、コードを書いているうちに脳内で先読みが捗ってしまうんですよね。そして場を置き去りにしてひとりで書き進めちゃうんですよね…。&lt;/p&gt;

&lt;p&gt;このとき「ちょっと待って」「声に出してから書いてみて」とブレーキをかけるのもナビゲーターの役目だと思っています。ナビゲーターの一人だけが発言している場合に「〇〇さんはどう思う？」と別の人に話を振ることも然り。モブの進め方を改善できるのはモブの参加者自身だと思うのです。&lt;/p&gt;

&lt;h3 id=&quot;モブプロを定着させるために特別な取り組みをしましたか&quot;&gt;モブプロを定着させるために特別な取り組みをしましたか？&lt;/h3&gt;

&lt;p&gt;私がチームにモブを導入したときは、&lt;strong&gt;みんなでひとつの仕事をすることを「モブ」と呼び&lt;/strong&gt;、モブは身近なものであるという認識を浸透させることを意識しました。具体的には&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;もともと開催していたコードレビュー会を「モブレビュー」と呼ぶようにした&lt;/li&gt;
  &lt;li&gt;Slackにモブに関する情報共有のChannelを立てて情報発信した&lt;/li&gt;
  &lt;li&gt;モブプロの時間を確保しトライアルした&lt;/li&gt;
  &lt;li&gt;チームメンバーが議論している場に顔出し「モブしてるね！」と声掛けて回った&lt;/li&gt;
  &lt;li&gt;実装に関する相談を受けたときに「モブでやっつけてみる？」と提案した&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった感じです。今では自然と複数人で集まって問題解決する場面が増えてきたので、チームにモブという選択肢が浸透してきたように感じます。&lt;/p&gt;

&lt;p&gt;きちんとドライバーとナビゲーターを決めインターバルを回すモブプロの形式にはなっていないこともありますが、&lt;strong&gt;モブの目的に適っていれば形式にはこだわらないようにしています&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;モブプロの目的をどう設定していますか&quot;&gt;モブプロの目的をどう設定していますか？&lt;/h3&gt;

&lt;p&gt;端的にいうと「&lt;strong&gt;フロー効率をよくすること&lt;/strong&gt;」を目的にしていて、説明するときはフロー効率の改善によって得られる作用に焦点を当てて話したりしています。モブの目的にについては『&lt;a href=&quot;https://aloerina01.github.io/blog/2019-03-12-1#%E3%81%AA%E3%81%9C%E3%83%A2%E3%83%96%E3%83%97%E3%83%AD%E3%82%92%E3%81%99%E3%82%8B%E3%81%AE&quot;&gt;「モブプログラミング・ベストプラクティス」読んだのでモブプロの魅力と始め方をまとめる&lt;/a&gt;』もあわせてどうぞ。&lt;/p&gt;

&lt;h3 id=&quot;非エンジニアにモブプロのメリットをどう説明しますか&quot;&gt;非エンジニアにモブプロのメリットをどう説明しますか？&lt;/h3&gt;

&lt;p&gt;幸運にも開発プロセスについて裁量を与えてもらえる環境なので、「モブプロをやることを許可してもらうための説得」といった難易度の高い説明を経験したことがありません。&lt;/p&gt;

&lt;p&gt;ですがプランナーなどの非エンジニアにモブプロの手法を紹介したときは、エンジニアに伝えるときと同様にリソース効率とフロー効率の違いをとっかかりとし、レビュー待ち時間などによりリードタイムがかかった体験談などを交え、モブプロという手段を選択する理由を伝えました。また、&lt;strong&gt;実際にモブプロに参加してもらったり&lt;/strong&gt;様子を撮影して見せることでその場の雰囲気を知ってもらい、「自分たちも試してみようか」と感じてもらうことを目指して説明しました。&lt;/p&gt;

&lt;p&gt;ちなみに、ここでも「モブプロ」ではなく「モブ」という言葉を意識的に使うようにしています。モブプロの方法論には言及せず、モブの身近さを実感してもらうことでメリットを想像しやすい状態をつくることを意識しています。&lt;/p&gt;

&lt;h3 id=&quot;どうしてもモブプロをしたくない人がいる場合どうしますか&quot;&gt;どうしてもモブプロをしたくない人がいる場合どうしますか？&lt;/h3&gt;

&lt;p&gt;モブプロあるいはモブは&lt;strong&gt;手段のひとつ&lt;/strong&gt;です。ですので、やりたくない人がいるのであれば強制する必要はないはずです。&lt;/p&gt;

&lt;p&gt;ただ、モブプロをしたくないと感じる背景を知ることができれば、そこに何かしらの&lt;strong&gt;改善のヒント&lt;/strong&gt;があるように感じます。&lt;br /&gt;
やったことないけれどやりたくないと主張する人がいる場合は、モブ以前に「何か案が出たらとりあえず試してみる」というマインドをチームに浸透させることが必要かもしれません。&lt;br /&gt;
逆に過去にモブプロを経験した上でやりたくないと主張する人がいる場合は、モブのメリットを実感できなかったのかもしれません。どんな点がまずかったのかを聞き、今の自分たちのモブが同じ状態ではないかを見つめ直し、問題ないようであればその旨を伝えてみると良いかもしれません。&lt;/p&gt;

&lt;p&gt;いずれにせよ、やりたくない人がいるということは改善のきっかけを得るチャンスです！&lt;/p&gt;

&lt;h3 id=&quot;モブプロに合う内容合わない内容はありますか&quot;&gt;モブプロに合う内容・合わない内容はありますか？&lt;/h3&gt;

&lt;p&gt;設計やリファクタリングなど、&lt;strong&gt;人によって結果や過程に差が出やすいものは向いている&lt;/strong&gt;と感じます。また、暗黙のテクニックがあるような難解なデバッグや、環境による差が起きやすい環境構築なども実践してみて好感でした。&lt;br /&gt;
一方、修正方法が誰の目からも明らかな不具合修正や、誰がやっても過程・結果が変わらない単純作業などは向かないと思っています。&lt;/p&gt;

&lt;h3 id=&quot;モブプロに最適な人数は何人ですか&quot;&gt;モブプロに最適な人数は何人ですか？&lt;/h3&gt;

&lt;p&gt;小規模で全員が「ちゃんと」参加できる目安は4〜6人くらいかな、というのが体感です。『モブプログラミング・ベストプラクティス』には3〜4人がちょうど良いと書かれていましたし、私の現場では9人くらいでうまくできたと感じるケースもありましたので、あくまで目安です。ただ始めたばかりの頃は少なすぎても多すぎても難しく、4〜6人が安定しやすかった印象です。&lt;/p&gt;

&lt;h3 id=&quot;ドライバーは何分交代でやっていますか&quot;&gt;ドライバーは何分交代でやっていますか？&lt;/h3&gt;

&lt;p&gt;その時々によりますが、15分〜30分交代が多いです。&lt;br /&gt;
何分のインターバルにしても、最後の1分は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ドライバーがgit commitする&lt;/li&gt;
  &lt;li&gt;次のドライバーがgit pullする&lt;/li&gt;
  &lt;li&gt;次のドライバーが書き始められるよう準備する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあてています。&lt;/p&gt;

&lt;h3 id=&quot;人前でコードを書くのは緊張しませんか&quot;&gt;人前でコードを書くのは緊張しませんか？&lt;/h3&gt;

&lt;p&gt;私も人前でコードを書くときは緊張しがちですが、モブプロではあまり緊張しません。&lt;br /&gt;
私の場合「考えている過程」や「未完成なコード」を見られることで能力が低いと感じ取られてしまわないか……という不安があり緊張してしまう傾向にあります。ですがドライバーは&lt;strong&gt;ナビゲーターの言うとおりに書く&lt;/strong&gt;ことがほとんどなので、みんなの意見を反映するタイピスト(兼 質問して議論を掘り下げるファシリテーター)のような感覚で臨んでいます。ちょっとした気持ちの違いですが、これでけっこう緊張をほぐせています。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;振り返ってみると、どの疑問も自分が一度はぶち当たったことのあるものでした。今でも悩んでいる課題もありますが、上述したように「&lt;strong&gt;みんなでひとつの仕事をすればモブである&lt;/strong&gt;」と考えるようになってだいぶ肩の荷が下りました。もちろん方法論に沿ったほうがうまくいくことが多いとは思いますが、そこにこだわって悩むのではなく、&lt;strong&gt;方法に悩んだらそれすらモブで決めちゃおう&lt;/strong&gt;くらいの気持ちでいてもいいのかなと思います。せっかくなので楽しんでモブしたいですしね！ ハッピーモビング！&lt;/p&gt;</content><author><name></name></author><summary type="html">先日モブプロMeetupが開催されました。モブプロに関する知見や悩みが共有されて、モブプロの楽しさや難しさを再認識できる良い時間でした。</summary></entry><entry><title type="html">Babel7.4で非推奨になったbabel/polyfillの代替手段と設定方法</title><link href="https://aloerina01.github.io/blog/2019-06-21-1" rel="alternate" type="text/html" title="Babel7.4で非推奨になったbabel/polyfillの代替手段と設定方法" /><published>2019-06-21T00:00:00+00:00</published><updated>2019-06-21T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2019-06-21-1">&lt;p&gt;Babel7.4.0 から、長いことお世話になってきた @babel/polyfill が非推奨となりました。加えて、@babel/preset-env と @babel/ransform-runtime が core-js@3 に対応したようです🎉&lt;br /&gt;
これらに伴いpolyfill周りの設定方法が変わったので、その内容をメモしておこうと思います。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#babel-と-core-js-の関係のおさらい&quot; id=&quot;markdown-toc-babel-と-core-js-の関係のおさらい&quot;&gt;Babel と core-js の関係のおさらい&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#これからのpolyfill設定方法&quot; id=&quot;markdown-toc-これからのpolyfill設定方法&quot;&gt;これからのpolyfill設定方法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-preset-env-と-usebuiltinsusage-で必要なpolyfillだけ読み込む方法&quot; id=&quot;markdown-toc-1-preset-env-と-usebuiltinsusage-で必要なpolyfillだけ読み込む方法&quot;&gt;1. preset-env と useBuiltIns:usage で必要なpolyfillだけ読み込む方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-preset-env-と-usebuiltinsentry-で全polyfillを読み込む方法&quot; id=&quot;markdown-toc-2-preset-env-と-usebuiltinsentry-で全polyfillを読み込む方法&quot;&gt;2. preset-env と useBuiltIns:entry で全polyfillを読み込む方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-transform-runtime-を使う方法&quot; id=&quot;markdown-toc-3-transform-runtime-を使う方法&quot;&gt;3. transform-runtime を使う方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#proposal-の使い方&quot; id=&quot;markdown-toc-proposal-の使い方&quot;&gt;Proposal の使い方&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考&quot; id=&quot;markdown-toc-参考&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;babel-と-core-js-の関係のおさらい&quot;&gt;Babel と core-js の関係のおさらい&lt;/h3&gt;

&lt;p&gt;Babelが提供する @babel/polyfill や @babel/preset-env などのモジュールを利用すると&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;built-ins objects(Promise, WeakMap等)&lt;/li&gt;
  &lt;li&gt;static methods(Object.assign, Array.from等)&lt;/li&gt;
  &lt;li&gt;instance methods(Array.prototype.includes等)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった新しい機能を使った実装が可能になりますよね。これらのBabelモジュールは &lt;strong&gt;core-js&lt;/strong&gt; が提供するpolyfillを内部的に読み込んでいます。特に &lt;strong&gt;@babel/polyfill は core-js と regenerator-runtime を束ねて提供するpolyfill集&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;Babel7.4.0からはこの @babel/polyfill が非推奨になり、代わりに&lt;strong&gt;core-jsのバージョンを指定して直接読み込む&lt;/strong&gt;方法が提案されています。&lt;/p&gt;

&lt;h3 id=&quot;これからのpolyfill設定方法&quot;&gt;これからのpolyfill設定方法&lt;/h3&gt;
&lt;h4 id=&quot;1-preset-env-と-usebuiltinsusage-で必要なpolyfillだけ読み込む方法&quot;&gt;1. preset-env と useBuiltIns:usage で必要なpolyfillだけ読み込む方法&lt;/h4&gt;

&lt;p&gt;@babel/preset-env は(指定した実行環境にあわせた)必要な構文変換や、polyfillの読み込みをしてくれるものです。そしてこのpresetのオプションの&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltins&lt;/code&gt;で「&lt;strong&gt;どのようにpolyfillを読み込むか&lt;/strong&gt;」を指定できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltIns: usage&lt;/code&gt;とし、必要なpolyfillだけを読み込む設定例から見ていきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@babel/prest-env をinstallする&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; @babel/preset-env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.babelrc または babel.config.js でオプションを指定する&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@babel/preset-env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;useBuiltIns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;usage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;corejs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or 2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;指定したバージョンの core-js をinstallする&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; core-js@3  &lt;span class=&quot;c&quot;&gt;# or core-js@2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltIns: usage&lt;/code&gt;とすると、コード内からpolyfillが必要な箇所を勝手に判断し、必要なcore-jsを勝手にimportしてくれます。このとき、&lt;strong&gt;core-js のバージョンも併せてオプションで指定し、それに応じた core-js をnpm installしておく必要がある&lt;/strong&gt;わけですね。&lt;/p&gt;

&lt;p&gt;ちなみに執筆時点の公式ドキュメントでは&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltIns: usage&lt;/code&gt;はまだ&lt;strong&gt;experimental&lt;/strong&gt;となっているのですが、core-js@3 では多くの問題が解消されていてもはやexperimentalではないだろう…&lt;a href=&quot;https://github.com/babel/website/pull/1987/files#r265777607&quot; target=&quot;_blank&quot;&gt;とのこと&lt;/a&gt;です。&lt;/p&gt;

&lt;h4 id=&quot;2-preset-env-と-usebuiltinsentry-で全polyfillを読み込む方法&quot;&gt;2. preset-env と useBuiltIns:entry で全polyfillを読み込む方法&lt;/h4&gt;

&lt;p&gt;上記と同様に @babel/preset-env を使う方法ですが、オプションの内容が変わります。&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltIns: entry&lt;/code&gt;とし、index.js などのjsファイルの先頭にてpolyfillをimportすることで、全部のpolyfillを読み込む方法です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@babel/prest-env をinstallする&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; @babel/preset-env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.babelrc または babel.config.js でオプションを指定する&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@babel/preset-env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;useBuiltIns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;entry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;corejs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// or 2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;指定したバージョンの core-js と regenerator-runtime をinstallする&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; core-js@3  &lt;span class=&quot;c&quot;&gt;# or core-js@2&lt;/span&gt;
npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; regenerator-runtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jsファイルの先頭で core-js と regenerator-runtime をimportする&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;core-js/stable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;regenerator-runtime/runtime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// import &quot;@babel/polyfill&quot; 今まではこう指定していましたね&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;@babel/polyfill をimportしていた頃と同じ注意になりますが、core-js や regenerator-runtime 複数回importすると問題が起きる可能性があるので、bundleされるjsの冒頭で1度だけimportするように注意する必要があります。&lt;/p&gt;

&lt;h4 id=&quot;3-transform-runtime-を使う方法&quot;&gt;3. transform-runtime を使う方法&lt;/h4&gt;

&lt;p&gt;@babel/plugin-transform-runtime を使ってpolyfillを入れると、&lt;strong&gt;globalが汚染されないメリット&lt;/strong&gt;が得られる反面、&lt;strong&gt;instance methodsが使えないというデメリット&lt;/strong&gt;がありました。が、core-js@3に対応したことにより&lt;strong&gt;instance methodsが利用できるようになります&lt;/strong&gt;🎉&lt;/p&gt;

&lt;p&gt;設定の際は、bundleに組み込まれる &lt;strong&gt;@babel/runtime&lt;/strong&gt; と、ビルド時にpolyfill変換などを担う &lt;strong&gt;@babel/plugin-transform-runtime&lt;/strong&gt; を用意します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;@babel/runtime と @babel/plugin-transform-runtime をinstallする&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; @babel/runtime
npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; @babel/plugin-transform-runtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.babelrc または babel.config.js でオプションを指定する&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nx&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@babel/plugin-transform-runtime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;corejs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;指定したバージョンの core-js をinstallする&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; core-js@3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;proposal-の使い方&quot;&gt;Proposal の使い方&lt;/h3&gt;

&lt;p&gt;@babel/preset-env または @babel/plugin-transform-runtime どちらを利用する場合であっても、core-js@3 ではProposalの機能も利用できるようになりました。設定方法はオプションの内容を変更するだけです。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// before&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;corejs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// after&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;corejs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;proposals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;公式ドキュメントには「ECMAScriptの提案は本質的に不安定であり、core-js@4 では変わる可能性があります」との注意書きがありますので、ご承知おきを。&lt;/p&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/babel/website/pull/1987&quot; target=&quot;_blank&quot;&gt;https://github.com/babel/website/pull/1987&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/en/next/babel-polyfill.html&quot; target=&quot;_blank&quot;&gt;https://babeljs.io/docs/en/next/babel-polyfill.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/en/babel-plugin-transform-runtime&quot; target=&quot;_blank&quot;&gt;https://babeljs.io/docs/en/babel-plugin-transform-runtime&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/en/babel-preset-env&quot; target=&quot;_blank&quot;&gt;https://babeljs.io/docs/en/babel-preset-env&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/blog/2019/03/19/7.4.0&quot; target=&quot;_blank&quot;&gt;https://babeljs.io/blog/2019/03/19/7.4.0&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zloirock/core-js/blob/master/docs/2019-03-19-core-js-3-babel-and-a-look-into-the-future.md&quot; target=&quot;_blank&quot;&gt;https://github.com/zloirock/core-js/blob/master/docs/2019-03-19-core-js-3-babel-and-a-look-into-the-future.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Babel7.4.0 から、長いことお世話になってきた @babel/polyfill が非推奨となりました。加えて、@babel/preset-env と @babel/ransform-runtime が core-js@3 に対応したようです🎉 これらに伴いpolyfill周りの設定方法が変わったので、その内容をメモしておこうと思います。</summary></entry><entry><title type="html">コーチング入門 「4つの会話」でやる気の芽を育てよう</title><link href="https://aloerina01.github.io/blog/2019-05-07-1" rel="alternate" type="text/html" title="コーチング入門 「4つの会話」でやる気の芽を育てよう" /><published>2019-05-07T00:00:00+00:00</published><updated>2019-05-07T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2019-05-07-1">&lt;p&gt;ここ最近、マネジメントの一貫として「1ヶ月間コーチング」に取り組んでいます。クライアント(コーチング相手になってくれる方)と1ヶ月間じっくりコミュニケーションをとって、目標の見直しから実現まで様々な段階に付き添わせてもらいました。&lt;/p&gt;

&lt;p&gt;ある程度自分の中でやり方が見えてきたので、経験談とそれを通して得た考え方について現時点のスナップショットを残しておこうと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2019-04-25-1-coaching.jpg&quot; alt=&quot;グラレコ&quot; /&gt;
&lt;small&gt;今回の概要をグラレコ形式でまとめてみました。&lt;/small&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#前提&quot; id=&quot;markdown-toc-前提&quot;&gt;前提&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#コーチングとは&quot; id=&quot;markdown-toc-コーチングとは&quot;&gt;コーチングとは&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#コーチングに必要な人間関係&quot; id=&quot;markdown-toc-コーチングに必要な人間関係&quot;&gt;コーチングに必要な人間関係&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#コーチングで使った4つの会話&quot; id=&quot;markdown-toc-コーチングで使った4つの会話&quot;&gt;コーチングで使った4つの会話&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#承認する&quot; id=&quot;markdown-toc-承認する&quot;&gt;承認する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#質問する&quot; id=&quot;markdown-toc-質問する&quot;&gt;質問する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#整理する&quot; id=&quot;markdown-toc-整理する&quot;&gt;整理する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#リクエストする&quot; id=&quot;markdown-toc-リクエストする&quot;&gt;リクエストする&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#やる気の芽の育て方&quot; id=&quot;markdown-toc-やる気の芽の育て方&quot;&gt;やる気の芽の育て方&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-ゴール目標が明確になる&quot; id=&quot;markdown-toc-1-ゴール目標が明確になる&quot;&gt;1. ゴール・目標が明確になる&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-ゴールまでのプロセスが明確になる&quot; id=&quot;markdown-toc-2-ゴールまでのプロセスが明確になる&quot;&gt;2. ゴールまでのプロセスが明確になる&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-自分が描いたゴールプロセスに自信を持つ&quot; id=&quot;markdown-toc-3-自分が描いたゴールプロセスに自信を持つ&quot;&gt;3. 自分が描いたゴール・プロセスに自信を持つ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#4-ゴールプロセスを必要に応じて見直せる&quot; id=&quot;markdown-toc-4-ゴールプロセスを必要に応じて見直せる&quot;&gt;4. ゴール・プロセスを必要に応じて見直せる&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#5-自分のペースでプロセスを継続する&quot; id=&quot;markdown-toc-5-自分のペースでプロセスを継続する&quot;&gt;5. 自分のペースでプロセスを継続する&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;前提&quot;&gt;前提&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1対1でやる&lt;/li&gt;
  &lt;li&gt;内容はクライアントのキャリアや仕事に関係すること&lt;/li&gt;
  &lt;li&gt;コミュニケーションはオンライン・オフライン両方で柔軟にとる&lt;/li&gt;
  &lt;li&gt;コミュニケーションのタイミングは必要に応じて随時&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私がやってきたコーチングはこんな感じでした。&lt;/p&gt;

&lt;h3 id=&quot;コーチングとは&quot;&gt;コーチングとは&lt;/h3&gt;

&lt;p&gt;コーチングとは&lt;strong&gt;クライアントの「やりたい」気持ちを実現に導くこと&lt;/strong&gt;だと理解しています。言い換えれば「やる気を出させる」ことなどはコーチングの領域には含まれず、あくまでクライアントの自主的な行動や気持ちに対してアプローチするのがコーチングであるということです。&lt;/p&gt;

&lt;p&gt;そして、コーチングは現実に導くために直接的に手助けするわけではなく、&lt;strong&gt;クライアント自身の気付きによって前進するよう、会話を通して間接的に手助けする&lt;/strong&gt;ものだと考えています。&lt;/p&gt;

&lt;h3 id=&quot;コーチングに必要な人間関係&quot;&gt;コーチングに必要な人間関係&lt;/h3&gt;

&lt;p&gt;コーチングだけでなくマネジメントなどにも言えることだと思いますが、&lt;strong&gt;信頼関係が必須&lt;/strong&gt;だと痛感しました。クライアントに信頼されることはもちろん、コーチがクライアントを信じ切ることも大切なことだと思います。&lt;/p&gt;

&lt;p&gt;自己開示し合えるだけの関係性が必要ですし、人が気持ちを揺さぶられたり行動を起こしたりするには「誰に言われたか」も大事な要素だったりします。なので、場合によってはコーチングを始める前に関係づくりの期間をとることも必要だと感じました。&lt;/p&gt;

&lt;h3 id=&quot;コーチングで使った4つの会話&quot;&gt;コーチングで使った4つの会話&lt;/h3&gt;

&lt;p&gt;コーチングする上で大切なことは「聞く」スキルだと言われたりします。ですが相手が一方的にたくさん話してくれるなんてことはそうそうないので、こちらから「話す」ことも必要になってきます。なので今回は「聞く」でも「話す」でもなく、互いに話し聞く「会話」に焦点を当てて、コーチングで実際に行った4つの会話をまとめます。&lt;/p&gt;

&lt;h4 id=&quot;承認する&quot;&gt;承認する&lt;/h4&gt;

&lt;p&gt;ここで言う「承認」とは &lt;strong&gt;Approve ではなく Acknowledge を指します&lt;/strong&gt;。単に成果を認めるだけはなく、まずクライアントの存在そのものを認め、感謝し、クライアントに現れている変化や違いや成長に気付き、それを言語化して伝えます。&lt;/p&gt;

&lt;p&gt;クライアントのやろうとしていることを理解し認める意志を伝えることは、信頼関係を築くために必要なことですし、コーチングをする上で必要な心構えでもあると感じています。&lt;/p&gt;

&lt;h4 id=&quot;質問する&quot;&gt;質問する&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;「答えはクライアント自身が持っている」前提に立ち、質問を通して気付きを得てもらいます&lt;/strong&gt;。答えのない問いに耽っていると、どうしても思考が行き詰まったり、どう考えるべきかわからなくなる場面があります。そんな場面に出くわしたクライアントに&lt;strong&gt;新しい視点を与える&lt;/strong&gt;よう質問することが必要です。&lt;strong&gt;リフレーミング&lt;/strong&gt;と言ったりもしますね。&lt;br /&gt;
具体的には、&lt;strong&gt;Why や How&lt;/strong&gt; を尋ねる質問が中心になります。&lt;/p&gt;

&lt;h4 id=&quot;整理する&quot;&gt;整理する&lt;/h4&gt;

&lt;p&gt;クライアントが悩み続けてしまったり思考が堂々巡りしてしまったりと、思考が拡散してしまったときに現状を整理して伝えます。考えを深掘りする方法のひとつに「なぜ？を繰り返し問う」方法がありますが、一人でこれをしていると思考が行き詰まりがちです。クライアントがなぜなぜの袋小路に入ってしまったときに、&lt;strong&gt;整理して伝えたり図示して見せたりすることで、それまで考えていたことを客観的に見返す手助けとなります&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;また、クライアントの考えを正しく理解できているか確認するため、発言内容を整理して「〜という理解であっていますか？」と尋ねることもあります。&lt;/p&gt;

&lt;h4 id=&quot;リクエストする&quot;&gt;リクエストする&lt;/h4&gt;

&lt;p&gt;会話で必要なものを用意してもらうよう依頼したり、考え方のフレームワークを提案したりします。&lt;br /&gt;
クライアントは自分の目的のために必要なアクションを&lt;strong&gt;自分自身で見つけてくれるはず&lt;/strong&gt;ですので、「次回までにこれをしてきて」といったような直接的なリクエストはあまりしません。やり方がわからないクライアントに対して「必要ならこういう考え方を試してみて」と提案する等、&lt;strong&gt;アイデアを貸す&lt;/strong&gt;ような感覚でリクエストをします。リクエストは最後の手段だと認識しています。&lt;/p&gt;

&lt;h3 id=&quot;やる気の芽の育て方&quot;&gt;やる気の芽の育て方&lt;/h3&gt;
&lt;p&gt;コーチングの有無に限らず、私たちが何かを成し遂げたいと思ったとき、それを達成するまでに辿る段階があります。人によっては飛ばしたり細分化したりするとは思いますが、大まかには以下の5つのステップで考えました。&lt;/p&gt;

&lt;h4 id=&quot;1-ゴール目標が明確になる&quot;&gt;1. ゴール・目標が明確になる&lt;/h4&gt;

&lt;p&gt;「どうなりたいか」という到達目標であったり、「どうありたいか、どう過ごしていたいか」という継続目標であったり、種類は様々ですが、目標を明確にすることが最初の一歩目です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;いいエンジニアになりたい&lt;/li&gt;
  &lt;li&gt;南国で暮らしていきたい&lt;/li&gt;
  &lt;li&gt;每日1つ何かしらのアウトプットをしていきたい&lt;/li&gt;
  &lt;li&gt;このままじゃ自分のキャリアが不安なので何か始めたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらは過去に私が立てた目標ですが、このようにどんな目標でも良いと思います。漠然な内容でも、定性的なことでも、遠い将来の夢の通過点であっても、何であれ&lt;strong&gt;そこにやる気の種&lt;/strong&gt;があればまずはOKです。やる気を持つこと自体が素敵で素晴らしいことのはずです。&lt;/p&gt;

&lt;p&gt;そして&lt;strong&gt;やる気の種を一緒に育てていくのがコーチング&lt;/strong&gt;です。どんな種でも自信を持ってもらいましょう。そのために「承認」し、必要に応じて不安や曖昧さを解消するために「質問」し「整理」します。&lt;/p&gt;

&lt;h4 id=&quot;2-ゴールまでのプロセスが明確になる&quot;&gt;2. ゴールまでのプロセスが明確になる&lt;/h4&gt;

&lt;p&gt;ゴールや目標を達成するために必要なプロセス・マイルストーン・TODOを明確にします。正確である必要はないので、大まかに&lt;strong&gt;いつまでにどうなっていればよいか&lt;/strong&gt;を定めます。ポイントは3つです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;近い将来のことは具体的に、遠い将来のことはざっくりと&lt;/strong&gt;決める&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;定量的な達成基準&lt;/strong&gt;を設ける&lt;/li&gt;
  &lt;li&gt;必ずやれると&lt;strong&gt;コミットできる内容&lt;/strong&gt;にする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プロセスは定期的に見直していくものなので、近い将来のTODOが具体的であれば十分です。ただし、実現できない可能性のあるTODO(運や環境に左右されること、ハードルが高すぎること)は控えます。&lt;br /&gt;
例えば私の場合は「1ヶ月に10冊本を読む」よりは「1日30分本を読む」のほうが適切でした。私の読書スピードは本の難易度に依存するため、冊数を基準にすると達成できない可能性があったので、1日に読書に充てる時間を基準にしました。&lt;/p&gt;

&lt;p&gt;このステップでのコーチングは、「質問」がメインになります。ゴール(または途中の地点)に到達する姿がイメージできるくらいまで「質問」を繰り返してプロセスを明確にしていきます。&lt;/p&gt;

&lt;h4 id=&quot;3-自分が描いたゴールプロセスに自信を持つ&quot;&gt;3. 自分が描いたゴール・プロセスに自信を持つ&lt;/h4&gt;

&lt;p&gt;自分ひとりで考えて、目標やプロセスを決めて、黙々と努力する……。そうしているうちに「このやり方であっているのか」「これを続けていて意味があるのか」と不安が湧き出てしまうことは、努力する人には至極自然なことなのだと思います。&lt;/p&gt;

&lt;p&gt;この不安を乗り越えられるよう描いたゴールやプロセスに自信を持っていきたいですよね。そのためには、日々の努力を「承認」することも大事ですが、なぜそのプロセスを設定したのかを思い返すように「質問」することも役立ちます。最終的には、自信の根拠はクライアント自身のやる気にたどり着くものなのだと思います。&lt;/p&gt;

&lt;h4 id=&quot;4-ゴールプロセスを必要に応じて見直せる&quot;&gt;4. ゴール・プロセスを必要に応じて見直せる&lt;/h4&gt;

&lt;p&gt;経験を積めば考え方や視点は変化していきます。また時間の経過により環境が変わったりもします。ですので、自分の目標やプロセスに疑問を感じたら都度見直すことが必要です。&lt;/p&gt;

&lt;p&gt;見直しの段階でのコーチングは、やはり「質問」や「整理」が中心なります。ただし、ここでのコーチングの目標は「クライアントが見直しに成功すること」ではなく、「&lt;strong&gt;クライアントがいつでも一人で目標の見直しをできるようになること&lt;/strong&gt;」です。どんなときに、どのように、どのくらい見直しすべきかの感覚がクライアントに浸透するように、考える場面を多く与えます。&lt;/p&gt;

&lt;h4 id=&quot;5-自分のペースでプロセスを継続する&quot;&gt;5. 自分のペースでプロセスを継続する&lt;/h4&gt;

&lt;p&gt;目標に対して常に100％のモチベーションやエネルギーを維持するのって、実はけっこう大変ですよね。ですので、&lt;strong&gt;やる気に応じて、どれだけがんばるかをコントロールしながら継続できれば十分&lt;/strong&gt;だと思います。&lt;/p&gt;

&lt;p&gt;目標次第では「やる気の上下に関わらず無理してでも100％がんばる」というコントロールが必要かもしれませんし、「やる気がないときはプロセスの達成基準の50％を維持する」でも良いと思います。何であれ、クライアント自身がこのコントロールをできるようになることがコーチングの目標になります。&lt;/p&gt;

&lt;p&gt;ここでの会話は「承認」も良いですが、&lt;strong&gt;クライアントが自身のモチベーション・エネルギー源がどこにあるのかを自覚する&lt;/strong&gt;よう「質問」することも役立ちます。また成果や経過を共有できるコミュニティを探すよう「リクエスト」することもあるかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;これらの5つのステップを行ったり来たりしながら目標達成を目指すのが、私の考える「やる気の芽の育て方」です。コーチングの行為は、4つの会話を使ってクライアントと一緒にやる気の芽を育てることですが、最終目標はクライアントが一人で育てられるようになることだということを忘れず、クライアントの自発心を刺激し続ける意識で取り組みました。&lt;/p&gt;

&lt;p&gt;今後も引き続きコーチングを続けて考え方や方法をアップデートしていこうと思います。コーチングについて経験豊富な先輩方、アドバイス等あれば是非&lt;a href=&quot;https://twitter.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;までご連絡ください。&lt;/p&gt;</content><author><name></name></author><summary type="html">ここ最近、マネジメントの一貫として「1ヶ月間コーチング」に取り組んでいます。クライアント(コーチング相手になってくれる方)と1ヶ月間じっくりコミュニケーションをとって、目標の見直しから実現まで様々な段階に付き添わせてもらいました。</summary></entry><entry><title type="html">テックリードになる前後にやっていたこと</title><link href="https://aloerina01.github.io/blog/2019-04-15-1" rel="alternate" type="text/html" title="テックリードになる前後にやっていたこと" /><published>2019-04-15T00:00:00+00:00</published><updated>2019-04-15T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2019-04-15-1">&lt;p&gt;主業務で関わっているプロダクトにおいて、2018年中頃あたりからフロントエンドのテックリードを担当していました。今はチームマネジメントに重きを置きつつ、次のテックリードにバトン渡しをしている段階です。&lt;/p&gt;

&lt;p&gt;テックリードになる前後でどんなことを考えていたのか、どんなことをしていたのかをふと振り返ってみたのでメモを残します。&lt;/p&gt;

&lt;h3 id=&quot;環境前提条件&quot;&gt;環境・前提条件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;プロダクトについて
    &lt;ul&gt;
      &lt;li&gt;5年以上続いているプロダクト&lt;/li&gt;
      &lt;li&gt;フロントエンドエンジニアが触るリポジトリが4つ&lt;/li&gt;
      &lt;li&gt;bundleされるjsが複数あり、フレームワークや設計が全部違う
        &lt;ul&gt;
          &lt;li&gt;Vue・React・内製フレームワークを利用&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;プロジェクトについて
    &lt;ul&gt;
      &lt;li&gt;プロジェクトメンバー増加中(40〜50人)&lt;/li&gt;
      &lt;li&gt;伴って、調整ごとが多い(仕様、スコープ、スケジュール等)&lt;/li&gt;
      &lt;li&gt;伴って、開発フロー等の見直しが必要な状況&lt;/li&gt;
      &lt;li&gt;プランニング→デザイン→サーバ開発→フロント開発→QA→リリース&lt;br /&gt;
というウォーターフォール風の開発フロー&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;フロントエンドのチームについて
    &lt;ul&gt;
      &lt;li&gt;フロントエンドとバックエンドは分業制&lt;/li&gt;
      &lt;li&gt;フロントエンドチームは4〜6人(増減期だった)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;私について
    &lt;ul&gt;
      &lt;li&gt;当時、社歴1年半くらい&lt;/li&gt;
      &lt;li&gt;当時、プロダクト歴はチームで2番目くらいの長さになった&lt;/li&gt;
      &lt;li&gt;プロダクトのフロントエンドのソースはだいたい触った&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;テックリードになる前に考えていたこと&quot;&gt;テックリードになる前に考えていたこと&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;プロダクト歴が長くなってきたので、一番詳しい人でいよう&lt;/li&gt;
  &lt;li&gt;自分は集中力がなく長時間開発に専念できないので、みんなに代わって会議に出よう&lt;/li&gt;
  &lt;li&gt;自分のスケジュールは当然自分で調整する、ついでにチームメンバーのスケジュールも(必要なら)調整しよう&lt;/li&gt;
  &lt;li&gt;メンバーが増えてきたのでメンテしやすい設計を守っていこう&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;テックリードになる前にやっていたこと&quot;&gt;テックリードになる前にやっていたこと&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;コードレビューをチームに導入する&lt;/li&gt;
  &lt;li&gt;全部のPRに対してコードレビューをする&lt;/li&gt;
  &lt;li&gt;全部の会議に出る&lt;/li&gt;
  &lt;li&gt;プロダクトに関わる他の職種の人といっぱい雑談してつながりを増やす&lt;/li&gt;
  &lt;li&gt;CIのメンテやタスクの管理などの開発以外の業務を積極的に担当する&lt;/li&gt;
  &lt;li&gt;その他雑用を巻き取る&lt;/li&gt;
  &lt;li&gt;チームの稼働率や案件進捗を可視化する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ここまでのまとめ&quot;&gt;ここまでのまとめ&lt;/h3&gt;

&lt;p&gt;思い返してみると、当時はテックリードという名前や役割についてあまり理解していなかったです。エンジニアとして開発業務をする傍ら、ミーティングに出たりスケジュールやスコープの調整をしたりとコミュニケーション業務や雑務をしていた感じです。&lt;/p&gt;

&lt;p&gt;この期間をしばらく経てテックリードという言葉を知り、自分の次のステップだと意識したことを覚えています。マネージャーとの1on1でテックリード目指す旨を伝え、社内では「Development Leader」という呼び名であることを教えてもらいました。&lt;/p&gt;

&lt;p&gt;テックリードを意識したあとも業務内容はあまり変わらなかったのですが、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;コードの品質&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;チームの生産性&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;アーキテクチャ・設計&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を守ることについて殊更意識するようになりました。同時に、「チームの状態」をマネージャーやステークホルダーに見せることも自分の仕事と認識するようになり、状況共有や可視化をし始めた記憶があります。&lt;/p&gt;

&lt;p&gt;あと忘れてはならないことは、好き勝手やっていた自分をチームメンバーが受け入れてくれたことです。誰かが何かを提案したときに「とりあえずやってみよう」と言ってくれるチームメンバーには感謝が尽きません。&lt;/p&gt;

&lt;h3 id=&quot;テックリードになってからやったこと&quot;&gt;テックリードになってからやったこと&lt;/h3&gt;

&lt;p&gt;テックリードのような役割を明確に任されるようになった後は、それまで以上にチームの技術力を底上げすることを意識しました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コードレビュー会を開催してみんなの視点・観点を共有し合う&lt;/li&gt;
  &lt;li&gt;大きな案件やチャレンジングな案件をメンバーに任せる&lt;/li&gt;
  &lt;li&gt;任せた案件のサポート・相談役を担う&lt;/li&gt;
  &lt;li&gt;チームを割り込み作業から守る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当時はチームメンバーがいかに快適に開発できるか、開発に専念できるか、ばかり考えていたと思います。大きな開発案件を担当することが減ったので手持ち無沙汰に感じる場面もありましたが、その時間を使って開発フローや環境の改善に取り組めたりしたので、けっこう充実していました。&lt;/p&gt;

&lt;p&gt;ただ、それまで以上にコミュニケーションハブとしての責任が大きくなり、その方法で悩んだり反省したりといったことも多かった時期でもありました。&lt;/p&gt;

&lt;h3 id=&quot;テックリードになっても考えなかったことおまけ&quot;&gt;テックリードになっても考えなかったこと(おまけ)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;チームメンバーのキャリアなどのマネジメント&lt;/li&gt;
  &lt;li&gt;プロダクトの売上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この頃は「いちエンジニアとしてやれることならやる」というスタンスで、マネジメント業務には抵抗感を持っていました(マネジメント業務が何かもわかっていませんでしたが…)。また、チームのアウトプット量を増やすことは意識していたものの、それがどれほど売上にインパクトを与えるかまでは考えていませんでした。&lt;/p&gt;

&lt;p&gt;これらを考えなかったことの善し悪しは別として、「これはやりたくない・興味がない」と勝手に線引して視野を狭めていたことは反省点のひとつです。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;まとめると、テックリードになる前後でやってたことは大幅には変わりませんでしたが、意識していたことは徐々に移り変わっていた、という感じでした。そのうちマネジメントになる前後のことも棚卸ししてみたいと思います。&lt;/p&gt;</content><author><name></name></author><summary type="html">主業務で関わっているプロダクトにおいて、2018年中頃あたりからフロントエンドのテックリードを担当していました。今はチームマネジメントに重きを置きつつ、次のテックリードにバトン渡しをしている段階です。</summary></entry><entry><title type="html">React+Fluxアプリケーションにpropsバケツリレーは必要か</title><link href="https://aloerina01.github.io/blog/2019-04-02-1" rel="alternate" type="text/html" title="React+Fluxアプリケーションにpropsバケツリレーは必要か" /><published>2019-04-02T00:00:00+00:00</published><updated>2019-04-02T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2019-04-02-1">&lt;p&gt;React+Fluxアプリケーションのメンテをしている中で「&lt;strong&gt;propsのバケツリレーを減らすためにContainerを増やしてもよいか？&lt;/strong&gt;」というディスカッションになったので、考察をまとめてみます。&lt;/p&gt;

&lt;h3 id=&quot;いまの設計の確認&quot;&gt;いまの設計の確認&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;FluxUtilsフレームワークを利用している&lt;/li&gt;
  &lt;li&gt;複数のStoreを持つ&lt;/li&gt;
  &lt;li&gt;ComponentTreeのRootをContainerとし、StoreのStateを受け取る&lt;/li&gt;
  &lt;li&gt;Tree状に配置された各Componentにはprops経由で状態を受け渡す&lt;/li&gt;
  &lt;li&gt;各Componentはローカルステートを持つことができる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみに、ここで言うFluxの定義については「&lt;a href=&quot;/blog/2018-09-14-1&quot; target=&quot;_blank&quot;&gt;React+Fluxで正しく設計するためのFlux見直しガイド&lt;/a&gt;」にてまとめています。&lt;/p&gt;

&lt;h3 id=&quot;propsのバケツリレーと単一containerとは&quot;&gt;propsのバケツリレーと単一Containerとは？&lt;/h3&gt;
&lt;p&gt;Reactアプリケーションでしばしばある「&lt;strong&gt;ComponentTreeのRootでアプリケーション全体のStateを受け取り、それを何階層もの子Componentにprops経由で受け渡していく&lt;/strong&gt;」という設計を、ここでは&lt;strong&gt;単一Container&lt;/strong&gt;と&lt;strong&gt;propsのバケツリレー&lt;/strong&gt;と呼んでいます。&lt;/p&gt;

&lt;p&gt;これらの手法をなんとなくお作法だと思いこんでいましたが、本当にそうなのでしょうか？ もっと良い設計があるのではないか、というのがディスカッションの種でした。&lt;/p&gt;

&lt;h3 id=&quot;propsのバケツリレーの生い立ちを想像してみる&quot;&gt;propsのバケツリレーの生い立ちを想像してみる&lt;/h3&gt;

&lt;p&gt;ざっくり言うと、ReactはComoponentを「propsを受け取り、それに応じた描画を返すもの」と定義しています。そしてComponentをTree状に並べることで画面を構成する仕組みです。&lt;br /&gt;
これらをつなげると「Treeの上から下へ何階層もpropsを受け渡していく」ということになりそうです。連鎖的に「Treeの一番上でStoreからStateを受け取って」が枕詞になり、次第にReactの典型的な形となっていったのかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;公式ドキュメントの見解&quot;&gt;公式ドキュメントの見解&lt;/h3&gt;

&lt;h5 id=&quot;react&quot;&gt;React&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;In a typical React application, data is passed top-down (parent to child) via props&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;propsによる状態の受け渡しを「典型的」とは言っているものの、推奨している記述は見つかりませんでした。&lt;/p&gt;

&lt;h5 id=&quot;flux&quot;&gt;Flux&lt;/h5&gt;

&lt;p&gt;単一Containerとすることを推奨する記述はみつからず、むしろ「Containers」と複数形で表現されていました。&lt;/p&gt;

&lt;h5 id=&quot;redux&quot;&gt;Redux&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most of the components we’ll write will be presentational, but we’ll need to generate a few container components to connect them to the Redux store. This and the design brief below do not imply container components must be near the top of the component tree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;「いくつかのContainerをつくる」「TreeのRoot近くにContainerを置く義務はない」との記述がありました。&lt;/p&gt;

&lt;p&gt;まとめると、執筆時点の公式ドキュメントを見る限り、どれをとってもpropsのバケツリレーや単一Containerを推奨する記述はありませんでした。&lt;br /&gt;
ReduxはStateをひとつのオブジェクトとして扱うので、もしかしたらそれを受け取るContainerもひとつなのではと思いましたが、そんなことありませんでした。&lt;/p&gt;

&lt;h3 id=&quot;私の見解-最適解を探すこと&quot;&gt;私の見解 最適解を探すこと&lt;/h3&gt;

&lt;p&gt;ここまでの内容から思いつくことを箇条書きしてみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;単一Containerや、壮大なpropsバケツリレーは必須ではない&lt;/li&gt;
  &lt;li&gt;ただ、アプリケーションの性質によってはそれらを使って実装しても問題ない&lt;/li&gt;
  &lt;li&gt;「典型的」であることは、構造を理解しやすい利点もある&lt;/li&gt;
  &lt;li&gt;単一Containerには「Storeアクセスを1箇所にまとめる」利点もある&lt;/li&gt;
  &lt;li&gt;単一Containerを使わなくても「Container Component」と「Presentation Component」を分離した設計は実現できる&lt;/li&gt;
  &lt;li&gt;単一Containerを使わなければ、個々のComponent毎でデータ取得から描画までの一連の処理を完結させられる&lt;/li&gt;
  &lt;li&gt;既にある設計を覆す場合は、どうやって新しい設計に置き換えていくかのマイルストーンとセットで考えたい&lt;/li&gt;
  &lt;li&gt;一部分だけ別の設計にすると混乱の元なので、全部変更しないか全部変えるかの二択で考えたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一言で言えば、単一Containerやpropsバケツリレーにもメリットはあるので、&lt;strong&gt;良し悪しではなくあらゆる手法の中でどれが最適かを考えていきたい&lt;/strong&gt;ということに尽きますね。&lt;/p&gt;

&lt;h3 id=&quot;その他の見解-テスタビリティから考える&quot;&gt;その他の見解 テスタビリティから考える&lt;/h3&gt;

&lt;p&gt;ディスカッションの中で出た面白い着眼点に「&lt;strong&gt;どちらがテストを書きやすいか&lt;/strong&gt;」というものがありました。&lt;/p&gt;

&lt;p&gt;単一Containerであれば、上述の通りStoreにアクセスするロジックを1箇所にまとめられます。その結果、RootComponentは&lt;strong&gt;Storeアクセスに関するテスト&lt;/strong&gt;を、それ以外のComponentは&lt;strong&gt;UIに関するテスト&lt;/strong&gt;を書くことに専念できそうです。&lt;/p&gt;

&lt;p&gt;逆に各ComponentをContainerとしStoreアクセスから描画までの一連の処理をComponentに閉じ込めれば、Component間の依存度が下がり、独立したComponentとして&lt;strong&gt;各々が必要な機能のテスト&lt;/strong&gt;を書けそうです。&lt;/p&gt;

&lt;p&gt;どちらがテストを書きやすいかは一概には言えず、アプリケーションの性質に依存しそうです。たとえばキュレーションサイトのような情報を表示することに特化したアプリケーションであれば、前者のほうがマッチするかもしれません。管理画面のようにユーザの入力とStoreの状態を結びつけることが多いアプリケーションであれば、後者のほうがメリットが大きくなりそうですね。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;アプリケーションの性質によってComponentの役割の与え方が代わり、それによりどういった設計やテストが必要かなどが変わってくる&lt;/strong&gt;ということですね。&lt;/p&gt;

&lt;p&gt;まとめとしてタイトルの「propsバケツリレーは必要か」に回答するなら、「必要か否かの二元論ではなく、&lt;strong&gt;アプリケーションの性質次第では役立つ場面もある&lt;/strong&gt;」ということでしょう。曖昧な結論になってしまいましたが、単一Containerやpropsバケツリレーという手法の良し悪しだけに着目するのではなく、アプリケーションの性質を踏まえて考えると見え方が変わってくるというお話でした。&lt;/p&gt;

&lt;p&gt;現場からは以上です。&lt;/p&gt;</content><author><name></name></author><summary type="html">React+Fluxアプリケーションのメンテをしている中で「propsのバケツリレーを減らすためにContainerを増やしてもよいか？」というディスカッションになったので、考察をまとめてみます。</summary></entry><entry><title type="html">小さなアウトプットを100日続けてみた感想</title><link href="https://aloerina01.github.io/blog/2019-03-22-1" rel="alternate" type="text/html" title="小さなアウトプットを100日続けてみた感想" /><published>2019-03-22T00:00:00+00:00</published><updated>2019-03-22T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2019-03-22-1">&lt;h3 id=&quot;やったこと&quot;&gt;やったこと&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1日ひとつだけ強くなる&lt;/strong&gt;のコンセプトのもと、&lt;a href=&quot;https://github.com/aloerina01/til&quot; target=&quot;_blank&quot;&gt;aloerina01/til (Today I Learned)&lt;/a&gt; というリポジトリをつくり、その日学んだことを1つコミットするソロ活動。&lt;/p&gt;

&lt;h3 id=&quot;モチベーション&quot;&gt;モチベーション&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;インプットに対してアウトプットが圧倒的に少ない状況を改善したい&lt;/li&gt;
  &lt;li&gt;アウトプット量を継続的に増やし、その状態に体を慣れさせたい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;感想&quot;&gt;感想&lt;/h3&gt;

&lt;h4 id=&quot;継続できそうなことを探すことから&quot;&gt;継続できそうなことを探すことから&lt;/h4&gt;
&lt;p&gt;飽き性な自分がどうやったらアウトプットを継続できるかと考えた結果、「できるだけ毎日違うジャンルのアウトプットをできる運用にする」ことを最優先事項としました。加えて「気になったことを調べる、考える」ことは無意識にほぼ毎日やっていたので、これを活かしたい気持ちがありました。&lt;/p&gt;

&lt;p&gt;これらをかけ合わせた実践手段が、&lt;strong&gt;TIL(Today I Learned)&lt;/strong&gt; です。&lt;br /&gt;
細かいことは決めず、「何か読んだり考えたりしたらそのログをIssueに残す」「ブログに書くほどじゃないネタを雑にIssueにまとめる」「ちょっとした実装を日付毎のディレクトリにCommitする」といったことをラフにやっていこう、という感覚でスタートしました。かなりハードルを低くして始めたことが継続につながったように感じます。&lt;/p&gt;

&lt;h4 id=&quot;目的は果たせた&quot;&gt;目的は果たせた？&lt;/h4&gt;

&lt;p&gt;言語化によるアウトプットはかなり習慣付いたので、目的は果たせた感覚です。また、なんとなくモヤモヤっと考えたことの多くがTILに書き残されるようになったことで、&lt;strong&gt;過去の自分と向き合える、過去の自分に相談できる&lt;/strong&gt;、という副次的な効果もありました。実は目的達成したことよりも、この副次的効果が一番価値のある成果だと感じています。&lt;/p&gt;

&lt;p&gt;次はコードでアウトプットするところを目指したいですが、プライベートで毎日コードを書き続けるモチベーションは今のところないので、しばらくはTILを続けていこうと思います。&lt;/p&gt;

&lt;h4 id=&quot;新たな課題の発見&quot;&gt;新たな課題の発見&lt;/h4&gt;

&lt;p&gt;言語化は習慣付いたのですが、TILの内容は&lt;strong&gt;他人には読ませられないレベル&lt;/strong&gt;です。話し言葉をそのまま文字起こした程度の文章で、&lt;strong&gt;アウトプット速度は早い&lt;/strong&gt;のですが、日本語がハチャメチャだったりまとまりが無かったりしています。&lt;br /&gt;
対してブログを書くときは、慎重に言葉を選び、何度も論理構造を組み換え、推敲して、&lt;strong&gt;人に読んでもらえるレベル(？)&lt;/strong&gt;の文章を&lt;strong&gt;時間をかけて&lt;/strong&gt;つくっています。&lt;/p&gt;

&lt;p&gt;つまり、間をとった&lt;strong&gt;ギリギリ人に見せられるレベルの文章を短時間で&lt;/strong&gt;書くことができないんですね。言い換えると、人に見せてフィードバックをもらえるレベルのアウトプットを短時間でできない、ということです。今はまだ対策を練っていないのですが、近い将来この課題もやっつけていこうと思います。&lt;/p&gt;

&lt;h4 id=&quot;1日ひとつだけ強くなる&quot;&gt;1日ひとつだけ強くなる&lt;/h4&gt;

&lt;p&gt;これはとあるプロゲーマーの方の言葉ですが、TILの日本語訳にピッタリな言葉だと思います。とはいえやっぱり1人で続けるのは結構大変なので、「自分もTILやってみるよ！」という方は&lt;a href=&quot;https://twitter.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;までご一報ください！励みになります！&lt;/p&gt;</content><author><name></name></author><summary type="html">やったこと</summary></entry><entry><title type="html">「モブプログラミング・ベストプラクティス」読んだのでモブプロの魅力と始め方をまとめる</title><link href="https://aloerina01.github.io/blog/2019-03-12-1" rel="alternate" type="text/html" title="「モブプログラミング・ベストプラクティス」読んだのでモブプロの魅力と始め方をまとめる" /><published>2019-03-12T00:00:00+00:00</published><updated>2019-03-12T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2019-03-12-1">&lt;p&gt;私のチームは週の数時間をモブプログラミングに割り当てています。楽しみながら開発でき、しかも開発フローにまつわる悩みが解消されてとても良い感じです。&lt;/p&gt;

&lt;p&gt;ただ、始めから上手くできたわけではなくて悩みもいろいろありました。その解決の糸口となったのが「&lt;a href=&quot;https://www.amazon.co.jp/dp/4822289648&quot; target=&quot;_blank&quot;&gt;モブプログラミング・ベストプラクティス&lt;/a&gt;」でした。&lt;/p&gt;

&lt;p&gt;そこで今回はこの本の内容と感想、そして体験談をまとめつつ、モブプロを始めてみようと思う人・始めてみたばかりの人にモブプロの魅力を伝えてみようと思います！ レッツモビング！&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#モブまたはモブプログラミングとは&quot; id=&quot;markdown-toc-モブまたはモブプログラミングとは&quot;&gt;モブまたはモブプログラミングとは？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#なぜモブプロをするの&quot; id=&quot;markdown-toc-なぜモブプロをするの&quot;&gt;なぜモブプロをするの？&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#リソース効率とフロー効率の違い&quot; id=&quot;markdown-toc-リソース効率とフロー効率の違い&quot;&gt;リソース効率とフロー効率の違い&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#フロー効率を良くしていくためのモブとは&quot; id=&quot;markdown-toc-フロー効率を良くしていくためのモブとは&quot;&gt;フロー効率を良くしていくためのモブとは&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#モブプロの始め方&quot; id=&quot;markdown-toc-モブプロの始め方&quot;&gt;モブプロの始め方&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#モブプロの準備&quot; id=&quot;markdown-toc-モブプロの準備&quot;&gt;モブプロの準備&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#モブプロの登場人物と役割&quot; id=&quot;markdown-toc-モブプロの登場人物と役割&quot;&gt;モブプロの登場人物と役割&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#モブプロの進行&quot; id=&quot;markdown-toc-モブプロの進行&quot;&gt;モブプロの進行&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#モブプロの心がけ&quot; id=&quot;markdown-toc-モブプロの心がけ&quot;&gt;モブプロの心がけ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#モブプロの成果の測り方&quot; id=&quot;markdown-toc-モブプロの成果の測り方&quot;&gt;モブプロの成果の測り方&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#よくある悩み&quot; id=&quot;markdown-toc-よくある悩み&quot;&gt;よくある悩み&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#エキスパートがいる場合にうまく進行するには&quot; id=&quot;markdown-toc-エキスパートがいる場合にうまく進行するには&quot;&gt;エキスパートがいる場合にうまく進行するには？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#新人や知識のない人がいる場合にうまく進行するには&quot; id=&quot;markdown-toc-新人や知識のない人がいる場合にうまく進行するには&quot;&gt;新人や知識のない人がいる場合にうまく進行するには？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#手探りで進めていく案件の場合にうまく進行するには&quot; id=&quot;markdown-toc-手探りで進めていく案件の場合にうまく進行するには&quot;&gt;手探りで進めていく案件の場合にうまく進行するには？&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#アンチパターン&quot; id=&quot;markdown-toc-アンチパターン&quot;&gt;アンチパターン&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#その他のモブのアンチパターン&quot; id=&quot;markdown-toc-その他のモブのアンチパターン&quot;&gt;「その他のモブ」のアンチパターン&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#タイピストのアンチパターン&quot; id=&quot;markdown-toc-タイピストのアンチパターン&quot;&gt;「タイピスト」のアンチパターン&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ハッピーモビング&quot; id=&quot;markdown-toc-ハッピーモビング&quot;&gt;ハッピーモビング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;モブまたはモブプログラミングとは&quot;&gt;モブまたはモブプログラミングとは？&lt;/h3&gt;
&lt;p&gt;本の中の言葉を借りるなら「チームで一緒に働く」ことがモブです。チームで一緒にひとつの開発をすれば、それはモブプログラミングです。&lt;/p&gt;

&lt;p&gt;……こう考えて取り組むようにしたら、肩の荷がおりた感覚があったことを覚えています。チームメンバーにモブプロをしようと提案した手前うまくモブプロしていかねばと気を張っていましたが、やり方・進め方も含めてチームで一緒に決めていこうと気持ちを持ち直した記憶があります。&lt;/p&gt;

&lt;h3 id=&quot;なぜモブプロをするの&quot;&gt;なぜモブプロをするの？&lt;/h3&gt;
&lt;p&gt;モブプロの良さは&lt;strong&gt;フロー効率の良さ&lt;/strong&gt;にあります。なので一緒にモブプロをしてもらうメンバーには、フロー効率とは何なのかを理解してもらい、フロー効率を良くしていこうという共通認識を持ってもらうと良さそうです。&lt;/p&gt;

&lt;h4 id=&quot;リソース効率とフロー効率の違い&quot;&gt;リソース効率とフロー効率の違い&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;リソース効率とは「リソースの空きがいかに少ないか」&lt;/strong&gt;です。チームメンバー全員が休みなく働いている状態、つまり稼働率100％の状態だと、リソース効率が良いといえます。&lt;/p&gt;

&lt;p&gt;対して&lt;strong&gt;フロー効率とは「着手からリリースまでの時間(リードタイム)がいかに短いか」&lt;/strong&gt;です。フローとは「流れていること」を指しているので、どの期間を切り取っても常にアウトプットがなされている状態だと、つまり案件が短い期間でリリースを繰り返せている状態だと、フロー効率が良いといえます。&lt;/p&gt;

&lt;p&gt;リソース効率を追求した考え方では「どれくらい多くの機能を詰め込めるか」と考え、フロー効率を追求した考え方では「どれくらい細かく刻めるか」と考える傾向があります。後者は変化に強く、アジャイルな考え方にも通じるわけですね。&lt;/p&gt;

&lt;h4 id=&quot;フロー効率を良くしていくためのモブとは&quot;&gt;フロー効率を良くしていくためのモブとは&lt;/h4&gt;
&lt;p&gt;モブはフロー効率が良い手法です。それがわかる側面として&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;全員で課題に取り組むのでスペシャリストは生まれず、ゼネラリストが生まれる。結果的にキーパーソンへの依存度が下がり、一人が欠けたときの影響が下が少ない&lt;/li&gt;
  &lt;li&gt;全員で課題に取り組むので、スキルや考え方や知見を共有し合う機会が多く、各々のスキルアップが早い&lt;/li&gt;
  &lt;li&gt;集団で取り組むことで判断がより良くなり、品質の大きな欠陥が減る。ちなみに優秀な一人より3人の集団のほうが良い決断ができることが科学的に検証済み&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったことが挙げられます。&lt;/p&gt;

&lt;p&gt;つまり複数人でひとつの案件や課題に取り組むモブプロは、長期に渡って保守・改善していくプロダクト開発などのフロー効率を良くしていきたい現場でのGood Practice(のひとつ)というわけです。&lt;/p&gt;

&lt;h3 id=&quot;モブプロの始め方&quot;&gt;モブプロの始め方&lt;/h3&gt;
&lt;h4 id=&quot;モブプロの準備&quot;&gt;モブプロの準備&lt;/h4&gt;

&lt;p&gt;モブプロを始めるにはいくつか準備が必要です。なんせ複数人が同時に、そして快適に仕事する必要があるので、それなりの準備をしておかないとですね。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;参加者が窮屈に感じず、平等にモニターが見える空間、会議室&lt;/li&gt;
  &lt;li&gt;モブの進行や決めごと、TODOなどを書き出せるホワイトボード&lt;/li&gt;
  &lt;li&gt;モブ用マシン(タイピストの交代でのロスを少なくするのが目的なので、なくてもOK)&lt;/li&gt;
  &lt;li&gt;参加者全員にとって馴染みのあるエディタ&lt;/li&gt;
  &lt;li&gt;モブタイマー(できればサブディスプレイなどを用意して常に見える状態にしておく)
    &lt;ul&gt;
      &lt;li&gt;Agility の Mobbing &amp;amp; Retrospective Timer&lt;/li&gt;
      &lt;li&gt;Pluralsight の Mob Timer 等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;本には書いてなかったけど、おやつ&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;モブプロの登場人物と役割&quot;&gt;モブプロの登場人物と役割&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;タイピスト&lt;/strong&gt;(ドライバー)
    &lt;ul&gt;
      &lt;li&gt;キーボードを触る唯一の人&lt;/li&gt;
      &lt;li&gt;10分などのサイクルで交代し、原則全員がタイピストになるように回す&lt;/li&gt;
      &lt;li&gt;その他のモブがしてくれと頼んだことを&lt;strong&gt;理解する&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;指示が理解できないときはわかるまで&lt;strong&gt;質問する&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;頼まれたことをコードとして&lt;strong&gt;実装する&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;その他のモブを信頼し、自分ではしないような実装も&lt;strong&gt;躊躇せず試す&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;その他のモブ&lt;/strong&gt;(ナビゲーター)
    &lt;ul&gt;
      &lt;li&gt;キーボードを触らない人。2〜5人くらいがおすすめ&lt;/li&gt;
      &lt;li&gt;問題解決につながる次の論理的ステップを見つけるために&lt;strong&gt;協力する&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;理解できるまで&lt;strong&gt;質問する&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;モブ全体の理解の水準を上げるために&lt;strong&gt;貢献する&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;眼の前の問題に&lt;strong&gt;集中する&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;他のメンバーの意見に&lt;strong&gt;傾聴する&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;システムの中に改善すべき部分を&lt;strong&gt;探す&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;モブプロの進行&quot;&gt;モブプロの進行&lt;/h4&gt;
&lt;p&gt;トライアルに向いている2時間半のモブプロの例を挙げます。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;準備(30分)
    &lt;ul&gt;
      &lt;li&gt;モブプロの意義の説明&lt;/li&gt;
      &lt;li&gt;モブプロの役割分担の説明&lt;/li&gt;
      &lt;li&gt;モブで解決する問題の概要の説明&lt;/li&gt;
      &lt;li&gt;タイピストの順番決め(ランダムでも可)&lt;/li&gt;
      &lt;li&gt;おやつの配布&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;モビングインターバル(1.5時間程度)
    &lt;ul&gt;
      &lt;li&gt;10分〜20分毎にタイピストを交代していく&lt;/li&gt;
      &lt;li&gt;途中で休憩をはさんでもOK&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ふりかえり(20分)
    &lt;ul&gt;
      &lt;li&gt;事実をもとに成果を振り返る&lt;/li&gt;
      &lt;li&gt;肯定的意見、否定的意見を集める&lt;/li&gt;
      &lt;li&gt;軌道修正するべきことを決める(次回試す)&lt;/li&gt;
      &lt;li&gt;必要に応じて、今後も継続していくか決める(どちらでも可なら継続しましょう！)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;モブプロの心がけ&quot;&gt;モブプロの心がけ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;自分がしないような他のメンバーのアプローチを受け入れましょう！ それをコードにし検証することにも意義があります&lt;/li&gt;
  &lt;li&gt;対立的にならないようにしましょう！ モブは「わたしたち」で行うもの。主語は「わたし」や「あなた」ではなく、常に「わたしたち」を意識しましょう&lt;/li&gt;
  &lt;li&gt;人ではなくコードを批判しましょう！ 負債に対しても、それを実装した人ではなく実装せざるを得なかった状況と向き合いましょう&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;モブプロの成果の測り方&quot;&gt;モブプロの成果の測り方&lt;/h3&gt;

&lt;p&gt;モブプロの成果がひと目で判断できる基準はなくて、計測が難しいのが実情です。ただ、明確にやってはいけないのは「短期間のアウトプット量で成果を測ること」です。先述の通り、フロー効率の考え方は「いかにリードタイムを短くリリースを繰り返せるか」であり、「1度のリリースにいかに詰め込めるか」ではないからですね。&lt;/p&gt;

&lt;p&gt;とはいえ、何かしらの方法で効果測定する必要がありますよね。ですので、いくつか影響のある指標を挙げてみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;リードタイム&lt;/li&gt;
  &lt;li&gt;マージコンフリクトの解消にかかる時間&lt;/li&gt;
  &lt;li&gt;本番システムに入り込むバグの量&lt;/li&gt;
  &lt;li&gt;経験の浅いメンバーの学習度&lt;/li&gt;
  &lt;li&gt;レビュー時間、レビューの待ち時間&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらを総合的に見て、成果の有無を判断するのがオススメです。&lt;/p&gt;

&lt;h3 id=&quot;よくある悩み&quot;&gt;よくある悩み&lt;/h3&gt;

&lt;h4 id=&quot;エキスパートがいる場合にうまく進行するには&quot;&gt;エキスパートがいる場合にうまく進行するには？&lt;/h4&gt;

&lt;p&gt;エキスパート(ベテランエンジニア)がいること自体は問題ではないですが、以下のような副作用に注意する必要があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;エキスパートがタイピストのとき、エキスパートが一人で作業を進めてその他のモブが眺める(従う)だけになってしまう&lt;/li&gt;
  &lt;li&gt;エキスパートがその他のモブのとき、エキスパートのみが発言する状況になってしまう&lt;/li&gt;
  &lt;li&gt;上記のような状態が続き、エキスパートでない人が発言しにくく感じてしまう&lt;/li&gt;
  &lt;li&gt;エキスパートがその他のモブに教えるばっかりの状態になってしまい、それをエキスパートがストレスに感じてしまう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こうならないためのひとつの方法として、「エキスパートにモブプロのファシリテーターになってもらう」というのがあります。エキスパートは例外的に常にその他のモブになってもらい、メンバーに質問や発言を促したり、メンバーが理解できていない箇所をフォローして回ったり、といった役割を担ってもらう方法です。&lt;/p&gt;

&lt;p&gt;モブプロは短期的に開発物を仕上げる手法ではないので、「モブプロがうまく進行しエキスパートの暗黙知がチームに浸透すること」をエキスパートの目標にしてもらうよう事前に説得しておくことも大切です。&lt;/p&gt;

&lt;h4 id=&quot;新人や知識のない人がいる場合にうまく進行するには&quot;&gt;新人や知識のない人がいる場合にうまく進行するには？&lt;/h4&gt;

&lt;p&gt;モブプロには、ドメイン知識の有無はあまり関係ありません。新人さんも巻き込んで一緒にモブプロをしましょう！&lt;/p&gt;

&lt;p&gt;オススメの進め方は、&lt;strong&gt;ドメイン知識が少ない人にタイピストになってもらう&lt;/strong&gt;方法です。
タイピストの役割に「理解する」と「質問する」があったように、分からないことがあったときに手を止め、質問し、自分の(そして場の)理解を深めるよう導くことでチームに貢献することができます。&lt;/p&gt;

&lt;p&gt;そして、タイピストやその他のモブが質問しやすい環境を保つことが、各メンバーの責務となります。&lt;/p&gt;

&lt;h4 id=&quot;手探りで進めていく案件の場合にうまく進行するには&quot;&gt;手探りで進めていく案件の場合にうまく進行するには？&lt;/h4&gt;

&lt;p&gt;誰も試したことがなく、どこから手を付けてよいかわからない状況になり得る課題に取り組む場合、「個々で調べる時間」「個々で考える時間」が必要なケースがあります。その場合は&lt;strong&gt;時間を区切ってモブを中断しその場で各々が作業&lt;/strong&gt;するのもOKです。本の中では「タイムボックス付きの探究」と呼んでいました。定めた時間が経過したら成果を共有しあい、モブプロを再開しましょう。&lt;/p&gt;

&lt;h3 id=&quot;アンチパターン&quot;&gt;アンチパターン&lt;/h3&gt;

&lt;h4 id=&quot;その他のモブのアンチパターン&quot;&gt;「その他のモブ」のアンチパターン&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;まだコードで表現されていないことを議論すること。同様に、タイピストがまだコードで表現されていないことについて質問すること。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;コードで表現されていない状態では「検証」ができないのと、その他のモブ全員が同水準で状況理解できない可能性があります。なのでまずタイピストへコードで表現することを依頼し、それを見ながら議論するようにしましょう。そうすることで議論が理論的なものから実践的なものに変わっていきます。&lt;/p&gt;

&lt;p&gt;もしコードで表現したいアイデアが複数出てしまい、タイピストにどれを依頼するか迷ったときは、&lt;strong&gt;一番単純なもの(はやく検証できるもの)を採用する&lt;/strong&gt;と良さそうです。そうすることで「コードを見ながら議論する」というモブプロの土俵に上がれます。&lt;/p&gt;

&lt;h4 id=&quot;タイピストのアンチパターン&quot;&gt;「タイピスト」のアンチパターン&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;こっそり自分のコードを書き込むこと。または勝手に自分の意志で進めること。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;キーボードに触れる人は、誰よりも自由に自分の考えを&lt;strong&gt;暗黙的に&lt;/strong&gt;コードに反映できます。それをやってしまうと、上のアンチパターン同様にその他のモブ全員が同水準で状況理解できなくなります。&lt;/p&gt;

&lt;p&gt;もしタイピストがアイデアを持っている場合は、自分がその他のモブの番になるのを待つか、その場でタイピストを交代する等し。その他のモブに回ってからアイデアを出すようにすると良さそうです。&lt;/p&gt;

&lt;h3 id=&quot;ハッピーモビング&quot;&gt;ハッピーモビング&lt;/h3&gt;

&lt;p&gt;「モブプログラミング・ベストプラクティス」にはモブプロの初心者・中級者が従うべきプロセスがまとめてあります。プロセスに従ったほうがスムーズに進むケースが多いと思われますが、ルールを守ることが絶対ではない、とも書かれていました。&lt;/p&gt;

&lt;p&gt;振り返りを通じてチーム全員でモブプロを改善しながら、チームに合ったモブライフを送っていきたいですね！ ハッピーモビング！&lt;/p&gt;</content><author><name></name></author><summary type="html">私のチームは週の数時間をモブプログラミングに割り当てています。楽しみながら開発でき、しかも開発フローにまつわる悩みが解消されてとても良い感じです。</summary></entry><entry><title type="html">シェルスクリプト入門者のためのチェックリスト</title><link href="https://aloerina01.github.io/blog/2018-12-27-1" rel="alternate" type="text/html" title="シェルスクリプト入門者のためのチェックリスト" /><published>2018-12-27T00:00:00+00:00</published><updated>2018-12-27T00:00:00+00:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-12-27-1">&lt;p&gt;シェルスクリプトはWebアプリケーションの開発において必須スキルというわけではないのかもしれませんが、ビルドやデプロイのスクリプトを書くときに結構役立ったりします。ただ、たまにしか書かないこともありなかなか入門レベルから上達せず、適切なスクリプトが書けているか不安になることがあります。&lt;/p&gt;

&lt;p&gt;そんなときに頼りにしているのがGoogle製の&lt;strong&gt;&lt;a href=&quot;https://google.github.io/styleguide/shell.xml&quot; target=&quot;_blank&quot;&gt;Shell Style Guide&lt;/a&gt;&lt;/strong&gt;(以下「ガイド」)です。とりあえず最低限のお作法としてこれに従いつつ、要所要所をアレンジして使っています。&lt;/p&gt;

&lt;p&gt;今回は中でも特に気をつけている部分をピックアップしてチェック表代わりにしてみようと思います。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#どのshellを使うか&quot; id=&quot;markdown-toc-どのshellを使うか&quot;&gt;どのshellを使うか&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#いつshellを使うか&quot; id=&quot;markdown-toc-いつshellを使うか&quot;&gt;いつshellを使うか&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#拡張子&quot; id=&quot;markdown-toc-拡張子&quot;&gt;拡張子&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#エラーメッセージ&quot; id=&quot;markdown-toc-エラーメッセージ&quot;&gt;エラーメッセージ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#フォーマット&quot; id=&quot;markdown-toc-フォーマット&quot;&gt;フォーマット&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#変数展開&quot; id=&quot;markdown-toc-変数展開&quot;&gt;変数展開&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#コマンド置換&quot; id=&quot;markdown-toc-コマンド置換&quot;&gt;コマンド置換&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#test--&quot; id=&quot;markdown-toc-test--&quot;&gt;test, [, [[&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#empty-check&quot; id=&quot;markdown-toc-empty-check&quot;&gt;empty check&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ファイル名のワイルドカード&quot; id=&quot;markdown-toc-ファイル名のワイルドカード&quot;&gt;ファイル名のワイルドカード&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#whileとパイプライン&quot; id=&quot;markdown-toc-whileとパイプライン&quot;&gt;whileとパイプライン&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#命名規則&quot; id=&quot;markdown-toc-命名規則&quot;&gt;命名規則&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#関数&quot; id=&quot;markdown-toc-関数&quot;&gt;関数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;どのshellを使うか&quot;&gt;どのshellを使うか&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;原則bashを使う。shebangは&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/code&gt;とする&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;特段な理由がなければbashを利用するようにします。日頃使っているコマンドの中には、実はPOSIX準拠ではなくbash等で拡張されたものも存在します。そういったことを意識せずに済むようにbashでの実行を前提としています。&lt;/p&gt;

&lt;p&gt;私の場合、用意したスクリプトを手元で実行することもあればCIから実行することもあります。よく使うCiecleCIは、仮想環境のOSがubuntuなのでデフォルトのshellがdashです。shebangを&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/code&gt;としていると、手元で動いたスクリプトがCI上では動かない…なんてことになり兼ねないので、bashでの実行を原則としています。&lt;/p&gt;

&lt;h3 id=&quot;いつshellを使うか&quot;&gt;いつshellを使うか&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;小さなツール・ユーティリティとして使う&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;拡張子&quot;&gt;拡張子&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;直接実行可能なものは拡張子をつけない&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ライブラリとしてのスクリプトは拡張子必須&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;直接実行する場面では「どの言語で書かれているか」を意識する必要がないためです。逆にライブラリとして利用する場面では、実装言語を意識する必要がありますよね。「直接実行可能か」をひと目で判断しやすくするためにも拡張子の有無に気を配るようにしています。&lt;/p&gt;

&lt;h3 id=&quot;エラーメッセージ&quot;&gt;エラーメッセージ&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;全てのエラーメッセージはSTDERR(標準エラー出力)へ書き出す&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通常の状態とエラー状態を識別しやすくするためですね。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;err&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +&lt;span class=&quot;s1&quot;&gt;'%Y-%m-%dT%H:%M:%S%z'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp;2
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; do_something&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;err &lt;span class=&quot;s2&quot;&gt;&quot;Unable to do_something&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;E_DID_NOTHING&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;リダイレクト&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;とファイルディスクリプタ&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;2&lt;/code&gt;を使ってSTDERRに出力するサンプルコードです。&lt;/p&gt;

&lt;h3 id=&quot;フォーマット&quot;&gt;フォーマット&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;インデントはスペース2つ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1行は80文字まで&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;パイプラインが3つ以上続くときは改行する&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ループ文やif文では、同じ行に&lt;code class=&quot;highlighter-rouge&quot;&gt;; do&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;; then&lt;/code&gt;を書く&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;case文では、改行して&lt;code class=&quot;highlighter-rouge&quot;&gt;;;&lt;/code&gt;を書く&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特にこだわりはないのでガイドに従います。&lt;/p&gt;

&lt;h3 id=&quot;変数展開&quot;&gt;変数展開&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;$var&quot;&lt;/code&gt;より&lt;code class=&quot;highlighter-rouge&quot;&gt;${var}&lt;/code&gt;を使う&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ガイドには「既存の実装に揃えることを優先すること」とも記載されていますが、既存の実装がないのでこのルールに従っています。&lt;/p&gt;

&lt;h3 id=&quot;コマンド置換&quot;&gt;コマンド置換&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;`command`&lt;/code&gt;より&lt;code class=&quot;highlighter-rouge&quot;&gt;$(command)&lt;/code&gt;を使う&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(command)&lt;/code&gt;は入れ子にできる利点があります。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This is preferred:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;command1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This is not:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;command1&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;test--&quot;&gt;test, [, [[&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[[ ... ]]&lt;/code&gt;を利用する&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[[ ... ]]&lt;/code&gt;はPOSIX準拠ではないので注意が必要ですが、testコマンド等に比べて機能が拡張されています。とくに変数展開に関する問題が減るので、原則利用するようにしています。&lt;/p&gt;

&lt;h3 id=&quot;empty-check&quot;&gt;empty check&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;極力&lt;code class=&quot;highlighter-rouge&quot;&gt;-z&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt;を利用する&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;空文字列のチェックなどのempty checkをするときは&lt;code class=&quot;highlighter-rouge&quot;&gt;-z&lt;/code&gt;(zero)や&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt;(non-zero)を利用します。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my_var&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;do_something
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ファイル名のワイルドカード&quot;&gt;ファイル名のワイルドカード&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ワイルドカードを利用するときは&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;ではなく&lt;code class=&quot;highlighter-rouge&quot;&gt;./*&lt;/code&gt;とする&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ワイルドカードを利用するときはpathを明示します。ミスを防ぐことと可読性を高めることが目的だと思います。&lt;/p&gt;

&lt;h3 id=&quot;whileとパイプライン&quot;&gt;whileとパイプライン&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;パイプでwhileにつなぐ代わりに、forループまたはプロセス置換を使う&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;whileを使うと暗黙的にsubshell(子プロセス)が生成されます。その結果、子プロセスから親プロセスの変数にアクセスできなかったり、何か問題が起きたときに追跡しにくくなったりします。&lt;/p&gt;

&lt;p&gt;以下のコードは、subshellから親の変数にアクセスできない例です。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;last_line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'NULL'&lt;/span&gt;
your_command | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;line&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;last_line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 親で定義したlast_lineへアクセスできない&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;last_line&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# そのため親のlast_lineは更新されておらず、'NULL'が出力される&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;forループでの代替例です。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;c&quot;&gt;# Only do this if there are no spaces in return values.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;value &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;your_command&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;total+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;次にプロセス置換の例です。プロセス置換もsubshellを使いますが、whileと違い明示的であるため幾分か良いです。ちなみにプロセス置換はPOSIX準拠ではありませんのでご注意を。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;last_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;count filename&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;total+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;last_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;your_command | &lt;span class=&quot;nb&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;命名規則&quot;&gt;命名規則&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;変数やファイル名はスネークケース&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;定数や環境変数は大文字のスネークケース&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;定数や環境変数はファイル冒頭で定義し、&lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;declare&lt;/code&gt;する&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;関数内で使う変数は&lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt;をつける&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;定数や環境変数などのグローバル変数はファイルの冒頭で定義します。グローバル変数は広い範囲で利用され得るためバリデーションを実装し、定数の場合はreadonlyとします。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;zip_version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;--status&lt;/span&gt; zip | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Version: | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zip_version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;error_message
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;readonly &lt;/span&gt;zip_version
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;関数&quot;&gt;関数&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;スネークケースで書く&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;パッケージの関数は&lt;code class=&quot;highlighter-rouge&quot;&gt;::&lt;/code&gt;で区切る&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Single function&lt;/span&gt;
my_func&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  ...
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Part of a package&lt;/span&gt;
mypackage::my_func&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  ...
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;関数はグローバル変数の下に定義し、呼び出し箇所と宣言箇所を混ぜないようにします。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;以上になります。&lt;br /&gt;
間違っている箇所やもっといい案がありましたらお気軽に&lt;a href=&quot;https://twitter.com/aloerina_&quot; target=&quot;_blank&quot;&gt;@aloerina_&lt;/a&gt;までご連絡ください。&lt;/p&gt;</content><author><name></name></author><summary type="html">シェルスクリプトはWebアプリケーションの開発において必須スキルというわけではないのかもしれませんが、ビルドやデプロイのスクリプトを書くときに結構役立ったりします。ただ、たまにしか書かないこともありなかなか入門レベルから上達せず、適切なスクリプトが書けているか不安になることがあります。</summary></entry></feed>