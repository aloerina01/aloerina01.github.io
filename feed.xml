<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://aloerina01.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aloerina01.github.io/" rel="alternate" type="text/html" /><updated>2018-03-19T17:37:04+09:00</updated><id>https://aloerina01.github.io/</id><title type="html">mille-feuille code</title><subtitle>Web Developer。同じような過ちを繰り返さないように備忘録を残しています。
</subtitle><entry><title type="html">Babelの設定を見直すための逆引きガイド</title><link href="https://aloerina01.github.io/javascript/babel/2018/03/19/1.html" rel="alternate" type="text/html" title="Babelの設定を見直すための逆引きガイド" /><published>2018-03-19T00:00:00+09:00</published><updated>2018-03-19T00:00:00+09:00</updated><id>https://aloerina01.github.io/javascript/babel/2018/03/19/1</id><content type="html" xml:base="https://aloerina01.github.io/javascript/babel/2018/03/19/1.html">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#babelって結局なんなんだ&quot; id=&quot;markdown-toc-babelって結局なんなんだ&quot;&gt;Babelって結局なんなんだ&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#定義&quot; id=&quot;markdown-toc-定義&quot;&gt;定義&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#構成要素&quot; id=&quot;markdown-toc-構成要素&quot;&gt;構成要素&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#babel-core&quot; id=&quot;markdown-toc-babel-core&quot;&gt;babel-core&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#babel-polyfill&quot; id=&quot;markdown-toc-babel-polyfill&quot;&gt;babel-polyfill&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#plugins&quot; id=&quot;markdown-toc-plugins&quot;&gt;Plugins&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最新の記法でjsを書くにはどうしたらいいんだ&quot; id=&quot;markdown-toc-最新の記法でjsを書くにはどうしたらいいんだ&quot;&gt;最新の記法でJSを書くにはどうしたらいいんだ&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#最低限の設定方法&quot; id=&quot;markdown-toc-最低限の設定方法&quot;&gt;最低限の設定方法&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-installする&quot; id=&quot;markdown-toc-1-installする&quot;&gt;1. Installする&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-babelrcに設定を書く&quot; id=&quot;markdown-toc-2-babelrcに設定を書く&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;に設定を書く&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3-polyfillをrequireする&quot; id=&quot;markdown-toc-3-polyfillをrequireする&quot;&gt;3. polyfillをrequireする&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-babeるbabelでコンパイルする&quot; id=&quot;markdown-toc-4-babeるbabelでコンパイルする&quot;&gt;4. Babeる(Babelでコンパイルする)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#webpackと組み合わせた実践例&quot; id=&quot;markdown-toc-webpackと組み合わせた実践例&quot;&gt;Webpackと組み合わせた実践例&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#キホンのキ&quot; id=&quot;markdown-toc-キホンのキ&quot;&gt;キホンのキ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#polyfillの機能を制限なく使いたいでも無駄なものは入れたくない&quot; id=&quot;markdown-toc-polyfillの機能を制限なく使いたいでも無駄なものは入れたくない&quot;&gt;polyfillの機能を制限なく使いたい、でも無駄なものは入れたくない&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#二重読み込み制約のリスクを背負わずにpolyfillを使いたい&quot; id=&quot;markdown-toc-二重読み込み制約のリスクを背負わずにpolyfillを使いたい&quot;&gt;「二重読み込み制約」のリスクを背負わずにpolyfillを使いたい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#グローバルを汚染せずにpolyfillを使いたい複数ファイルでpolyfillを使いたい&quot; id=&quot;markdown-toc-グローバルを汚染せずにpolyfillを使いたい複数ファイルでpolyfillを使いたい&quot;&gt;グローバルを汚染せずにpolyfillを使いたい、複数ファイルでpolyfillを使いたい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#早見表&quot; id=&quot;markdown-toc-早見表&quot;&gt;早見表&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#細かい機能を上手く使いこなしたい&quot; id=&quot;markdown-toc-細かい機能を上手く使いこなしたい&quot;&gt;細かい機能を上手く使いこなしたい&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#設定はショートハンドで書けるよ&quot; id=&quot;markdown-toc-設定はショートハンドで書けるよ&quot;&gt;設定はショートハンドで書けるよ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#babel-preset-esxxxx-はいくつを使えばいいんだ&quot; id=&quot;markdown-toc-babel-preset-esxxxx-はいくつを使えばいいんだ&quot;&gt;babel-preset-esXXXX はいくつを使えばいいんだ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#es2015のソースをそのままminifyできるってよ&quot; id=&quot;markdown-toc-es2015のソースをそのままminifyできるってよ&quot;&gt;ES2015+のソースをそのままminifyできるってよ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;babelって結局なんなんだ&quot;&gt;Babelって結局なんなんだ&lt;/h3&gt;

&lt;h4 id=&quot;定義&quot;&gt;定義&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Babel is a JavaScript compiler.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と、公式にでっかく書いてありますね。&lt;/p&gt;

&lt;p&gt;さらにドキュメントを読み進めていくと、&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Now, out of the box Babel doesn’t do anything. It basically acts like const babel = code =&amp;gt; code;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書いてあります。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;基本は受け取ったコードをそのまま吐き出すだけ、どう変換させるかは設定次第ということですね。つまり&lt;strong&gt;設定に応じてJavaScriptをコンパイルしてくれるもの&lt;/strong&gt;というのがBabelの定義のようです。  (正確にはトランスパイルだろと言いたいところですが、この記事では公式にならってコンパイルと表現します)&lt;/p&gt;

&lt;h4 id=&quot;構成要素&quot;&gt;構成要素&lt;/h4&gt;
&lt;p&gt;ドキュメントを見る限りBabelは大きく3要素から成ります。&lt;/p&gt;

&lt;h5 id=&quot;babel-core&quot;&gt;babel-core&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;コンパイル処理を行うBabelの本体&lt;/strong&gt;です。&lt;/p&gt;

&lt;h5 id=&quot;babel-polyfill&quot;&gt;babel-polyfill&lt;/h5&gt;
&lt;p&gt;Babelが用意してくれているpolyfill集で、&lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core-js&lt;/a&gt; と &lt;a href=&quot;https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js&quot;&gt;regenerator runtime&lt;/a&gt; を内包しています。これら2つはそれぞれ独立した(Bebelとは関係ない外部の)poryfill集です。&lt;br /&gt;
要は&lt;strong&gt;世の中のイケてるporyfillをまとめて提供してくれるものがbabel-polyfillだ&lt;/strong&gt;という認識でいいと思います。&lt;/p&gt;

&lt;h5 id=&quot;plugins&quot;&gt;Plugins&lt;/h5&gt;
&lt;p&gt;「設定に応じてJavaScriptをコンパイルしてくれるもの」の「設定に応じて」の部分を担当するのがpluginです。&lt;strong&gt;「どうコンパイルするか」を定義している&lt;/strong&gt;もので、よく見かける&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-es2015&lt;/code&gt;などがこれに該当します。&lt;/p&gt;

&lt;p&gt;※ 正確には、複数のpluginを特定の用途に合わせてセットにしたものが「babel-preset-xxxx」です。よくつかうplugin集をpresetとして提供してくれているわけです。&lt;/p&gt;

&lt;h3 id=&quot;最新の記法でjsを書くにはどうしたらいいんだ&quot;&gt;最新の記法でJSを書くにはどうしたらいいんだ&lt;/h3&gt;
&lt;p&gt;Babelのドキュメントを読んだ結果感じたことはこれでした。結局どうすりゃいいんだと。&lt;/p&gt;

&lt;p&gt;ここでおさらいしておきます。&lt;br /&gt;
最新の記法でJSを書く際には、ES2015〜で登場した&lt;strong&gt;新しい文法&lt;/strong&gt;と&lt;strong&gt;新しい関数&lt;/strong&gt;を使うことになります。前者はアロー関数やクラス記法などで、後者は&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.find&lt;/code&gt;などです。&lt;/p&gt;

&lt;p&gt;「最新の記法でJSを書く」＝「この2つを含むソースをBabelでコンパイルする」 ということになりますね。それには以下の2つのことが必要です。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-env&lt;/code&gt;などのplugin・presetを使って新しい文法をコンパイルできるようにする&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;などのpolyfillを入れて新しい関数が動くようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;最低限の設定方法&quot;&gt;最低限の設定方法&lt;/h4&gt;
&lt;p&gt;ここまでの内容をCLIで実行するための最低限の手順は以下のようになります。&lt;/p&gt;

&lt;h5 id=&quot;1-installする&quot;&gt;1. Installする&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D babel-cli babel-preset-env 
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -S babel-polyfill
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2-babelrcに設定を書く&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;に設定を書く&lt;/h5&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;3-polyfillをrequireする&quot;&gt;3. polyfillをrequireする&lt;/h5&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// input.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'babel-polyfill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 以下実装&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;4-babeるbabelでコンパイルする&quot;&gt;4. Babeる(Babelでコンパイルする)&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npx babel ./input.js -o ./output.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これが基本の使い方です。これを応用して、JSXをコンパイルさせたかったら&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-react&lt;/code&gt;を利用したり、bundleさせたかったらWebpackなどのツールと組み合わせたり…といったカスタマイズをしていく感じになると思います。&lt;/p&gt;

&lt;h3 id=&quot;webpackと組み合わせた実践例&quot;&gt;Webpackと組み合わせた実践例&lt;/h3&gt;

&lt;p&gt;ここからは「ES02015+の記法で書いたJSをWebpackでbundleする」というよくあるパターンの実践例です。&lt;/p&gt;

&lt;h4 id=&quot;キホンのキ&quot;&gt;キホンのキ&lt;/h4&gt;
&lt;p&gt;まず基礎ですが、WebpackでBabelを使うには&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-loader&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-core&lt;/code&gt;を読み込みますよね。&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-loader&lt;/code&gt;はWebpackに「受け取ったコードをBabeってね」と指示を出すもので、指示に基づいて実際にBabeるのが&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-core&lt;/code&gt;、という感じです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D babel-loader babel-core
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/node_modules/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;pluginの適用は上記の「最低限の設定」と同様に&lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;に書きます。polyfillの適用の仕方は3通りあるので、やりたいことベースで整理します。&lt;/p&gt;

&lt;h4 id=&quot;polyfillの機能を制限なく使いたいでも無駄なものは入れたくない&quot;&gt;polyfillの機能を制限なく使いたい、でも無駄なものは入れたくない&lt;/h4&gt;
&lt;p&gt;polyfillの対象となる機能には3つのタイプがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;globals&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;など新しいグローバルオブジェクト&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;native methods&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign&lt;/code&gt;などの既存のグローバルオブジェクトに追加されたメソッド&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;instance methods&lt;/strong&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.find&lt;/code&gt;などのインスタンスが持つメソッド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらすべてを使うには&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;をbundleに含める&lt;/strong&gt;ことが必要です。それには&lt;strong&gt;entry pointとなるファイルの1行目&lt;/strong&gt;で&lt;strong&gt;1度だけ&lt;/strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;を読み込みます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// CommonJS&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'babel-polyfill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ES6&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-polyfill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;「1度だけ」というのがとても重要で、&lt;strong&gt;複数回読み込むとpolyfillがぶっ壊れます&lt;/strong&gt;。あるHTMLで2つのjsファイルを読み込んでいて、それぞれで&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;を読み込んでいる場合もぶっ壊れます。とにかく2回読み込まれたらマズイのです。&lt;/p&gt;

&lt;p&gt;この&lt;strong&gt;二重読み込み制約&lt;/strong&gt;にさえ気をつけていれば、この方法ですべてのpolyfillを利用することができます。加えて、&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-env&lt;/code&gt;と組み合わせて利用する場合は、&lt;a href=&quot;https://babeljs.io/docs/plugins/preset-env/#usebuiltins&quot;&gt;useBuiltIns&lt;/a&gt;オプションを設定することで&lt;strong&gt;全部入りの&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;を、必要なpolyfill(該当する&lt;code class=&quot;highlighter-rouge&quot;&gt;core-js&lt;/code&gt;のモジュール)のみに変換してくれます&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.babelrc&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;useBuiltIns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;app.js (entry point)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Babeる前&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-polyfill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Babeった後 使っているものだけimportするように変換される&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'core-js/modules/es7.string.pad-start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'core-js/modules/es7.string.pad-end'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;まとめ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;⭕：全polyfillを利用できる、必要な分だけ入れられる&lt;br /&gt;
❌：二重読み込み制約のリスクがある、グローバルが汚染される&lt;/p&gt;

&lt;h4 id=&quot;二重読み込み制約のリスクを背負わずにpolyfillを使いたい&quot;&gt;「二重読み込み制約」のリスクを背負わずにpolyfillを使いたい&lt;/h4&gt;
&lt;p&gt;WebpackとBabelを組み合わせる場合、二重読み込み制約のリスクを回避する方法があります。それはソース内でbabel-polyfillを読み込むのではなく、bundle時に&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;を結合する方法です。以下のように設定します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babel-polyfill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./app.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ただし、この方法は上述の&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltIns&lt;/code&gt;オプションが効かなくなるので注意です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;まとめ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;⭕：二重読み込みのリスクがない、全polyfillを利用できる&lt;br /&gt;
❌：&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltIns&lt;/code&gt;オプションが効かない、グローバルが汚染される&lt;/p&gt;

&lt;h4 id=&quot;グローバルを汚染せずにpolyfillを使いたい複数ファイルでpolyfillを使いたい&quot;&gt;グローバルを汚染せずにpolyfillを使いたい、複数ファイルでpolyfillを使いたい&lt;/h4&gt;
&lt;p&gt;ライブラリを実装する場合などでグローバルを汚染せずにES2015+の関数を利用したいときは、&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transform-runtime&lt;/code&gt;&lt;/strong&gt;pluginを使います。また、ひとつのアプリケーションで複数のJSファイルを読み込む場合など、polyfill読込が重複してしまうのを避けたいときにも&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transform-runtime&lt;/code&gt;&lt;/strong&gt;pluginが使えます。&lt;/p&gt;

&lt;p&gt;これは&lt;strong&gt;ES2015+の関数を、&lt;code class=&quot;highlighter-rouge&quot;&gt;core-js&lt;/code&gt;のエイリアスである&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-runtime&lt;/code&gt;モジュールで書き換える&lt;/strong&gt;ものです。本来polyfillとは「そのままでは動かないコードを補うためのコード」を埋め込むものなので、対象コードそのものを書き換えてしまう&lt;code class=&quot;highlighter-rouge&quot;&gt;trunsform-runtime&lt;/code&gt;は正確にはpolyfillとは呼べないですが、おかげで上述の利点を得られるわけです。&lt;/p&gt;

&lt;p&gt;そして、ここまでで勘の良い方はお気づきかもですが、&lt;strong&gt;instance methodsを利用できない&lt;/strong&gt;という制約がつきます。&lt;/p&gt;

&lt;p&gt;設定するには、変換処理を行う&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-plugin-transform-runtime&lt;/code&gt;と、&lt;code class=&quot;highlighter-rouge&quot;&gt;core-js&lt;/code&gt;のエイリアスである&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-runtime&lt;/code&gt;を npm install します。後者はソースに含まれることになるので&lt;code class=&quot;highlighter-rouge&quot;&gt;--save&lt;/code&gt;オプションで。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D babel-plugin-transform-runtime
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -S babel-runtime
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;.babelrc&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform-runtime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;まとめ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;⭕：グローバルを汚染しない、使うものだけ置き換えられる&lt;br /&gt;
❌：インスタンスメソッドは使えない&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://babeljs.io/docs/plugins/transform-runtime&quot;&gt;Runtime transform · Babel&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;早見表&quot;&gt;早見表&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;メリット&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;デメリット&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;require babel-polyfill&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;全polyfillを利用できる&lt;br /&gt; 必要な分だけ入れられる&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;二重読み込みのリスクがある&lt;br /&gt; グローバルが汚染される&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;webpackで結合&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;二重読み込みのリスクがない&lt;br /&gt; 全polyfillを利用できる&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;useBuiltInsが効かない&lt;br /&gt; グローバルが汚染される&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;runtime transform&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;グローバルを汚染しない&lt;br /&gt; 必要な分だけ変換される&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;インスタンスメソッドのpolyfillは利用できない&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;細かい機能を上手く使いこなしたい&quot;&gt;細かい機能を上手く使いこなしたい&lt;/h3&gt;

&lt;h4 id=&quot;設定はショートハンドで書けるよ&quot;&gt;設定はショートハンドで書けるよ&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-hoge&lt;/code&gt;を npm install しているのに、設定ファイルには&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;presets&quot;: [ &quot;hoge&quot; ]&lt;/code&gt;って書くから分かりにくいな…と思ってました。これは&lt;strong&gt;presetとpluginは&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-plugin-&lt;/code&gt;の部分を省略&lt;/strong&gt;して書くことができる故でした。&lt;br /&gt;
なので&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;presets&quot;: [ &quot;babel-preset-hoge&quot; ]&lt;/code&gt;と書いてもOK。ちなみにパッケージスコープの場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;presets&quot;: [&quot;@org/hoge&quot;]&lt;/code&gt;という感じ。&lt;/p&gt;

&lt;h4 id=&quot;babel-preset-esxxxx-はいくつを使えばいいんだ&quot;&gt;babel-preset-esXXXX はいくつを使えばいいんだ&lt;/h4&gt;
&lt;p&gt;過去に書いたbabelrcを見てみたら&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-es2015&lt;/code&gt;を入れていることがほとんどだったのですが、ES2016、ES2017と仕様が増えている現在では&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-env&lt;/code&gt;を入れておくのがベターのようです。&lt;/p&gt;

&lt;p&gt;これは何のオプションもなしで利用すると&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-latest&lt;/code&gt;と同じように機能し、設定次第で&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-es2015&lt;/code&gt;と同様の動きをさせることもできます。&lt;/p&gt;

&lt;p&gt;また、上述した&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltIns&lt;/code&gt;のような便利なオプションを使うことができる利点があります。個人的にありがたいと思っているのが&lt;strong&gt;&lt;a href=&quot;https://babeljs.io/docs/plugins/preset-env/#targets&quot;&gt;targets&lt;/a&gt;&lt;/strong&gt;オプションです。ブラウザやNodeのバージョンを指定できるオプションで、指定されたバージョンに必要なpolyfillのみを入れてくれるようになります。&lt;/p&gt;

&lt;p&gt;参考： &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-env/#options&quot;&gt;Env preset # Options&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;es2015のソースをそのままminifyできるってよ&quot;&gt;ES2015+のソースをそのままminifyできるってよ&lt;/h4&gt;
&lt;p&gt;これはBabelの公式ブログ読んでて見つけて得た程度の知識なのですが、「古いブラウザで動かす必要がないならそのまま圧縮すれば？」ということで&lt;strong&gt;&lt;a href=&quot;https://babeljs.io/blog/2016/08/30/babili&quot;&gt;Babili(babel-minify)&lt;/a&gt;&lt;/strong&gt;というものがあるそうです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D babel-core babel-loader babel-preset-babili
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;.babelrc&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babili&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;uglify-esでサポートされていない構文であっても圧縮可能なので、その点は利がありそうです。ただ執筆時点(2018/03/19)ではBeta版ということもあって、個人的にはまだ使うことはなさそうです。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;今までなんとなくの理解だった部分が整理されたおかげで、今後新しいプロジェクトを立ち上げるときに迷わなくて済みそうです。よかった。&lt;/p&gt;

&lt;p&gt;それと公式ドキュメントがけっこう説明不足感が強くて、しかも日本語の資料もそんなに見当たらなくて整理に苦労したので、同じ苦労を誰かがせずに済むといいなと思います。
間違っているところを見つけた方は&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;までご一報ください。&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">トラブルシューティングメモを晒してみる webpack動的module編</title><link href="https://aloerina01.github.io/javascript/webpack/2017/11/08/1.html" rel="alternate" type="text/html" title="トラブルシューティングメモを晒してみる  webpack動的module編" /><published>2017-11-08T00:00:00+09:00</published><updated>2017-11-08T00:00:00+09:00</updated><id>https://aloerina01.github.io/javascript/webpack/2017/11/08/1</id><content type="html" xml:base="https://aloerina01.github.io/javascript/webpack/2017/11/08/1.html">&lt;h3 id=&quot;まえがき&quot;&gt;まえがき&lt;/h3&gt;

&lt;p&gt;PCのリニューアルにつき、旧PCのローカルに残ってたメモやらブログ用下書きの整理をしていたら、かつて自分がハマったトラブルの対応時のメモが発掘されました。読み返してみたら懐かしい気持ちになれたり、当時考えていたことが思い出せたりといいことが多かったので、晒してみようと思います。&lt;/p&gt;

&lt;p&gt;ちなみにメモのタイトルには『&lt;strong&gt;webpackで動的module解決しようとして死にかけた&lt;/strong&gt;』と書いてありました。&lt;/p&gt;

&lt;p&gt;※ 2017年上旬に残したメモなので、内容に古い箇所があったり引用文とリンク先の文章にズレがあったりする可能性があります。&lt;/p&gt;

&lt;h3 id=&quot;メモ内容&quot;&gt;メモ内容&lt;/h3&gt;

&lt;h4 id=&quot;こまったことになったぞ&quot;&gt;こまったことになったぞ&lt;/h4&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 省略&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// modulePathを動的に決定する&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ということをしようとするとエラーになる。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: Cannot find module &quot;.&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;modulePath&lt;/code&gt;が文字列としてちゃんと認識できていないのかと思ったけどそうでもなかった。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 検証1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 同様のエラー&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 検証2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;もしや&lt;code class=&quot;highlighter-rouge&quot;&gt;modulePath&lt;/code&gt;は正規表現じゃないとだめ？　とか血迷ってみた。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/model&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;userlist/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// やはりエラー&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここでようやくwebpackのモジュール解決に起因すると気づく。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keep in mind that import() path cannot be fully dynamic (e.g., import(Math.random())). Rather either completely static (e.g., import(‘./locale/de.json’)) or partially static (e.g., import(‘./locale/’ + language + ‘.json’)).
&lt;a href=&quot;https://webpack.js.org/guides/code-splitting-import/#dynamic-import&quot;&gt;Code Splitting - Using import()&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A context is created if your request contains expressions, so the exact module is not known on compile time.
&lt;a href=&quot;https://webpack.js.org/guides/dependency-management/#require-with-expression&quot;&gt;Dependency Management&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;require-with-expression訳してみるgoogle翻訳&quot;&gt;require with expression　訳してみる(Google翻訳)&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;A context is created if your request contains expressions, so the exact module is not known on compile time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;リクエストに式が含まれている場合、コンテキストが作成されるため、コンパイル時に正確なモジュールが認識されません。&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./template/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.ejs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;webpack parses the require() call and extracts some information:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;webpackはrequire（）呼び出しを解析し、いくつかの情報を抽出します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Directory: ./template
Regular expression: /^.*\.ejs$/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;context-module-ってなんだ&quot;&gt;context module ってなんだ&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;A context module is generated. It contains references to all modules in that directory that can be required with a request matching the regular expression. The context module contains a map which translates requests to module ids.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コンテキストモジュールが生成されます。このディレクトリには、正規表現に一致する要求が必要な、そのディレクトリ内のすべてのモジュールへの参照が含まれています。コンテキストモジュールには、要求をモジュールIDに変換するマップが含まれています。&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;./table.ejs&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;./table-row.ejs&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;./directory/folder.ejs&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The context module also contains some runtime logic to access the map.&lt;/p&gt;

  &lt;p&gt;This means dynamic requires are supported but will cause all possible modules to be included in the bundle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コンテキストモジュールには、マップにアクセスするためのランタイムロジックも含まれています。 これは動的要件がサポートされているが、すべての可能なモジュールがバンドルに含まれることを意味します。&lt;/p&gt;

&lt;h4 id=&quot;context-module-api&quot;&gt;context module API&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;A context module exports a (require) function that takes one argument: the request.
The exported function has 3 properties: resolve, keys, id.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コンテキストモジュールは、1つの引数（request）を受け取る（require）関数をエクスポートします。 エクスポートされた関数には、resolve、keys、idという3つのプロパティがあります。&lt;/p&gt;

&lt;h4 id=&quot;突如解決する&quot;&gt;突如解決する&lt;/h4&gt;

&lt;p&gt;webpack1のドキュメントにこんな文章を見つける。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the module source contains a require that cannot be statically analyzed, the context is the current directory.
In this case a Critical dependencies warning is emitted. You need to use the ContextReplacementPlugin in most cases.
Examples: someFn(require) require.bind(null)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;静的解決できない&lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;がソースに含まれている場合、そのときのcontextはカレントディレクトリとなる。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ← modulePathがカレントからの相対パスでないとダメ…？&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;実はモジュールパス解決をしたくて&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;に手を入れていた。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 省略&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.js'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// root: [ path.resolve('./js') ], // webpack 1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// webpack 2&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/node_modules'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path.resolve&lt;/code&gt;で指定したディレクトリをルートとした相対パスで書けるようにしていた(つもりだった)が、実際はカレントディレクトリからのパスが必要だった。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 動いた&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;更になんか見つける&quot;&gt;更になんか見つける&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/configuration/module/#module-contexts&quot;&gt;Module&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These options describe the default settings for the context created when a dynamic dependency is encountered.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これらのオプションは、動的依存関係が発生したときに作成されるコンテキストのデフォルト設定を記述します。&lt;/p&gt;

&lt;p&gt;どうやら今回のように動的依存解決が発生している場合の「デフォルト」が内部的に指定されている模様。そしてそれを書き換えるプラグインもある模様(ただしDeprecated)。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;exprContextCritical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;exprContextRecursive&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;exprContextRegExp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;exprContextRequest&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;unknownContextCritical&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;unknownContextRecursive&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;unknownContextRegExp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;unknownContextRequest&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// ←エラーの文言で見覚えあるぞ！！！&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;wrappedContextCritical&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;wrappedContextRecursive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;wrappedContextRegExp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: You can use the ContextReplacementPlugin to modify these values for individual dependencies. This also removes the warning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ContextReplacementPluginを使用して、個々の依存関係のこれらの値を変更できます。これにより、警告も削除されます。&lt;/p&gt;

&lt;p&gt;ふむふむ🤔&lt;br /&gt;
とりあえず動いてよかった。&lt;/p&gt;</content><author><name></name></author><summary type="html">まえがき</summary></entry><entry><title type="html">Vue+VuexでMVVMなWebApplicationを設計するときに考えたいこと</title><link href="https://aloerina01.github.io/javascript/vue/2017/08/29/1.html" rel="alternate" type="text/html" title="Vue+VuexでMVVMなWebApplicationを設計するときに考えたいこと" /><published>2017-08-29T00:00:00+09:00</published><updated>2017-08-29T00:00:00+09:00</updated><id>https://aloerina01.github.io/javascript/vue/2017/08/29/1</id><content type="html" xml:base="https://aloerina01.github.io/javascript/vue/2017/08/29/1.html">&lt;h3 id=&quot;まえがき&quot;&gt;まえがき&lt;/h3&gt;

&lt;p&gt;ここ最近、Vueを使って実装されたWebアプリが随分と増えてきたように感じます。自分も何度となく実装してきました。すごく小さなデモを作るときにも使えるし、中規模以上のWebアプリを作るときにも使えるし、扱いやすいライブラリでとても好きです。&lt;/p&gt;

&lt;p&gt;ある程度の規模になってくると「複数の画面でデータを共有したい」「こっちのComponentの状態をあっちのComponentに伝えたい」といったような問題にぶち当たり、アーキテクチャを導入することでそれらを解決するというのもお馴染みな感じです。特にVueでは&lt;strong&gt;双方向データバインディング&lt;/strong&gt;の特性上、&lt;strong&gt;MVVMアーキテクチャ&lt;/strong&gt;が使われることが多いと思います。&lt;/p&gt;

&lt;p&gt;今回は、VueでMVVMを実現する際に起き得る設計上の問題について、現時点での私の解決方針をまとめてみました😌&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#まえがき&quot; id=&quot;markdown-toc-まえがき&quot;&gt;まえがき&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vuemvvmとはどんなものか&quot; id=&quot;markdown-toc-vuemvvmとはどんなものか&quot;&gt;Vue+MVVMとはどんなものか&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#一般的なmvvmを理解する&quot; id=&quot;markdown-toc-一般的なmvvmを理解する&quot;&gt;一般的なMVVMを理解する&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#view&quot; id=&quot;markdown-toc-view&quot;&gt;View&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#viewmodel&quot; id=&quot;markdown-toc-viewmodel&quot;&gt;ViewModel&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#model&quot; id=&quot;markdown-toc-model&quot;&gt;Model&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#vueで実現するmvvmはここが違う&quot; id=&quot;markdown-toc-vueで実現するmvvmはここが違う&quot;&gt;Vueで実現するMVVMはここが違う&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#どのようにcomponentを分けるか&quot; id=&quot;markdown-toc-どのようにcomponentを分けるか&quot;&gt;どのようにComponentを分けるか&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#component切り分けのルール&quot; id=&quot;markdown-toc-component切り分けのルール&quot;&gt;Component切り分けのルール&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#componentの分類&quot; id=&quot;markdown-toc-componentの分類&quot;&gt;Componentの分類&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-完全自己完結型&quot; id=&quot;markdown-toc-1-完全自己完結型&quot;&gt;1. 完全自己完結型&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-半自己完結型&quot; id=&quot;markdown-toc-2-半自己完結型&quot;&gt;2. 半自己完結型&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3-ループアイテム型&quot; id=&quot;markdown-toc-3-ループアイテム型&quot;&gt;3. ループアイテム型&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#modelはどうあるべきか&quot; id=&quot;markdown-toc-modelはどうあるべきか&quot;&gt;Modelはどうあるべきか&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vuexをどのように利用すべきか&quot; id=&quot;markdown-toc-vuexをどのように利用すべきか&quot;&gt;Vuexをどのように利用すべきか&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ステート&quot; id=&quot;markdown-toc-ステート&quot;&gt;ステート&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ミューテーションアクション&quot; id=&quot;markdown-toc-ミューテーションアクション&quot;&gt;ミューテーション、アクション&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ゲッター&quot; id=&quot;markdown-toc-ゲッター&quot;&gt;ゲッター&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おまけvuefluxは成立するのか&quot; id=&quot;markdown-toc-おまけvuefluxは成立するのか&quot;&gt;おまけ　Vue+fluxは成立するのか&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#あとがき&quot; id=&quot;markdown-toc-あとがき&quot;&gt;あとがき&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vuemvvmとはどんなものか&quot;&gt;Vue+MVVMとはどんなものか&lt;/h3&gt;

&lt;h4 id=&quot;一般的なmvvmを理解する&quot;&gt;一般的なMVVMを理解する&lt;/h4&gt;

&lt;p&gt;元来WPFやSilverlightで使われていたMVVMの登場人物の役割・依存関係についてさらっと理解しておくと、Vueを使ってMVVMを作るときにも役立ちそうです。&lt;/p&gt;

&lt;h5 id=&quot;view&quot;&gt;View&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;UIテンプレートとUIロジック(コードビハインド)を持つ&lt;/li&gt;
  &lt;li&gt;ViewModelに依存する&lt;/li&gt;
  &lt;li&gt;ある操作を実行するときはViewModelから公開されるCommandを呼び出す&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;viewmodel&quot;&gt;ViewModel&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;PresentationロジックとStateを持つ&lt;/li&gt;
  &lt;li&gt;Modelに依存する&lt;/li&gt;
  &lt;li&gt;Viewから受け取った操作を必要に応じてModelへDispatchする&lt;/li&gt;
  &lt;li&gt;Modelを監視する&lt;/li&gt;
  &lt;li&gt;Viewと双方向データバインディングする&lt;/li&gt;
  &lt;li&gt;Viewに揮発性のあるデータを送るときはMessengerを発行する&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;model&quot;&gt;Model&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;BusinessロジックとDomainを持つ&lt;/li&gt;
  &lt;li&gt;ViewやViewModelに依存しない&lt;/li&gt;
  &lt;li&gt;自身を更新するためのfunctionを公開する&lt;/li&gt;
  &lt;li&gt;自身が更新された場合にはイベントを発火する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-08-29-1-mvvm.png&quot; alt=&quot;MVVM&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;vueで実現するmvvmはここが違う&quot;&gt;Vueで実現するMVVMはここが違う&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;VueComponentはView+ViewModelを表現してくれる&lt;/strong&gt;ので、ViewとViewModelのつなぎ込みを意識することなく実装できます。その代わり、どのようにVueComponentをつくるかを考えないと親子関係が思うようにいかなかったり、データの受け渡しに苦労したりする羽目になります(過去にやらかしました😰)。&lt;/p&gt;

&lt;p&gt;反面、&lt;strong&gt;Modelについての仕組みやルールは提供していません&lt;/strong&gt;。自前で用意するか、Vuexなどの状態管理ライブラリを利用する必要があります。&lt;br /&gt;
ここで本来のMVVMを正しく理解していないとオレオレModelを作ってしまったり(過去にやらかしました👿)、fluxをVueに組み込めると妙な理解をして下手にVuexを導入しデータ管理が闇に包まれたりします(過去にやらかしました😇🔨)&lt;/p&gt;

&lt;p&gt;そんなわけで、VueでMVVMを設計するときは以下のような観点に注意すると良さそうな気がしています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;どのようにComponentを分けるか&lt;/li&gt;
  &lt;li&gt;Modelはどうあるべきか&lt;/li&gt;
  &lt;li&gt;Vuexをどのように利用すべきか&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;どのようにcomponentを分けるか&quot;&gt;どのようにComponentを分けるか&lt;/h3&gt;

&lt;p&gt;Componentを利用することでページを要素に分解でき、影響範囲を分けられたり再利用できたりと嬉しい感じになります。更にComponentは親子関係を持たせ&lt;code class=&quot;highlighter-rouge&quot;&gt;Props&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;Event&lt;/code&gt;を使いデータを受け渡すことができるようになっているため、より構造的にComponentを組み合わせることができます。&lt;/p&gt;

&lt;p&gt;ここで問題なのが、Componentをどの単位で区切るかです。&lt;br /&gt;
本来MVVMでは&lt;strong&gt;ViewはViewModelからデータを受け取るため、View同士(もしくはViewModel同士)でデータを受け渡すことを想定していません&lt;/strong&gt;。そのため、VueComponentならではのComponentによる構造化を、MVVMにどう組み込むかを意識しComponent設計をする必要があります。&lt;/p&gt;

&lt;p&gt;そのため、以下のような&lt;strong&gt;ルールと分類&lt;/strong&gt;をもとにComponentを分けるようにしています。&lt;/p&gt;

&lt;h4 id=&quot;component切り分けのルール&quot;&gt;Component切り分けのルール&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;ComponentはView+ViewModelなので、基本的にはそれ単体でデータのやり取りや振る舞いが完結する&lt;/li&gt;
  &lt;li&gt;親子関係を持ち得るComponentは以下の分類のうちどれに該当するかを明確にし、分類ごとのルールに沿って実装する&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;componentの分類&quot;&gt;Componentの分類&lt;/h4&gt;

&lt;h5 id=&quot;1-完全自己完結型&quot;&gt;1. 完全自己完結型&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;親からは何も受け取らず自身のView+ViewModelで全て完結するもの。propsを受け付けない。&lt;/strong&gt;&lt;br /&gt;
1Page＝1templateだとtemplateが膨れてしまう場合に、要素ごとに分割された結果作られるものがほとんど。そのため再利用されず、ほとんどのケースで「あくまでtemplateを分割しただけのもの」となる。&lt;br /&gt;
TabコンポーネントやScrollViewコンポーネントなどのように、要素をラップする一番外側のコンポーネントである場合もある。&lt;/p&gt;

&lt;h5 id=&quot;2-半自己完結型&quot;&gt;2. 半自己完結型&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;必須パラメータのみを親から受け取り、決まった処理を行う共通パーツ&lt;/strong&gt;。&lt;br /&gt;
Share用URLを受け取って動作するシェアボタンや、メッセージを受け取って表示するアラートダイアログなど。&lt;/p&gt;

&lt;h5 id=&quot;3-ループアイテム型&quot;&gt;3. ループアイテム型&lt;/h5&gt;
&lt;p&gt;ListItemのように&lt;strong&gt;ループされて使うことを前提としているコンポーネント&lt;/strong&gt;。&lt;br /&gt;
ステートレスで親から全ての要素を受け取る。必要なfunctionも親からprops経由で受け取る。ReactComponentと同じ感じ。VueComponentとして実装されるものの役割はViewのみで、ViewModelの役割を持たせない。&lt;/p&gt;

&lt;p&gt;もしかしたら今後分類は増えるかもしれませんが、今のところこれで運用しています。&lt;/p&gt;

&lt;h3 id=&quot;modelはどうあるべきか&quot;&gt;Modelはどうあるべきか&lt;/h3&gt;

&lt;p&gt;APIを叩いてサーバから値を受け取ったり、それを加工してDomainとして保持したり、計算をしたり、Validationをかけたり、アプリケーション全体の状態(State)を管理したりするのがModelの役割です。色々ですね。&lt;br /&gt;
役割は多いのですが、Modelの実装上満たさなければならない&lt;strong&gt;要件は2つ&lt;/strong&gt;です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ViewModelに公開するための、返り値のないModel操作functionを実装する&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Modelの更新をEventとして発火する&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これさえきちんと満たしていればModelとしての役割を果たせるので、VueComponentと組み合わせて正しくMVVMを成立させることができます。Modelを階層化させたり、SingleStateにしたりと工夫をしても問題ありません。ViewやViewModelに依存しないため柔軟に実装できるとも言えるんですかね。&lt;/p&gt;

&lt;p&gt;ただし、&lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt;を実装するのはNGです。MVVMはイベント駆動であるため、&lt;strong&gt;ViewModelがModelの値を知るにはModelを監視し変更を検知する&lt;/strong&gt;という方法をとることがルールとなります。&lt;/p&gt;

&lt;h3 id=&quot;vuexをどのように利用すべきか&quot;&gt;Vuexをどのように利用すべきか&lt;/h3&gt;

&lt;p&gt;Modelは要件さえ満たせばどう工夫しても良いと書いた通り、Modelの部分をVuexを使って実装するのも選択肢のひとつです。SingleStateでWebアプリケーション全体のState管理をしたいときは役立ちますよね。&lt;/p&gt;

&lt;p&gt;また、VuexはVueの中に組み込まれていることを自身が知っているため、VueComponentとのつなぎ込みがスムーズにできる利点があります。とは言えその利点を闇雲に使うとMVVMを破綻させることになり兼ねないので、&lt;strong&gt;ModelとしてVuexを使う&lt;/strong&gt;ことを念頭に置いて、Vuexの基本機能を理解していくといいと思います。&lt;/p&gt;

&lt;h4 id=&quot;ステート&quot;&gt;ステート&lt;/h4&gt;

&lt;p&gt;VuexStoreの値をVueComponentに反映する一番シンプルな方法は&lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;プロパティで待ち受ける方法だと公式に書かれています。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これは内部的には&lt;strong&gt;ViewModel(VueComponent)がModel(VuexStore)を監視し、変更を検知し値を受け取りViewに反映する&lt;/strong&gt;、といったことをやっているのでMVVMをシンプルに実装できています。&lt;/p&gt;

&lt;p&gt;また、公式には&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;コンポーネントはまだローカルステートを持つことができる  
Vuexを使うということは、全ての状態を Vuexの中に置くべき、というわけではありません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書かれています。この点について、個人的にはViewModelが持つべきもの(＝Viewが表示するために使うデータ)をローカルステートに持たせ、Modelが持つべきもの(＝アプリケーションのDomainとしてのデータ)をVuexStoreに持たせるようにしたほうがいいかなと思っています。&lt;/p&gt;

&lt;h4 id=&quot;ミューテーションアクション&quot;&gt;ミューテーション、アクション&lt;/h4&gt;

&lt;p&gt;VuexStoreを更新する唯一の方法として用意されているミューテーション。typeとpayloadを受け取ってstoreを更新するあたり、fluxに似ていると言われる所以なのでしょうか？&lt;/p&gt;

&lt;p&gt;そしてVuexStoreの更新(ミューテーション)を非同期処理に組み込めるアクション。これがModelの要件のひとつである&lt;strong&gt;返り値のないModel操作functionを実装する&lt;/strong&gt;に該当しています。&lt;/p&gt;

&lt;p&gt;つまり、Vuexを使うことでModelの2つの要件を自然に満たせるということになりました。さすが。&lt;/p&gt;

&lt;h4 id=&quot;ゲッター&quot;&gt;ゲッター&lt;/h4&gt;

&lt;p&gt;Modelに&lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt;は書くなというルールがあるはずなのに、Vuexにはゲッターの概念があります。ゲッターについて公式は以下のように言及しています。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;もしこの関数を複数のコンポーネントで利用したくなったら、関数をコピーするか、あるいは関数を共用のヘルパーに切り出して複数の場所でインポートする必要があります。しかし、どちらも理想的とはいえません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまり、VuexStoreの値を加工して使う場合に、加工する処理をあちこちに書いたり、importして使い回したりするのはナンセンスだと言っています。&lt;/p&gt;

&lt;p&gt;本来MVVMにおいて、&lt;strong&gt;Modelから受け取った値をViewで利用する値に加工するのはViewModelの役割&lt;/strong&gt;です。ただし、&lt;strong&gt;複数のViewModelに同じような加工処理が実装されてしまうくらいなら、Model側で用意したほうがいいんじゃない？&lt;/strong&gt; という思想なんですね。&lt;/p&gt;

&lt;p&gt;この扱いには注意が必要だと感じています。&lt;br /&gt;
言われるがままに何でもゲッターに実装してしまうとゲッターが膨れてしまったり、とはいえ結局VueComponentの中でもごにょごにょ加工してて処理がModelとViewModelに散ってしまったりと、暗黒面に落ちることが目に見えています。&lt;/p&gt;

&lt;p&gt;そのため、&lt;strong&gt;ゲッターはVuexStoreの中身をfilterするために使う&lt;/strong&gt;とルール付けています。&lt;br /&gt;
SingleStoreであるためにひとつのModelが大きく、ViewModelが取得するときにはModelの一部のみを受け取れれば十分、というケースで、Modelの値をfilterするためにゲッターを使うというわけです。&lt;/p&gt;

&lt;p&gt;例えば「&lt;code class=&quot;highlighter-rouge&quot;&gt;UsersStore&lt;/code&gt;にUserが追加された場合に、&lt;code class=&quot;highlighter-rouge&quot;&gt;UsersStore&lt;/code&gt;丸ごとViewModelへ伝えるのではなく、該当Userオブジェクトのみを伝える」といった感じです。  
そして、そのUserオブジェクトから&lt;code class=&quot;highlighter-rouge&quot;&gt;firstName&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;familyName&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt;をつなげて&lt;code class=&quot;highlighter-rouge&quot;&gt;${familyName} ${firstName} (${age})&lt;/code&gt;という文字列に加工するのはViewModelに任せるというわけです。&lt;/p&gt;

&lt;h4 id=&quot;まとめ&quot;&gt;まとめ&lt;/h4&gt;

&lt;p&gt;Vuexの基本機能を使えば自然とModelの要件を満たせました。ただし、ModelとViewModelの間にある曖昧な機能もあるので、使い方にルールを持つと良さそう、という話でした😌&lt;/p&gt;

&lt;h3 id=&quot;おまけvuefluxは成立するのか&quot;&gt;おまけ　Vue+fluxは成立するのか&lt;/h3&gt;

&lt;p&gt;これはfluxという言葉の定義次第なので、あくまでおまけの話で個人の解釈です。あんまり大きい声で言える話でもありません。&lt;/p&gt;

&lt;p&gt;さて、fluxの定義の大きな要素は、&lt;strong&gt;単一フローを強制すること&lt;/strong&gt;にあると思います。&lt;br /&gt;
MVVMも適切に作ればデータは決まった方向に流れますが、MVVMをMVVMたらしめる要素は&lt;strong&gt;双方向バインディング&lt;/strong&gt;です。そのためView⇔ViewModelは単一フローになり得ません。&lt;/p&gt;

&lt;p&gt;ViewModel⇔Modelの部分だけを見れば、Dispatcher→Store→Viewと似たようなデータフローになるので、部分的にfluxに似ると言えるかもしれません。逆に言えば、こういうところが「fluxはMV*を再発明した」と言われる所以かもしれませんね。&lt;/p&gt;

&lt;p&gt;と言うわけで、Vueを使う以上双方向バインディングは活かしたいですし、そうなるとMVVMになるのは妥当ですし、厳密にはMVVM≠fluxですので、Vue+flux成立はしないと言ってもいいんじゃないかなと思っています。fluxにしたいならReactを使おうよ。&lt;/p&gt;

&lt;h3 id=&quot;あとがき&quot;&gt;あとがき&lt;/h3&gt;

&lt;p&gt;Vueを半年くらい触ってきたので現在地を書き残しておく意味も兼ねて記事にしました。半年後の自分が見たらダメダメな設計方針かもしれませんが今はこんな感じでVueを使っています。&lt;/p&gt;

&lt;p&gt;設計って考えだしたらキリがなくて、経験を積めば積むほどブラッシュアップできるものだと思うので、恥ずかしがらずにディスカッションしていいんじゃないかなと思って書きました。きっともっと優れた設計をするエンジニアもいるでしょうし、人はルールを守れないからこんな設計は不要だと考えるエンジニアもいると思います。それぞれの意見にその人が経験してきた背景があると思うので、いろんな意見が聞けたらいいなと思います。ぜひ&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;まで。&lt;/p&gt;</content><author><name></name></author><summary type="html">まえがき</summary></entry><entry><title type="html">throttleとdebounce</title><link href="https://aloerina01.github.io/javascript/2017/08/03/1.html" rel="alternate" type="text/html" title="throttleとdebounce" /><published>2017-08-03T00:00:00+09:00</published><updated>2017-08-03T00:00:00+09:00</updated><id>https://aloerina01.github.io/javascript/2017/08/03/1</id><content type="html" xml:base="https://aloerina01.github.io/javascript/2017/08/03/1.html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;throttle&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;debounce&lt;/code&gt;といきなり言われてピンとくる人もそうでない人も、ここらでおさらいしませんか？ という回です。これらが何なのか、どう使うのか、どう実装するのかを今一度確認していきましょう。&lt;/p&gt;

&lt;p&gt;なぜ今更こんなことをするのかというと、自分が先日忘れていたからです😳&lt;/p&gt;

&lt;h3 id=&quot;ナニコレ&quot;&gt;ナニコレ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;throttle&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;debounce&lt;/code&gt;とは、簡単に言うと間引き処理の一種です。連続して大量に繰り返される処理を間引いて負荷を軽減させたりするときに使います。&lt;/p&gt;

&lt;h4 id=&quot;throttle&quot;&gt;throttle&lt;/h4&gt;

&lt;p&gt;連続して大量に繰り返される処理を&lt;strong&gt;一定感覚で間引く&lt;/strong&gt;ものです。&lt;br /&gt;
よく使われるのはscrollイベントです。スクロールイベントをすべてハンドリングすると処理回数が多くなり、場合によってはスクロールがもっさりしてしまいますよね。それを防ぎます。&lt;/p&gt;

&lt;h4 id=&quot;debounce&quot;&gt;debounce&lt;/h4&gt;

&lt;p&gt;連続して大量に繰り返される処理が&lt;strong&gt;指定時間内に何度発生しても最後の1回だけ実行する&lt;/strong&gt;ものです。
よく使われるのはresizeイベントです。「ウインドウサイズが変わったときに要素のサイズを変える」みたいなケースってありますよね。その時、ウインドウの端っこをつまんでぐりぐりとドラッグするイベントを全て取得しても意味がありません。マウスから手を話しresizeが完了したときのイベントをとれば十分です。&lt;/p&gt;

&lt;h3 id=&quot;つくりかた&quot;&gt;つくりかた&lt;/h3&gt;

&lt;h4 id=&quot;throttle-1&quot;&gt;throttle&lt;/h4&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;throttle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastExecTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elapsedTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastExecTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;lastExecTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;performance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;elapsedTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;timerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;throttle&lt;/code&gt;関数が呼び出される最初の1回と、&lt;code class=&quot;highlighter-rouge&quot;&gt;elapsedTime(経過時間)&lt;/code&gt;が指定の間引き時間を上回るときと、最後の1回が実行されます。説明を読むよりソースを読むほうが分かりやすいですね。&lt;/p&gt;

&lt;h4 id=&quot;debounce-1&quot;&gt;debounce&lt;/h4&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;debounce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;timerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;interval&lt;/code&gt;の時間だけ処理を待っています。待っている間に連続してdebounce関数が実行されると、待っている処理を&lt;code class=&quot;highlighter-rouge&quot;&gt;clearTimeout&lt;/code&gt;してタイマーを再セットします。&lt;/p&gt;

&lt;p&gt;こうすることで、&lt;code class=&quot;highlighter-rouge&quot;&gt;interval&lt;/code&gt;時間内に連続して行われる処理は、最後の1回だけが実行されます。&lt;/p&gt;

&lt;h3 id=&quot;おわり&quot;&gt;おわり&lt;/h3&gt;

&lt;p&gt;jQueryにもこれらの関数は用意されていますし、それ以外にも世の中にはたくさんのライブラリがあります。が、このくらいなら自分で書いてしまったほうがファイルサイズが小さくなって良いケースもあったりします。&lt;/p&gt;

&lt;p&gt;適材適所、良しなにやっていきたいものですね☺&lt;/p&gt;</content><author><name></name></author><summary type="html">throttleとdebounceといきなり言われてピンとくる人もそうでない人も、ここらでおさらいしませんか？ という回です。これらが何なのか、どう使うのか、どう実装するのかを今一度確認していきましょう。</summary></entry><entry><title type="html">lazyloadの解剖学</title><link href="https://aloerina01.github.io/javascript/react/2017/07/25/1.html" rel="alternate" type="text/html" title="lazyloadの解剖学" /><published>2017-07-25T00:00:00+09:00</published><updated>2017-07-25T00:00:00+09:00</updated><id>https://aloerina01.github.io/javascript/react/2017/07/25/1</id><content type="html" xml:base="https://aloerina01.github.io/javascript/react/2017/07/25/1.html">&lt;p&gt;&lt;img src=&quot;/assets/2017-07-25-1-main.png&quot; alt=&quot;main_visual&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Webのパフォーマンスを改善するテクニックとしてよく使われるlazyloadですが、一口にlazyloadといっても、その仕組みを解剖すると種類や実装方法は様々でした。今回はlazyloadを広義の『遅延読込』と捉えいくつかの視点から分類してまとめ、仕様に応じた実装方法について紹介します。&lt;/p&gt;

&lt;p&gt;と言っても一般論ではなくあくまで持論なので、そこはご容赦ください🙆&lt;br /&gt;
(タイトルも盛りましたがご容赦ください🙅)&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#lazyloadの対象&quot; id=&quot;markdown-toc-lazyloadの対象&quot;&gt;lazyloadの対象&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lazyloadのトリガー&quot; id=&quot;markdown-toc-lazyloadのトリガー&quot;&gt;lazyloadのトリガー&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#loadイベントのobserver&quot; id=&quot;markdown-toc-loadイベントのobserver&quot;&gt;loadイベントのObserver&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-lazyloadcomponent各々がscrollviewのスクロールイベントを監視する&quot; id=&quot;markdown-toc-1-lazyloadcomponent各々がscrollviewのスクロールイベントを監視する&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent&lt;/code&gt;各々が&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;のスクロールイベントを監視する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-scrollviewが自身のスクロールイベントを監視する&quot; id=&quot;markdown-toc-2-scrollviewが自身のスクロールイベントを監視する&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;が自身のスクロールイベントを監視する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-第三者lazyloadhandler等がscrollviewのスクロールイベントを監視する&quot; id=&quot;markdown-toc-3-第三者lazyloadhandler等がscrollviewのスクロールイベントを監視する&quot;&gt;3. 第三者(&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyLoadHandler&lt;/code&gt;等)が&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;のスクロールイベントを監視する&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lazyloadcomponentの形式&quot; id=&quot;markdown-toc-lazyloadcomponentの形式&quot;&gt;LazyloadComponentの形式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ここまでのまとめ&quot; id=&quot;markdown-toc-ここまでのまとめ&quot;&gt;ここまでのまとめ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#事例1-lazyloadする要素のサイズが決まっている場合&quot; id=&quot;markdown-toc-事例1-lazyloadする要素のサイズが決まっている場合&quot;&gt;事例1 lazyloadする要素のサイズが決まっている場合&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#事例2-lazyloadする要素のサイズが決まっていてスクロールするのがwindow以外の場合&quot; id=&quot;markdown-toc-事例2-lazyloadする要素のサイズが決まっていてスクロールするのがwindow以外の場合&quot;&gt;事例2 lazyloadする要素のサイズが決まっていて、スクロールするのがwindow以外の場合&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#事例3-lazyloadする要素のサイズが不確定な場合&quot; id=&quot;markdown-toc-事例3-lazyloadする要素のサイズが不確定な場合&quot;&gt;事例3 lazyloadする要素のサイズが不確定な場合&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lazyloadの対象&quot;&gt;lazyloadの対象&lt;/h3&gt;
&lt;p&gt;よくあるのは&lt;strong&gt;FirstViewに含まれない画像&lt;/strong&gt;の読込を遅延させる手法ですが、lazyloadを適用する対象は他にもあります。大きく分けて以下の3つかなと思います。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;画像の読込とそのレンダリングを遅らせる&lt;/li&gt;
  &lt;li&gt;jsonなどのデータの取得とそれを用いた要素のレンダリングを遅らせる&lt;/li&gt;
  &lt;li&gt;レンダリングのみ遅らせる&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;②はTwitterなどのタイムライン系アプリ(要素を半永久的に読み込むもの)によく見られます。一定量スクロールすると後続要素を取得し描画する、アレです。&lt;/p&gt;

&lt;p&gt;対して、読み込む総量が決まっているページでは、最初に全データを一括で取得するもののレンダリングは見えている範囲のみ行う、という③の手法が使われるケースがあります。VirtualRenderingをこの手法で実装するケースもあります(たぶん)。&lt;/p&gt;

&lt;h3 id=&quot;lazyloadのトリガー&quot;&gt;lazyloadのトリガー&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;一定量のスクロールをトリガーとする&lt;strong&gt;Scroll方式&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;scriptの読込をトリガーとする&lt;strong&gt;async/defer方式&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;FirstViewの描画完了時をトリガーとする&lt;strong&gt;Mount方式&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;一定時間が経過したことをトリガーとする&lt;strong&gt;Timer方式&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;※適当に名前つけました。&lt;/p&gt;

&lt;p&gt;①の『スクロール量をトリガーにする』ことが一般的に多いと思います。&lt;br /&gt;
が、広義の遅延読込の例として他のものも挙げました。&lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;defer&lt;/code&gt;を使ったスクリプトの遅延読込であったり(非同期なので結果的に後追いになることがあるって程度なので遅延というには微妙ですが)、Reactの&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;などを使いFirstViewのマウント後に追加の読込をさせる手法(Mount方式)であったり、&lt;code class=&quot;highlighter-rouge&quot;&gt;requestIdleCallback&lt;/code&gt;などTimer系functionを使って遅延させる手法(Timer方式)などが考えられます。&lt;/p&gt;

&lt;h3 id=&quot;loadイベントのobserver&quot;&gt;loadイベントのObserver&lt;/h3&gt;

&lt;p&gt;たとえばスクロールをトリガーにlazyloadを行う場合、「どの要素のスクロールを」「だれが監視するのか」を考える必要があります。SVO構文ですね(主語/動詞/目的語のアレ)。&lt;/p&gt;

&lt;p&gt;今回は下図のように、スクロールする要素を&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;、遅延読込される要素たちを&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent&lt;/code&gt;と呼び、イベントの関係をまとめます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-07-25-1-explain.png&quot; alt=&quot;scrollview_lazyloadcomponent&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;1-lazyloadcomponent各々がscrollviewのスクロールイベントを監視する&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent&lt;/code&gt;各々が&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;のスクロールイベントを監視する&lt;/h5&gt;

&lt;p&gt;この場合、LazyloadComponentはあらかじめ高さを確保したPlaceholderを描画しておき、ScrollViewのスクロールが一定のところまできたら自身の読込をし、Placeholderと実データを入れ替えます。&lt;/p&gt;

&lt;h5 id=&quot;2-scrollviewが自身のスクロールイベントを監視する&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;が自身のスクロールイベントを監視する&lt;/h5&gt;

&lt;p&gt;この場合は、ScrollViewは自身のスクロールが一定量になったら一定数のLazyloadComponentを読込みレンダリングします。そのため、ScrollViewはLazyloadComponentのリストを保持しておいて、「どれが読込済みか」「次はどの○件を読込むか」を把握しておく必要があります。&lt;/p&gt;

&lt;h5 id=&quot;3-第三者lazyloadhandler等がscrollviewのスクロールイベントを監視する&quot;&gt;3. 第三者(&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyLoadHandler&lt;/code&gt;等)が&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;のスクロールイベントを監視する&lt;/h5&gt;

&lt;p&gt;②の方法から、スクロールするDOMと、それをハンドリングするfunctionを分離したパターンです。画面内に複数のlazyload要素がある場合、handlerを分離してモジュール化しておくと取り回しやすくなります。&lt;/p&gt;

&lt;h3 id=&quot;lazyloadcomponentの形式&quot;&gt;LazyloadComponentの形式&lt;/h3&gt;

&lt;p&gt;遅延読込される要素(=&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent&lt;/code&gt;)を予め空Divなどで読み込んでおくかどうか、等のパターンです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;遅延読み込みされる部分と&lt;strong&gt;同じHeight・WidthのPlaceholder&lt;/strong&gt;をDivなどで予め描画しておく&lt;/li&gt;
  &lt;li&gt;遅延読み込みされる部分を&lt;strong&gt;空のDiv&lt;/strong&gt;などで予め描画しておく&lt;/li&gt;
  &lt;li&gt;遅延読み込みされる部分は読み込まれるまで何も描画しない&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;タイムライン系のアプリでは③の手法が多いですが、AmazonやZOZOTOWNのような商品リスト系のアプリでは①の手法も見受けられます。&lt;/p&gt;

&lt;h3 id=&quot;ここまでのまとめ&quot;&gt;ここまでのまとめ&lt;/h3&gt;

&lt;p&gt;lazyloadを&lt;strong&gt;①対象&lt;/strong&gt;、&lt;strong&gt;②トリガー&lt;/strong&gt;、&lt;strong&gt;③Observer&lt;/strong&gt;、&lt;strong&gt;④load対象の形式&lt;/strong&gt;、の4つの視点から分類しました。これをいかに組み合わせるかは仕様や状況によって異なると思います。&lt;/p&gt;

&lt;p&gt;以降は、&lt;strong&gt;スクロールをトリガーにデータ取得とレンダリングを遅延させる&lt;/strong&gt;仕組みについて3つの仕様例を挙げ、どのような実装ができるかををまとめてみます。サンプルのソースはReactを使って書きます。&lt;/p&gt;

&lt;h3 id=&quot;事例1-lazyloadする要素のサイズが決まっている場合&quot;&gt;事例1 lazyloadする要素のサイズが決まっている場合&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent&lt;/code&gt;のHeight・Widthが一定の場合は&lt;strong&gt;Placeholderを事前にレンダリングしておき、各々のPlaceholderが自身のloadタイミングを管理する&lt;/strong&gt;のがいいと思います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LazyloadComponent.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LazyloadComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
  &lt;span class=&quot;cm&quot;&gt;/** いろいろ省略、大事な部分だけ書きます */&lt;/span&gt;
 
  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;triggerHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'scroll'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;passive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'scroll'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;passive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageYOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;triggerHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lazyload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;isLoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLoaded&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Container.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Container&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LazyloadComponent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/LazyloadComponent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;雰囲気はこんな感じです。load処理だったり、読み込んだデータをStoreする処理だったりは省略です。注目してほしいのは、&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent#render&lt;/code&gt;が、未ロード時は高さを確保したPlaceholderをレンダリングし、ロード後には&lt;code class=&quot;highlighter-rouge&quot;&gt;this.props.children&lt;/code&gt;をレンダリングしている点です。&lt;/p&gt;

&lt;p&gt;こうすることで遅延読込の処理をLazyloadComponent内で完結させることができ、外部に依存・影響が出ない実装をすることができます。&lt;code class=&quot;highlighter-rouge&quot;&gt;removeEventListener&lt;/code&gt;まできちんとComponent内で行っているので、使い回ししやすいと思います。&lt;br /&gt;
実際に親要素である&lt;code class=&quot;highlighter-rouge&quot;&gt;Container&lt;/code&gt;では特別なことをせずに&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent&lt;/code&gt;を必要な分だけ描画しています。&lt;/p&gt;

&lt;h3 id=&quot;事例2-lazyloadする要素のサイズが決まっていてスクロールするのがwindow以外の場合&quot;&gt;事例2 lazyloadする要素のサイズが決まっていて、スクロールするのがwindow以外の場合&lt;/h3&gt;

&lt;p&gt;ケース1では&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent&lt;/code&gt;をPlaceholderとして予めレンダリングしておき、&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;のスクロールイベントをハンドリングさせました。しかしスクロールする要素が&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;以外である場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent&lt;/code&gt;はどうやって親要素のスクロールイベントをハンドリングすれば良いでしょうか。&lt;/p&gt;

&lt;p&gt;Reactは入れ子になっている子要素から順にマウントされるため、&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent#componentDidMount&lt;/code&gt;が呼ばれるタイミングでは、スクロールする親要素を取得できずイベントハンドリングができません。&lt;/p&gt;

&lt;p&gt;この場合は、&lt;strong&gt;親要素から&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;経由でスクロール量を渡す&lt;/strong&gt;方法が使えます(手段のひとつであり、別の方法もあります。あらゆる場面での最適解ではありません)。スクロールする親要素を&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;として実装してみます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ScrollView.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScrollView&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scrollTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LazyloadComponent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;200&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/LazyloadComponent&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;);})}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;内ではスクロール量を&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;として持っておくことで、これが更新される度に&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;が呼ばれ&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent&lt;/code&gt;へスクロール量を渡すことができます。&lt;/p&gt;

&lt;p&gt;あとは、&lt;code class=&quot;highlighter-rouge&quot;&gt;LazyloadComponent#componentWillReceiveProps&lt;/code&gt;でloadのトリガーとなるHeightと比較させればOKです。&lt;/p&gt;

&lt;h3 id=&quot;事例3-lazyloadする要素のサイズが不確定な場合&quot;&gt;事例3 lazyloadする要素のサイズが不確定な場合&lt;/h3&gt;

&lt;p&gt;サイズが不確定な場合、Placeholderを使ってしまうとPlaceholderと実Componentのサイズが合わずレンダリング時にガタつくことがあります。そのため&lt;strong&gt;空Divを使う&lt;/strong&gt;か、&lt;strong&gt;レンダリングしない&lt;/strong&gt;か、いずれかの方法をとる必要があります。結果的にスクロールイベントのハンドリングはScrollView自身(もしくは第三者)にさせることになります。&lt;/p&gt;

&lt;p&gt;以下はScrollView自身にイベントハンドリングさせる例です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ScrollView.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ScrollView&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadedPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 初期読込で1ページ分は読み込んでいる&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;triggerHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1000pxごとにlazyloadを行う&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;triggerHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isLoadedPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lazyLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadedPages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;})}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView#lazyload&lt;/code&gt;が呼ばれると追加読込分がStoreされ、そこから取得される&lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.items&lt;/code&gt;の件数が増えることでlazyloadが実現される仕組みです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView#lazyload&lt;/code&gt;の関数内では、&lt;strong&gt;既にどれだけのデータが読み込まれているか、追加で何件読み込むのか、といったpager的な処理&lt;/strong&gt;をすることが必要になってきます。今回はそれを簡易的に&lt;code class=&quot;highlighter-rouge&quot;&gt;loadedPages&lt;/code&gt;という値で表現しました。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;lazyloadについて分類分けしたり仕様に応じた使い方の紹介をしましたが、もちろんこれらが全てではありませんし、自前で実装するよりもライブラリを使う方が良いケースもあると思います。そこはご理解を。&lt;/p&gt;

&lt;p&gt;また、スクロールイベントの取扱いは注意しないとカクつきなどの原因となります。ご利用の際は&lt;code class=&quot;highlighter-rouge&quot;&gt;throttle&lt;/code&gt;等の併用をお忘れなく、また用法用量を守ってご利用ください。&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">create-react-app + Jest + Enzyme で書くReactコンポーネントテストの始め方</title><link href="https://aloerina01.github.io/javascript/react/2017/05/18/1.html" rel="alternate" type="text/html" title="create-react-app + Jest + Enzyme で書くReactコンポーネントテストの始め方" /><published>2017-05-18T00:00:00+09:00</published><updated>2017-05-18T00:00:00+09:00</updated><id>https://aloerina01.github.io/javascript/react/2017/05/18/1</id><content type="html" xml:base="https://aloerina01.github.io/javascript/react/2017/05/18/1.html">&lt;h3 id=&quot;プロローグ読み飛ばしてください&quot;&gt;プロローグ(読み飛ばしてください)&lt;/h3&gt;

&lt;p&gt;今は昔、ひとつのモダンなWebアプリ「りあくと君」というものがありました。レガシーさや人依存といったクラシカルな趣のあるシステムを開発・保守し続けた人々が一念発起して作り上げた近代的なWebアプリ、それがりあくと君でした。&lt;/p&gt;

&lt;p&gt;ルーチンワークをしていた人々の心にはどす黒い「飽き」と「ストレス」が渦巻いていました。その負のエネルギーを全解放してつくられたりあくと君は大変賢く、斬新で、急成長を遂げる期待の星でした。一縷の望みを背負ったりあくと君でしたが、間もなくして成長はとまり、バグが増え、ソースの各所が絡まり、みるみるうちに業にまみれた存在となってしまいました。&lt;/p&gt;

&lt;p&gt;そして、りあくと君は朽ちました。&lt;/p&gt;

&lt;p&gt;エンジニア各々のオレオレ実装でツギハギまみれになりガチガチに仕様で固められて朽ちてしまったりあくと君……きみを蘇生させてみせる！！
そう言って立ち上がった一人のエンジニアの物語が、今ここにはじまろうとしています。&lt;/p&gt;

&lt;h3 id=&quot;まえおき&quot;&gt;まえおき&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;リファクタリングしたいのでまずはテストを用意しようと思いました&lt;/li&gt;
  &lt;li&gt;Facebook謹製の&lt;strong&gt;Jest&lt;/strong&gt;というオールインワンなツールでテストをします&lt;/li&gt;
  &lt;li&gt;Airbnb謹製の&lt;strong&gt;Enzyme&lt;/strong&gt;というTest Utilitiesを使ってテストコードを書きます&lt;/li&gt;
  &lt;li&gt;もとのWebアプリは&lt;strong&gt;create-react-app&lt;/strong&gt;でつくられています&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;create-react-app + Jest + Enzyme でテストを書きはじめようと思ったときにしたこと、つまづいたことを書き留めておく回です。&lt;/p&gt;

&lt;p&gt;Jestの公式サイト内にもcreate-react-appを使った解説が載っているので、公式派の人は&lt;a href=&quot;https://facebook.github.io/jest/docs/tutorial-react.html&quot;&gt;そちら&lt;/a&gt;をどうぞ。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#プロローグ読み飛ばしてください&quot; id=&quot;markdown-toc-プロローグ読み飛ばしてください&quot;&gt;プロローグ(読み飛ばしてください)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まえおき&quot; id=&quot;markdown-toc-まえおき&quot;&gt;まえおき&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#environments&quot; id=&quot;markdown-toc-environments&quot;&gt;Environments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#create-react-app-のおさらい&quot; id=&quot;markdown-toc-create-react-app-のおさらい&quot;&gt;create-react-app のおさらい&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jestとはenzymeとは&quot; id=&quot;markdown-toc-jestとはenzymeとは&quot;&gt;Jestとは、Enzymeとは&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#jest&quot; id=&quot;markdown-toc-jest&quot;&gt;Jest&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#enzyme&quot; id=&quot;markdown-toc-enzyme&quot;&gt;Enzyme&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#テストの書き始め方&quot; id=&quot;markdown-toc-テストの書き始め方&quot;&gt;テストの書き始め方&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-テストファイルの配置場所を知る&quot; id=&quot;markdown-toc-1-テストファイルの配置場所を知る&quot;&gt;1. テストファイルの配置場所を知る&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-テストファイルを作成する&quot; id=&quot;markdown-toc-2-テストファイルを作成する&quot;&gt;2. テストファイルを作成する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#3-テストコードを書く&quot; id=&quot;markdown-toc-3-テストコードを書く&quot;&gt;3. テストコードを書く&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#enzymeを使ってスナップショットのテストをする&quot; id=&quot;markdown-toc-enzymeを使ってスナップショットのテストをする&quot;&gt;Enzymeを使ってスナップショットのテストをする&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ハマったところ&quot; id=&quot;markdown-toc-ハマったところ&quot;&gt;ハマったところ&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#localstorage-is-not-defined&quot; id=&quot;markdown-toc-localstorage-is-not-defined&quot;&gt;🙅localStorage is not defined&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reacttestutils-has-been-moved-to-react-domtest-utils&quot; id=&quot;markdown-toc-reacttestutils-has-been-moved-to-react-domtest-utils&quot;&gt;🙅ReactTestUtils has been moved to react-dom/test-utils.&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;environments&quot;&gt;Environments&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;React 15.4.2&lt;/li&gt;
  &lt;li&gt;create-react-app 0.8.5&lt;/li&gt;
  &lt;li&gt;Jest 17.0.2&lt;/li&gt;
  &lt;li&gt;Enzyme 2.8.2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;での経験談を元にしています。&lt;/p&gt;

&lt;h3 id=&quot;create-react-app-のおさらい&quot;&gt;create-react-app のおさらい&lt;/h3&gt;

&lt;p&gt;コマンド一発でReactの開発環境をつくることができるツールです。&lt;br /&gt;
(参考：&lt;a href=&quot;https://aloerina01.github.io/javascript/react/2017/02/28/1.html&quot;&gt;Reactを秒速で使い始められるcreate-react-appの使い方と使い心地&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;これを使って構築した環境には標準でJestが組み込まれていて、&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn test&lt;/code&gt;コマンドですぐにテストを実行することができます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Create React App uses Jest as its test runner. To prepare for this integration, we did a major revamp of Jest so if you heard bad things about it years ago, give it another try.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#running-tests&quot;&gt;create-react-app/README.md at master · facebookincubator/create-react-app · GitHub&lt;/a&gt;より&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;jestとはenzymeとは&quot;&gt;Jestとは、Enzymeとは&lt;/h3&gt;

&lt;h4 id=&quot;jest&quot;&gt;Jest&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/jest/&quot;&gt;Jest · 🃏 Delightful JavaScript Testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Reactのテストをするためのツールです&lt;/li&gt;
  &lt;li&gt;単体テストを書くための&lt;strong&gt;function群&lt;/strong&gt;と、テストを実行する&lt;strong&gt;テストランナー&lt;/strong&gt;が含まれています(オールインワン)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;enzyme&quot;&gt;Enzyme&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://airbnb.io/enzyme/&quot;&gt;Enzyme&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Reactのテストコードを書くためのUtilityです&lt;/li&gt;
  &lt;li&gt;Jestだけではできない高度なテストを書くことができるfunction群です(Jestと重なる部分もあります)&lt;/li&gt;
  &lt;li&gt;Reactコンポーネントをrenderingする&lt;code class=&quot;highlighter-rouge&quot;&gt;shallow&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;の3つのfunctionがキモです&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;テストの書き始め方&quot;&gt;テストの書き始め方&lt;/h3&gt;

&lt;h4 id=&quot;1-テストファイルの配置場所を知る&quot;&gt;1. テストファイルの配置場所を知る&lt;/h4&gt;
&lt;p&gt;Jestは任意のディレクトリからテストコードを探し出し順に実行してくれます。本来このディレクトリは&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;rootDir&lt;/code&gt;という名前で定義するものなのですが、create-react-appでつくられた環境では&lt;code class=&quot;highlighter-rouge&quot;&gt;src/&lt;/code&gt;と決められています。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// react-scripts/utils/createJestConfig.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isEjecting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// (省略)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ← ここで引数をもとにrootDirを指定している&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// react-scripts/scripts/test.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'--config'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createJestConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;relativePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'..'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;relativePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'..'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ← ここで引数rootDirを指定している&lt;/span&gt;
  &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;したがって、&lt;code class=&quot;highlighter-rouge&quot;&gt;src/&lt;/code&gt;にテストファイルを配置していきます。&lt;/p&gt;

&lt;h4 id=&quot;2-テストファイルを作成する&quot;&gt;2. テストファイルを作成する&lt;/h4&gt;

&lt;p&gt;Jestにテストファイルを認識させるには2つの方法があります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__test__&lt;/code&gt;というディレクトリ以下にテストファイルを置く&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.test.js&lt;/code&gt;という拡張子のファイルを作成する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;私は②を採用しました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src
  ├ actions
  ├ components
  ︙    ├ CheckboxWithLabel.js  (Buttonコンポーネント)
        └ test
            └ CheckboxWithLabel.test.js  (Buttonコンポーネントのテスト)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3-テストコードを書く&quot;&gt;3. テストコードを書く&lt;/h4&gt;

&lt;p&gt;Jestの各functionの使い方はこの記事が分かりやすかったです。  
&lt;a href=&quot;http://qiita.com/chimame/items/e97883fd46b67529d59f&quot;&gt;Facebook製のJavaScriptテストツール「Jest」の逆引き使用例 - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここでは、「チェックボックスのOn/Offに応じてラベルの文言が切り替わるコンポーネント」のテストの実装例を挙げます。ソースを読んで雰囲気がつかめるかと思います(がいかがでしょう)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/components/CheckboxWithLabel.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckboxWithLabel&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isChecked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isChecked&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labelOn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labelOff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/label&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;src/components/test/CheckboxWithLabel.test.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'enzyme'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CheckboxWithLabel&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../CheckboxWithLabel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ChecboxWithLabel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Changes the label after click'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Componentをレンダリングする&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkbox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shallow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CheckboxWithLabel&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;On&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelOff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Off&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// expect(検査対象).toEqual(想定結果)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Off'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// shallowでレンダリングされた要素から特定のセレクタを取得する&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;checkbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'change'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// expect(検査対象).toEqual(想定結果)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'On'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここでつかった&lt;code class=&quot;highlighter-rouge&quot;&gt;shallow&lt;/code&gt;という関数は、その名の通りComponentを浅くレンダリングします。Componentの中にComponentがある入れ子構造の場合、一番外側のComponentしかレンダリングされません。子コンポーネントに依存していない結果を検査することができます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Shallow rendering is useful to constrain yourself to testing a component as a unit, and to ensure that your tests aren’t indirectly asserting on behavior of child components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://airbnb.io/enzyme/docs/api/shallow.html&quot;&gt;Shallow Rendering&lt;/a&gt;より&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;enzymeを使ってスナップショットのテストをする&quot;&gt;Enzymeを使ってスナップショットのテストをする&lt;/h3&gt;

&lt;p&gt;ここからはJest + Enzymeの話です。&lt;br /&gt;
これらを組み合わせることで、&lt;strong&gt;Componentのレンダリング結果をスナップショットとして残しておき、それと比較してレンダリング結果に差異がないか&lt;/strong&gt;のテストをすることができます。&lt;/p&gt;

&lt;p&gt;上記のCheckboxWithLabelでその例を書いてみます。&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CheckboxWithLabel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Matches with the snapshot when checkbox is OFF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CheckboxWithLabel&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;On&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;labelOff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Off&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toMatchSnapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toMatchSnapshot()&lt;/code&gt;は、既存のスナップショットと比較してレンダリング結果が一致しているかどうかを判定します。最初の一回目はsnapshotがないため必ずpassします。snapshotを更新する場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;jest --update&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;jest -u&lt;/code&gt;コマンドを叩きます。&lt;/p&gt;

&lt;p&gt;ここで使った&lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt;という関数は、Componentを完全にレンダリングします。その分テストの実行速度が遅くなるため、入れ子の深いComponentをmountしたり、mountを使ったテストをたくさん書くとなかなかテストが終わりません。
その場合はテストを分割して行うなどの工夫が必要でした。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Full DOM rendering is ideal for use cases where you have components that may interact with DOM APIs, or may require the full lifecycle in order to fully test the component (i.e., componentDidMount etc.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://airbnb.io/enzyme/docs/api/mount.html&quot;&gt;Full DOM Rendering&lt;/a&gt;より&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;ハマったところ&quot;&gt;ハマったところ&lt;/h3&gt;

&lt;h4 id=&quot;localstorage-is-not-defined&quot;&gt;🙅localStorage is not defined&lt;/h4&gt;

&lt;p&gt;テストするComponentが依存しているあるモジュールは、内部でlocalStorageを利用していました。そのためimport時に&lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage is not defined&lt;/code&gt;のエラーが起きました。&lt;/p&gt;

&lt;p&gt;Jestはテスト実行前にテスト環境を構築するコードを実行することができるので、それを利用してlocalStorageモックを定義することで対処できます。一般的には、&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;に&lt;code class=&quot;highlighter-rouge&quot;&gt;setupFiles&lt;/code&gt;または&lt;code class=&quot;highlighter-rouge&quot;&gt;setupTestFrameworkScriptFile&lt;/code&gt;として定義したファイルがテスト前に実行されます。&lt;br /&gt;
(参考： &lt;a href=&quot;http://facebook.github.io/jest/docs/configuration.html#setupfiles-array&quot;&gt;Configuring package.json · Jest&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-package.json&quot;&gt;&quot;jest&quot;: {
  &quot;setupFiles&quot;: [&quot;createLocalStorageMock.js&quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただし、create-react-appを使っている場合はやはりこの設定が効かず、独自の設定ファイル&lt;code class=&quot;highlighter-rouge&quot;&gt;src/setupTests.js&lt;/code&gt;にモックを書く必要がありました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;src/setupTests.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorageMock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localStorage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorageMock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;reacttestutils-has-been-moved-to-react-domtest-utils&quot;&gt;🙅ReactTestUtils has been moved to react-dom/test-utils.&lt;/h4&gt;

&lt;p&gt;テスト結果に以下のワーニング文が表示されていました。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Warning: ReactTestUtils has been moved to react-dom/test-utils. Update references to remove this warning.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ReactTestUtilsの依存元が変わったってことだと思いReact公式を調べたところ、以下の対応をするように記載がありました。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactTestUtils&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-dom/test-utils'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ES6&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactTestUtils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'react-dom/test-utils'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ES5 with npm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;言われるがままにためしたものの、&lt;code class=&quot;highlighter-rouge&quot;&gt;Cannot find module 'react-dom/test-utils’&lt;/code&gt;と怒られる。いかがなものですかね。&lt;/p&gt;

&lt;p&gt;ということで、今度はワーニング文の&lt;code class=&quot;highlighter-rouge&quot;&gt;Update references&lt;/code&gt;にバカ正直に従い依存モジュールを丸々アップデートしてみました。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;yarn cache clean
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;yarn upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;解決しちゃいました。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;リファクタしてまるっと書き直したい部分があったのですが、デグレしない保証をとる手段がなさそうだったのでひとまずテストを用意しよう！　ということで書き始めたテストですが(遅い)、思った以上に融通が効くし書き心地が良くて充実したテストコーディングとなりました。とくにレンダリング結果をsnapshotで比較できるのは重宝しそうな感じです。&lt;/p&gt;

&lt;p&gt;そんな感じでJestとEnzymeはよかったものの、create-react-appは便利な反面制約が多くハマりどころが多々あるので、ハマったときはこうして記録を残していこうと思います。&lt;/p&gt;

&lt;p&gt;それでは。&lt;/p&gt;</content><author><name></name></author><summary type="html">プロローグ(読み飛ばしてください)</summary></entry><entry><title type="html">escape と encodeURI と encodeURIComponent を正しく使い分ける</title><link href="https://aloerina01.github.io/javascript/2017/04/28/1.html" rel="alternate" type="text/html" title="escape と encodeURI と encodeURIComponent を正しく使い分ける" /><published>2017-04-28T00:00:00+09:00</published><updated>2017-04-28T00:00:00+09:00</updated><id>https://aloerina01.github.io/javascript/2017/04/28/1</id><content type="html" xml:base="https://aloerina01.github.io/javascript/2017/04/28/1.html">&lt;h3 id=&quot;escape&quot;&gt;escape&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;非推奨&lt;/strong&gt;、Web標準から削除されている&lt;/li&gt;
  &lt;li&gt;ブラウザやそのバージョンにより仕様が違う&lt;/li&gt;
  &lt;li&gt;変換されない文字がある&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;encodeuri&quot;&gt;encodeURI&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;UTF8ベースのエンコード&lt;/li&gt;
  &lt;li&gt;その名の通り、&lt;strong&gt;URIそのもの&lt;/strong&gt;を渡しエンコードしてもらうもの&lt;/li&gt;
  &lt;li&gt;そのため、URI内で意味をもつ&lt;code class=&quot;highlighter-rouge&quot;&gt;#$&amp;amp;+,/:;=?@&lt;/code&gt;の文字は変換されない&lt;/li&gt;
  &lt;li&gt;スペースのエンコードは&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;ではなく&lt;code class=&quot;highlighter-rouge&quot;&gt;%20&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;encodeuricomponent&quot;&gt;encodeURIComponent&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;UTF-8ベースのエンコード&lt;/li&gt;
  &lt;li&gt;その名の通り、&lt;strong&gt;URIを構成する一部分&lt;/strong&gt;を渡しエンコードしてもらうもの&lt;/li&gt;
  &lt;li&gt;URI内で意味を持つ&lt;code class=&quot;highlighter-rouge&quot;&gt;#$&amp;amp;+,/:;=?@&lt;/code&gt;もエンコードする&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;encodeURI&lt;/code&gt;との差は&lt;code class=&quot;highlighter-rouge&quot;&gt;#$&amp;amp;+,/:;=?@&lt;/code&gt;をエンコードするか否か&lt;/li&gt;
  &lt;li&gt;URI全体をこの関数でエンコードすると、URIとして機能しなくなる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;比較ツールつくった&quot;&gt;比較ツールつくった&lt;/h3&gt;

&lt;p&gt;3つの関数によりどのようにエンコードされるかが分かるツールをつくりました。&lt;br /&gt;
&lt;a href=&quot;https://aloerina01.github.io/encoder/&quot;&gt;encoder&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;htmlエスケープ用の関数はない&quot;&gt;HTMLエスケープ用の関数はない&lt;/h3&gt;

&lt;p&gt;ついでの話。&lt;br /&gt;
「HTMLエスケープは基本的にはサーバサイドでするもの」という認識が漠然とあります。が、SPAの登場などもあってクライアントサイドでレンダリングする場面もチラホラあるので、その場合は自前でエスケープ関数を作る必要があります。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;escapeHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'string'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&amp;amp;'`&quot;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'&amp;amp;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;amp;amp;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;amp;#x27;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'`'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;amp;#x60;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;amp;quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'&amp;lt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;amp;lt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ざっくりとこんな感じです。&lt;/p&gt;

&lt;p&gt;大した話でもないのでまとめとか後書きは抜きにして、現場からは以上です。&lt;/p&gt;</content><author><name></name></author><summary type="html">escape</summary></entry><entry><title type="html">超軽量Viewライブラリ「Hyperapp」の日本語ドキュメント風の何か</title><link href="https://aloerina01.github.io/javascript/hyperapp/2017/03/17/1.html" rel="alternate" type="text/html" title="超軽量Viewライブラリ「Hyperapp」の日本語ドキュメント風の何か" /><published>2017-03-17T00:00:00+09:00</published><updated>2017-03-17T00:00:00+09:00</updated><id>https://aloerina01.github.io/javascript/hyperapp/2017/03/17/1</id><content type="html" xml:base="https://aloerina01.github.io/javascript/hyperapp/2017/03/17/1.html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hyperapp/hyperapp&quot;&gt;Hyperapp - GitHub&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hyperapp is a JavaScript library for building web applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HyperappはWebアプリケーションのフロント(主にView)を担うJavaScript用のライブラリです。このライブラリは3つのコンセプトで成り立っています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;外部ライブラリに依存しない、超軽量&lt;strong&gt;1KB&lt;/strong&gt;ぐらいのライブラリ&lt;/li&gt;
  &lt;li&gt;ステートレスコンポーネント&lt;/li&gt;
  &lt;li&gt;Elm Architecture に則ったスケーラブル可能な仕組み&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はHyperappの&lt;a href=&quot;https://github.com/hyperapp/hyperapp/blob/master/docs/README.md#documentation&quot;&gt;ドキュメント&lt;/a&gt;を勝手に意訳&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;してみようと思います😌💡&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started&quot; id=&quot;markdown-toc-getting-started&quot;&gt;Getting Started&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#こんにちは世界&quot; id=&quot;markdown-toc-こんにちは世界&quot;&gt;こんにちは世界&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#jsxで書いた場合&quot; id=&quot;markdown-toc-jsxで書いた場合&quot;&gt;JSXで書いた場合&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#hyperxで書いた場合&quot; id=&quot;markdown-toc-hyperxで書いた場合&quot;&gt;Hyperxで書いた場合&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#build-setup&quot; id=&quot;markdown-toc-build-setup&quot;&gt;Build Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jsxを使う環境の用意&quot; id=&quot;markdown-toc-jsxを使う環境の用意&quot;&gt;JSXを使う環境の用意&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#browserifyを使う場合&quot; id=&quot;markdown-toc-browserifyを使う場合&quot;&gt;Browserifyを使う場合&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#必要なモジュールのインストール&quot; id=&quot;markdown-toc-必要なモジュールのインストール&quot;&gt;必要なモジュールのインストール&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#babelrcの用意&quot; id=&quot;markdown-toc-babelrcの用意&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;の用意&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ビルドの実行&quot; id=&quot;markdown-toc-ビルドの実行&quot;&gt;ビルドの実行&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#webpackを使う場合&quot; id=&quot;markdown-toc-webpackを使う場合&quot;&gt;Webpackを使う場合&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#必要なモジュールのインストール-1&quot; id=&quot;markdown-toc-必要なモジュールのインストール-1&quot;&gt;必要なモジュールのインストール&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#babelrcの用意-1&quot; id=&quot;markdown-toc-babelrcの用意-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;の用意&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#webpackconfigjsの用意&quot; id=&quot;markdown-toc-webpackconfigjsの用意&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;の用意&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ビルドの実行-1&quot; id=&quot;markdown-toc-ビルドの実行-1&quot;&gt;ビルドの実行&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rollupを使う場合&quot; id=&quot;markdown-toc-rollupを使う場合&quot;&gt;Rollupを使う場合&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#必要なモジュールのインストール-2&quot; id=&quot;markdown-toc-必要なモジュールのインストール-2&quot;&gt;必要なモジュールのインストール&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#rollupconfigjsの用意&quot; id=&quot;markdown-toc-rollupconfigjsの用意&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rollup.config.js&lt;/code&gt;の用意&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ビルドの実行-2&quot; id=&quot;markdown-toc-ビルドの実行-2&quot;&gt;ビルドの実行&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hyperxを使う環境の用意&quot; id=&quot;markdown-toc-hyperxを使う環境の用意&quot;&gt;Hyperxを使う環境の用意&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#api-reference&quot; id=&quot;markdown-toc-api-reference&quot;&gt;API Reference&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#h&quot; id=&quot;markdown-toc-h&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#app&quot; id=&quot;markdown-toc-app&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#state&quot; id=&quot;markdown-toc-state&quot;&gt;State&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#view&quot; id=&quot;markdown-toc-view&quot;&gt;View&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#actions&quot; id=&quot;markdown-toc-actions&quot;&gt;Actions&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#global-events&quot; id=&quot;markdown-toc-global-events&quot;&gt;Global Events&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lifecycle-methods&quot; id=&quot;markdown-toc-lifecycle-methods&quot;&gt;&lt;a href=&quot;https://github.com/hyperapp/hyperapp/blob/master/docs/concepts/lifecycle-events.md&quot;&gt;Lifecycle Methods&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#afterword&quot; id=&quot;markdown-toc-afterword&quot;&gt;Afterword&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;Hyperappは器用に作られたもので、新規プロダクトに取り入れることはもちろん、既存のWebアプリケーションに組み込むこともできるよ。&lt;/p&gt;

&lt;p&gt;一番簡単な方法は何と言ってもCDNだね。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://unpkg.com/hyperapp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;バージョンを指定したいかな？ そんなときはこう。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://unpkg.com/hyperapp@1.0.1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;こんにちは世界&quot;&gt;こんにちは世界&lt;/h4&gt;

&lt;p&gt;ではさっそくHyperappを使って「こんにちは世界」を表示させてみよう。&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;を用意して以下のコードをコピペしてブラウザで見てみよう😄&lt;/p&gt;

&lt;p&gt;Hyperappでは&lt;strong&gt;JSX&lt;/strong&gt;を使った記法と、ES6のテンプレートリテラルを使った&lt;strong&gt;Hyperx&lt;/strong&gt;という記法の２つが使えるよ。How wonderful!! それぞれのコード例を用意したから好きな方を使ってね。&lt;/p&gt;

&lt;h5 id=&quot;jsxで書いた場合&quot;&gt;JSXで書いた場合&lt;/h5&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://unpkg.com/hyperapp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://unpkg.com/babel-standalone&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/babel&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hyperapp&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/** @jsx h */&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;こんにちは世界&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;hyperxで書いた場合&quot;&gt;Hyperxで書いた場合&lt;/h5&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://unpkg.com/hyperapp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://wzrd.in/standalone/hyperx&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hyperapp&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hyperx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;こんにちは世界&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`
&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;さて、ブラウザでは何が起きたかな？&lt;br /&gt;
ブラウザはHyperxやJSXをCDN経由でダウンロードし、scriptの部分をコンパイルして描画したよ。&lt;/p&gt;

&lt;p&gt;この例ではHyperappとは何かを手軽に知ることができたと思うけれど、これだけだとWebアプリケーション開発の例としては少々物足りないよね。わかるよ。&lt;/p&gt;

&lt;p&gt;では、次にWebpack、Browserify、Rollupをつかったビルド環境のセットアップの例を見てみよう。&lt;/p&gt;

&lt;h3 id=&quot;build-setup&quot;&gt;Build Setup&lt;/h3&gt;

&lt;p&gt;Webアプリケーションの開発環境を用意するには3つの要素が必要なんだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;パッケージマネージャ(&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;, &lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;yarn&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;コンパイラ(&lt;a href=&quot;http://babeljs.io/&quot;&gt;babel&lt;/a&gt;, &lt;a href=&quot;https://buble.surge.sh/guide/&quot;&gt;Bublé&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;バンドラ(&lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt;, &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;, &lt;a href=&quot;http://rollupjs.org/&quot;&gt;Rollup&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なぜこれらが必要かというと、JSX/Hyperxで書かれたソースをコンパイルするためなんだ💪 コンパイルされると、Hyperappの&lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;関数という&lt;strong&gt;仮想DOMを生成するための関数&lt;/strong&gt;になるのだけれど、それについてはまた後で語るからね。&lt;/p&gt;

&lt;p&gt;コンパイル前(JSX/Hyperx)&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hi.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;コンパイル後&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;h1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;こんな具合だよ。いい具合だね。&lt;br /&gt;
さぁ次の章ではJSXとHyperx各々のためのビルド環境のセットアップを学ぶよ。ついておいで！&lt;/p&gt;

&lt;h3 id=&quot;jsxを使う環境の用意&quot;&gt;JSXを使う環境の用意&lt;/h3&gt;

&lt;p&gt;JSXはXMLと同様データの記法のひとつだよ。知ってたかい？ これを使うことでHTML(テンプレート)とJavaScript(処理)を一つのファイルに混在させることができるよ。&lt;/p&gt;

&lt;p&gt;JSXを使うには上述の通りコンパイルが必要なんだ。JSXを&lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;関数に変換し、ひとつのjsファイルにバンドルし、配信しなければならないからね。ではさっそくビルド環境の用意をしよう。&lt;/p&gt;

&lt;h4 id=&quot;browserifyを使う場合&quot;&gt;Browserifyを使う場合&lt;/h4&gt;

&lt;h5 id=&quot;必要なモジュールのインストール&quot;&gt;必要なモジュールのインストール&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm i -S hyperapp

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm i -D babel-plugin-transform-react-jsx babel-preset-es2015 babelify browserify bundle-collapser uglifyify uglifyjs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;babelrcの用意&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;の用意&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform-react-jsx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pragma&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;h&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;ビルドの実行&quot;&gt;ビルドの実行&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;npm bin&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/browserify &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -t babelify &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -g uglifyify &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -p bundle-collapser/plugin index.js | uglifyjs &amp;gt; bundle.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;webpackを使う場合&quot;&gt;Webpackを使う場合&lt;/h4&gt;

&lt;h5 id=&quot;必要なモジュールのインストール-1&quot;&gt;必要なモジュールのインストール&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm i -S hyperapp

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm i -D webpack babel-core babel-loader babel-preset-es2015 babel-plugin-transform-react-jsx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;babelrcの用意-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;の用意&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform-react-jsx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;pragma&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;h&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;webpackconfigjsの用意&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;の用意&lt;/h5&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/node_modules/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;ビルドの実行-1&quot;&gt;ビルドの実行&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;npm bin&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/webpack -p
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;rollupを使う場合&quot;&gt;Rollupを使う場合&lt;/h4&gt;

&lt;h5 id=&quot;必要なモジュールのインストール-2&quot;&gt;必要なモジュールのインストール&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm i -S hyperapp

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm i -D rollup rollup-plugin-babel rollup-plugin-node-resolve rollup-plugin-uglify babel-preset-es2015-rollup babel-plugin-transform-react-jsx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;rollupconfigjsの用意&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rollup.config.js&lt;/code&gt;の用意&lt;/h5&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rollup-plugin-babel&quot;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rollup-plugin-node-resolve&quot;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uglify&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rollup-plugin-uglify&quot;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;babelrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2015-rollup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform-react-jsx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pragma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;h&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;jsnext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;uglify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;ビルドの実行-2&quot;&gt;ビルドの実行&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;npm bin&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/rollup -cf iife -i index.js -o bundle.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;hyperxを使う環境の用意&quot;&gt;Hyperxを使う環境の用意&lt;/h3&gt;

&lt;p&gt;JSXのときとインストールするファイルが少々変わるだけなので割愛するよ 😌&lt;/p&gt;

&lt;h3 id=&quot;api-reference&quot;&gt;API Reference&lt;/h3&gt;

&lt;p&gt;ここではHyperappのモジュールや関数の使い方について、サンプルと併せて紹介するよ。&lt;/p&gt;

&lt;p&gt;Hyperappは大きく分けて2つの仕組みを提供しているんだ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;h 関数&lt;/code&gt; … 仮想DOMを生成する関数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app 関数&lt;/code&gt; … Hyperappを利用したApplicationを実行する関数&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;h&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;仮想DOMを返す関数だよ。ここで言う仮想DOMとは、ネストされたDOMのツリーをJavaScriptのオブジェクトとして表現しているものだよ🌴&lt;/p&gt;

&lt;p&gt;Syntax&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name {String}&lt;/code&gt; … 「div」など、HTML上でのタグ名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props {Object}&lt;/code&gt; … Elementに挿入されるattributes&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;children {String | Array}&lt;/code&gt; … 子要素&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;next page&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// return object&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   name: 'a',&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   props: {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//     href: '#'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   },&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//   children: 'next page'&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;app&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;HyperappによるWebアプリケーションを起動するよ。これを呼び出すことで全てが始まる。オプションを添えられるよ。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;state&quot;&gt;State&lt;/h4&gt;

&lt;p&gt;アプリケーションのStateを管理するオブジェクトだよ。Objectでないとダメだよ！&lt;/p&gt;

&lt;h4 id=&quot;view&quot;&gt;View&lt;/h4&gt;

&lt;p&gt;仮想DOMを返す関数だよ。引数に&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;actions&lt;/code&gt;をとるよ。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;actions&quot;&gt;Actions&lt;/h4&gt;

&lt;p&gt;Webアプリケーションの振る舞いを定義する関数のコレクションだよ。&lt;code class=&quot;highlighter-rouge&quot;&gt;actions&lt;/code&gt;は一般的に&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;を更新するために利用されるよ。そのため、返り値が新しい&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;であることがしばしば。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;addValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;addValueLater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; … actionの処理(モデルの更新)に必要な情報&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; … 現在のstate&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;actions&lt;/code&gt; … アプリケーションが持つ大元のactions&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;global-events&quot;&gt;Global Events&lt;/h4&gt;

&lt;p&gt;app関数が返すオブジェクトにstateと繋がっている元のactionsがある。viewに渡されるactionsと同じで、actionを呼び出す時に、stateが更新される！&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mousemove&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;lifecycle-methods&quot;&gt;&lt;a href=&quot;https://github.com/hyperapp/hyperapp/blob/master/docs/concepts/lifecycle-events.md&quot;&gt;Lifecycle Methods&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;仮想DOMのライフサイクルにまつわるイベントをハンドリングできるよ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyperapp/hyperapp/blob/master/docs/concepts/lifecycle-events.md#oncreate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oncreate&lt;/code&gt;&lt;/a&gt; … ElementがDOMとして構築されたとき&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyperapp/hyperapp/blob/master/docs/concepts/lifecycle-events.md#onupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onupdate&lt;/code&gt;&lt;/a&gt; … Elementの要素が更新されたとき&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyperapp/hyperapp/blob/master/docs/concepts/lifecycle-events.md#onremove&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onremove&lt;/code&gt;&lt;/a&gt; … ElementがDOMから消える直前&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hyperapp/hyperapp/blob/master/docs/concepts/lifecycle-events.md#ondestroy&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ondestroy&lt;/code&gt;&lt;/a&gt; … ElementがDOMから消える直後&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CodeMirror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Editor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oncreate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onupdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oncreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oncreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onupdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onupdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;afterword&quot;&gt;Afterword&lt;/h3&gt;

&lt;p&gt;良さそうなところ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;小さな開発用ツールなどをつくるときには高速で実装できるし、実行速度的にも◎&lt;/li&gt;
  &lt;li&gt;特にReactでJSX使ってた人はとっつきやすいかも&lt;/li&gt;
  &lt;li&gt;小さなライブラリなので、初めてのOSSコードリーディングにはもってこい&lt;/li&gt;
  &lt;li&gt;同じく、初めてのOSSコントリビュートにはもってこい(？)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちょっと考えものなところ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;テンプレートファイルを外出しできないとマークアップエンジニアとの分業がしにくいかも&lt;/li&gt;
  &lt;li&gt;もう少し細かい単位でライフサイクルのイベントハンドリングをしたくなるかも&lt;/li&gt;
  &lt;li&gt;viewの共通部品の定義(Abstract的なもの)とか欲しくなりそう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一部訳すのをさぼりました。すみません😵&lt;/p&gt;

&lt;p&gt;初めて翻訳(の真似事)をしたのですが、自然と海外ドキュメンタリーの吹き替えみたいな声が脳内再生されました。「&lt;a href=&quot;http://shirobako-anime.com/story/04.html&quot;&gt;私ゃ失敗こいちまってさ&lt;/a&gt;」的なやつです。ともあれ、とても楽しかったですしHyperappを好きになれて満足しました。&lt;/p&gt;

&lt;p&gt;間違いや指摘箇所があれば&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;までご連絡ください。&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;英語が得意でない者が雰囲気で訳したものです。本家Hyperappとは無関係の個人的な記事です。&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">ES6 Proxy をつかって堅牢なオブジェクトをつくるTips</title><link href="https://aloerina01.github.io/javascript/2017/03/14/1.html" rel="alternate" type="text/html" title="ES6 Proxy をつかって堅牢なオブジェクトをつくるTips" /><published>2017-03-14T00:00:00+09:00</published><updated>2017-03-14T00:00:00+09:00</updated><id>https://aloerina01.github.io/javascript/2017/03/14/1</id><content type="html" xml:base="https://aloerina01.github.io/javascript/2017/03/14/1.html">&lt;h3 id=&quot;what-is-proxy&quot;&gt;What is Proxy&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;オブジェクトをラップし、オブジェクトが持つ基本的な機能(&lt;code class=&quot;highlighter-rouge&quot;&gt;obj.key&lt;/code&gt;と書いてvalueを取得する機能など)を上書くことができるのが&lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy Object&lt;/code&gt;です。&lt;br /&gt;
(高機能なオブジェクトを生成することができる、けっこうイカした仕様だと思います😋)&lt;/p&gt;

&lt;h4 id=&quot;つかいかた&quot;&gt;つかいかた&lt;/h4&gt;

&lt;p&gt;詳細な用法やパラメータの説明は &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;MDN&lt;/a&gt;に任せるとして、基本的なSyntaxだけ記します。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; …Proxyでラップする対象となるObject&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt;…上書く関数をプロパティに持つObject&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;用例&quot;&gt;用例&lt;/h4&gt;

&lt;p&gt;実際のソースをみたほうがピンとくるかもしれません💡&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Aloerina'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;は上書き禁止です`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// objをラップしたproxyを生成する&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Margherita'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// nameは上書き禁止です&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;concole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Aloerina&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;handlerの種類&quot;&gt;Handlerの種類&lt;/h4&gt;

&lt;p&gt;オブジェクトが持つ基本的な機能、つまり「オブジェクトのプロパティへのアクセスを提供するメソッド」のことを&lt;strong&gt;トラップ&lt;/strong&gt;といいます。&lt;br /&gt;
handlerとは、トラップの処理を上書きするものなので、各トラップに対して対応するhandlerが用意されています。「Proxyで何ができるか」を知りたいときはこれを見るのが分かりやすそうです。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;handler&lt;/th&gt;
      &lt;th&gt;trap&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getPrototypeOf&quot;&gt;handler.getPrototypeOf(target)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Object.getPrototypeOf&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/setPrototypeOf&quot;&gt;handler.setPrototypeOf(target, prototype)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Object.setPrototypeOf&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/isExtensible&quot;&gt;handler.isExtensible(target)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Object.isExtensible&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/preventExtensions&quot;&gt;handler.preventExtensions(target)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Object.preventExtensions&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor&quot;&gt;handler.getOwnPropertyDescriptor(target, prop)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Object.getOwnPropertyDescriptor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/defineProperty&quot;&gt;handler.defineProperty(target, prop, descriptor)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Object.defineProperty&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/has&quot;&gt;handler.has(target, prop)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;in&lt;/em&gt; operator&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/get&quot;&gt;handler.get(target, prop, receiver)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;getting property values&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/set&quot;&gt;handler.set(target, prop, value, receiver)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;setting property values&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/deleteProperty&quot;&gt;handler.deleteProperty(target, prop)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;delete&lt;/em&gt; operator&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/ownKeys&quot;&gt;handler.ownKeys(target)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Object.getOwnPropertyNames&lt;br /&gt;Object.getOwnPropertySymbols&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/apply&quot;&gt;handler.apply(target, thisArg, argumentsList)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;function call&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/construct&quot;&gt;handler.construct(target, argumentsList, newTarget)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;new&lt;/em&gt; operator&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;reflect&quot;&gt;Reflect&lt;/h4&gt;

&lt;p&gt;handlerの中で「本来の処理を呼び出したい」場面があると思います。この場合に使えるのが&lt;code class=&quot;highlighter-rouge&quot;&gt;Reflect&lt;/code&gt;です。&lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt;と同じメソッド群を持ちます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Before set'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// targetオブジェクトのsetterを呼び出す&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Margherita'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Before set&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;concole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Margherita&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;can-i-use&quot;&gt;Can I Use&lt;/h4&gt;

&lt;p&gt;執筆時点(2017/03/14)でのものです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2017-03-14-1.png&quot; alt=&quot;caniuse&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;polyfill&quot;&gt;Polyfill&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleChrome/proxy-polyfill&quot;&gt;GoogleChrome/proxy-polyfill&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このPolyfillでは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;get&lt;/li&gt;
  &lt;li&gt;set&lt;/li&gt;
  &lt;li&gt;apply&lt;/li&gt;
  &lt;li&gt;construct&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のトラップにしか対応していないので、その点ご注意を…。&lt;/p&gt;

&lt;p&gt;以上、ざっとProxyの使い方でした。ここからはProxyの実用例の話です。&lt;/p&gt;

&lt;h3 id=&quot;tips-enumobjectをつくる-enumbuilder&quot;&gt;[Tips] EnumObjectをつくる！ EnumBuilder&lt;/h3&gt;

&lt;p&gt;Enumの定義にオブジェクトを使うケース、よくありますよね。  
あるオブジェクトがEnumである以上、&lt;strong&gt;値が書き換えられないこと&lt;/strong&gt;が厳密に管理されていると良いです。ということで、オブジェクトがEnumとして生まれ変わる&lt;code class=&quot;highlighter-rouge&quot;&gt;EnumBuilder&lt;/code&gt;をつくってみました。
&lt;script src=&quot;https://gist.github.com/aloerina01/9c931d3918242767b9c9729a63b0952f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set / delete&lt;/code&gt;ができないオブジェクトにする&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;して&lt;code class=&quot;highlighter-rouge&quot;&gt;Type.INSERT&lt;/code&gt;のようにスタティックアクセス風に使える&lt;/li&gt;
  &lt;li&gt;既に作られているEnum用オブジェクトにも簡単に適用できる&lt;/li&gt;
  &lt;li&gt;オブジェクトの中にオブジェクトが入れ子になるケースは想定してない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったことを満たす仕様にしたくてこのような形にしました。&lt;/p&gt;

&lt;h3 id=&quot;tips-用途別に制約付きmoduleを定義してクラスベースな実装をする&quot;&gt;[Tips] 用途別に制約付きModuleを定義してクラスベースな実装をする！&lt;/h3&gt;

&lt;p&gt;class構文で用意したModuleを&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;して&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;して使うと本当にクラスをインスタンス化してるように見えて、読みやすいクラスベース(風)の実装となりますよね。&lt;br /&gt;
しかし実際にはインスタンス化されたソレはただのオブジェクトです。やろうと思えばfunctionを外から追加することも、privateな用途で用意した変数を強引に書き換えることもできてしまいます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user01&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;user01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Aloerina'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// やめてー！ private用の変数を書き換えないでー！&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;こうなってしまうと悲惨なので、&lt;strong&gt;Module毎の性質に応じて機能を制約し、不本意な使われ方を防ぐ&lt;/strong&gt;ため、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Private変数を持つModule&lt;/li&gt;
  &lt;li&gt;Immutableな値を定義するModule&lt;/li&gt;
  &lt;li&gt;SingletonなModule&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の3パターンのModuleを定義するための&lt;code class=&quot;highlighter-rouge&quot;&gt;ModuleBuilder&lt;/code&gt;を作ってみました。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/aloerina01/1fa30b0d81384681a4480d80e69893fe.js&quot;&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;既に作られているModuleにも適用できる&lt;/li&gt;
  &lt;li&gt;Moduleのソース内に、どの性質を持っているのかが明記されている&lt;/li&gt;
  &lt;li&gt;今まで通りModuleを&lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt;して&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;して使える。呼び出し側で修正が不要(singletonは除く)&lt;/li&gt;
  &lt;li&gt;上記3つ以外にもパターンを拡張できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったことを意識してつくってみました。Builderパターンなのは言わずもがな。&lt;br /&gt;
任意のクラスと用意されたhandlerを選択してBuilderに渡し、出来上がったProxyをModuleとしてExportさせて使います。以下に実用例を2つ挙げます。&lt;/p&gt;

&lt;h4 id=&quot;immutableなオブジェクト&quot;&gt;Immutableなオブジェクト&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/aloerina01/2d3a998bc7dc8f90c91ddc318e50214a.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;singletonなオブジェクト&quot;&gt;Singletonなオブジェクト&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/aloerina01/d9537a60291363555b95df5c33a4f9da.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;ちなみに、設計当初は&lt;code class=&quot;highlighter-rouge&quot;&gt;Handlers&lt;/code&gt;を組み合わせていろんな性質を持つModuleをつくれるようにしたい(Javaの&lt;a href=&quot;http://dev.classmethod.jp/server-side/java/use_lombok_short/&quot;&gt;lombok&lt;/a&gt;アノテーションみたいな感じで簡単に付与できるようにしたい)と思っていたのですが、handlerの競合が起きるのでやめました…。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;オブジェクトが持つ基本機能を上書くことでJavaScript特有の自由さに制限を設けて堅牢な実装をしよう！&lt;/strong&gt; というお話でした。&lt;/p&gt;

&lt;p&gt;とは言え、やや強引な実装なので粗があることも事実です(上記の例ではSingletonの実装は微妙。そもそもJSでSingletonなんて使わなくてもいいかもなと思ったり…)。&lt;br /&gt;
&lt;strong&gt;クラスベースな書き方をゴリ押しで実現している&lt;/strong&gt;とも言えるので、そもそもJavaScriptの実装としてふさわしいかという議論の余地はありそうです。&lt;/p&gt;

&lt;p&gt;ただ、そういった点も踏まえた上で使うのであれば強力な効果を発揮してくれるのがProxyだと思います。今回は自分で試用してみたものだけをまとめましたが、他にも有用な使い方はあるようです。下記のサイトが参考になりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dealwithjs.io/es6-features-10-use-cases-for-proxy/&quot;&gt;ES6 Features - 10 Use Cases for Proxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もっと良い実装がある、間違っている部分がある、という場合はぜひ&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt; までご一報いただけると嬉しいです。&lt;/p&gt;

&lt;p&gt;現場からは以上です。&lt;/p&gt;</content><author><name></name></author><summary type="html">What is Proxy</summary></entry><entry><title type="html">Vue2.x系のハマりどころ templateとコンパイラを完全解説するよ</title><link href="https://aloerina01.github.io/javascript/vue/2017/03/08/1.html" rel="alternate" type="text/html" title="Vue2.x系のハマりどころ templateとコンパイラを完全解説するよ" /><published>2017-03-08T00:00:00+09:00</published><updated>2017-03-08T00:00:00+09:00</updated><id>https://aloerina01.github.io/javascript/vue/2017/03/08/1</id><content type="html" xml:base="https://aloerina01.github.io/javascript/vue/2017/03/08/1.html">&lt;h3 id=&quot;まえおき&quot;&gt;まえおき&lt;/h3&gt;

&lt;p&gt;Vue2.xでは仮想DOMが使われるようになりました。それに伴い、&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Vue用のテンプレート&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;仮想DOMをレンダリングするための関数&lt;/code&gt;に変換する&lt;/strong&gt;という処理を&lt;strong&gt;コンパイル時に行ってくれる&lt;/strong&gt;仕組みが組み込まれています。&lt;/p&gt;

&lt;p&gt;そして、お手軽にVueを試したい人、プロダクトにVueを使いたい人、コンポーネント志向でアトミックに実装したい人など、様々な用途に応じたテンプレートの書き方(＆コンパイルの方法)を用意してくれています。&lt;/p&gt;

&lt;p&gt;そのためテンプレートの書き方とコンパイルの種類については仕様がやや複雑で、&lt;a href=&quot;https://jp.vuejs.org/v2/guide/installation.html&quot;&gt;公式ドキュメント&lt;/a&gt;だけでは理解が難しくけっこうハマりどころだと感じている(事実ずっぽりハマりました)ので、知見を残しておこうと思います。&lt;/p&gt;

&lt;p&gt;※この記事を書いている時点でのVueのバージョンは&lt;a href=&quot;https://github.com/vuejs/vue/tree/v2.2.1&quot;&gt;2.2.1&lt;/a&gt;です。&lt;/p&gt;

&lt;h3 id=&quot;おさらい-vuejsの利用方法3パターン&quot;&gt;おさらい Vue.jsの利用方法3パターン&lt;/h3&gt;

&lt;p&gt;まずVueの利用方法の確認から。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;埋め込み&lt;/li&gt;
  &lt;li&gt;vue-cli&lt;/li&gt;
  &lt;li&gt;npmモジュール(webpack,  browserify, rollup等の利用)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の3つがありますという単純なお話なので、知ってる場合は読み飛ばしてください。&lt;/p&gt;

&lt;h4 id=&quot;1-script埋め込み&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;埋め込み&lt;/h4&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://unpkg.com/vue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでグローバルに&lt;code class=&quot;highlighter-rouge&quot;&gt;Vue&lt;/code&gt;が用意されます。よくあるHTMLにscript直読込させる方法です。プロダクト開発には向かないですが、軽くVueを試すのには十分ですね。&lt;/p&gt;

&lt;h4 id=&quot;2-vue-cli&quot;&gt;2. vue-cli&lt;/h4&gt;

&lt;p&gt;Vueを使ったSPAをつくる環境を用意してくれるcliです。ビルド用のスクリプトやエントリーポイントになるHTMLなどが一括で生成されます。Reactで言うcreate-react-appのようなもの…というとかえって分かりにくい？&lt;/p&gt;

&lt;p&gt;以下のコマンドを叩きます。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -g vue-cli               &lt;span class=&quot;c&quot;&gt;# まずはcliのグローバルインストール&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vue init webpack &amp;lt;project_name&amp;gt;      &lt;span class=&quot;c&quot;&gt;# webpackを利用したプロジェクトを生成する&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;project_name&amp;gt;                    &lt;span class=&quot;c&quot;&gt;# プロジェクトのディレクトリに移動して…&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install                          &lt;span class=&quot;c&quot;&gt;# 依存関係のあるファイルを落としてきて…&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm run dev                          &lt;span class=&quot;c&quot;&gt;# ビルド&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;公式に「Node.js ベースのツールについて精通していない場合、初心者が vue-cli で始めることは推奨しません」と明記された手法です。たしかにビルド周りの前提知識なしに使うのは難しそうですし、前提知識ある人の多くは自前でビルド環境用意しそうなもので、非推奨であり不人気な気がします😳&lt;/p&gt;

&lt;h4 id=&quot;3-npmモジュール&quot;&gt;3. npmモジュール&lt;/h4&gt;

&lt;p&gt;SPAをつくろうと思ったらやっぱりこの方法に行き着きますよね。行き着きました。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -S vue
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D vue-loader         &lt;span class=&quot;c&quot;&gt;# webpackでビルドする場合&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D vueify             &lt;span class=&quot;c&quot;&gt;# browserifyでビルドする場合&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D rollup-plugin-vue  &lt;span class=&quot;c&quot;&gt;# rollupでビルドする場合&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ユーザー各々のビルド環境にvueを組み込めるよう、&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;browserify&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;rollup&lt;/code&gt;とモジュールバンドラごとにvueのコンパイラが用意されています。&lt;/p&gt;

&lt;p&gt;以降、実用例が多いと勝手に思っている&lt;strong&gt;webpackを使い自前でビルド環境を用意する&lt;/strong&gt;前提で、テンプレートの実装方法とコンパイル方法について話を進めていきます。&lt;/p&gt;

&lt;h3 id=&quot;vueテンプレートの実装方法&quot;&gt;Vueテンプレートの実装方法&lt;/h3&gt;

&lt;p&gt;ここから本題。&lt;br /&gt;
Vueのテンプレートの実装方法は大きく3種類あります。&lt;/p&gt;

&lt;h4 id=&quot;1-templateオプションを使う&quot;&gt;1. templateオプションを使う&lt;/h4&gt;

&lt;p&gt;Vue1.xからあった記法で、コンポーネントオブジェクト内に&lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt;をキーに定義します。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&amp;gt;’  /&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;等でテンプレートを分割する場合も含む&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-render関数を使う&quot;&gt;2. render関数を使う&lt;/h4&gt;

&lt;p&gt;Reactライクな書き方…と言っていいんですかね、微妙なとこですね。個人的には可読性が低くてあまり実用的とは思えない方法です。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3-単一ファイルコンポーネントのtemplatetemplateを使う&quot;&gt;3. 単一ファイルコンポーネントの&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&amp;lt;/template&amp;gt;&lt;/code&gt;を使う&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.vue&lt;/code&gt;の拡張子で表現される単一ファイルコンポーネント。テンプレートとスタイルとスクリプトをひとまとめのコンポーネントとしてカプセル化したものです。&lt;br /&gt;
参考： &lt;a href=&quot;https://jp.vuejs.org/v2/guide/single-file-components.html#ad&quot;&gt;単一ファイルコンポーネント - Vue.js&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello! &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 省略&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;この3つの書き方には、「render関数に変換する(コンパイルする)タイミング」の違いがあります。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;render関数への変換&lt;br /&gt;(コンパイル)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;変換のタイミング&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;1.templateオプション&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;必要&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JITコンパイル時&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;2.render関数&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不要&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;3.単一ファイルコンポーネント&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;必要&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;プリコンパイル時&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;②はそもそもrender関数を利用しているので変換の必要がないのですが、上述のとおり実用性が低いので無視。となると、実用手段は①と③でしょうか。つまりテンプレートの実装方法は、単一ファイルコンポーネントを使うかどうかとどのタイミングでコンパイルするかの2つのポイントから選ぶということになりそうです。&lt;/p&gt;

&lt;h3 id=&quot;プリコンパイルとjitコンパイル&quot;&gt;プリコンパイルとJITコンパイル&lt;/h3&gt;

&lt;p&gt;コンパイルのタイミングには、Webpackなどで事前にされる&lt;strong&gt;プリコンパイル&lt;/strong&gt;と、実行時にコンパイルする&lt;strong&gt;JustInTimeコンパイル&lt;/strong&gt;の2種類があります。上述のとおり、テンプレートの実装方法によりどのタイミングでコンパイル(render関数への変換)を行うかが異なります。&lt;/p&gt;

&lt;h4 id=&quot;単一ファイルコンポーネントをつかっている場合&quot;&gt;単一ファイルコンポーネントをつかっている場合&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Webpack等によりプリコンパイルされる時&lt;/strong&gt;にrender関数への変換がなされます。そのためbundleされたファイルにはrender関数に変換済みの自前ロジックとvue本体(vue.js)が含まれることになります。  
実行時にコンパイルする必要がないので高速で、vue本体にも余計なものが含まれないので軽量です。&lt;/p&gt;

&lt;h4 id=&quot;templateオプションをつかっている場合&quot;&gt;templateオプションをつかっている場合&lt;/h4&gt;

&lt;p&gt;プリコンパイルでは変換されず、&lt;strong&gt;ブラウザにてJITコンパイルされる時&lt;/strong&gt;render関数へ変換されます。そのためWebpack等でビルドしていたとしても、ブラウザで実行するときに(内部的に)コンパイルが走り変換が行われます。  
そのため、実行速度がやや遅くなります。Vue公式ではこう言っています。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;これは十分高速ですが、アプリケーションのパフォーマンスが重要な場合は避けるのが最善です。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;また、bundleされたファイルには&lt;code class=&quot;highlighter-rouge&quot;&gt;vue本体 + コンパイラ&lt;/code&gt;というコンパイラを内包するvue.jsが含まれることになります(そりゃそうですね、実行時にコンパイルしてもらうんですから)。そのためvue.jsの容量がやや大きくなります。&lt;/p&gt;

&lt;h4 id=&quot;比較&quot;&gt;比較&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;render関数への変換&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;読み込むVue&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;単一ファイルコンポーネント&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;プリコンパイル時&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vueロジック本体&lt;br /&gt;(&lt;strong&gt;ランタイム限定ビルド&lt;/strong&gt; されたVue.js)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;templateオプション&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JITコンパイル時&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vueロジック本体 + コンパイラ&lt;br /&gt;(&lt;strong&gt;完全ビルド&lt;/strong&gt; されたVue.js)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;完全ビルドとランタイム限定ビルドの読み込み方&quot;&gt;完全ビルドとランタイム限定ビルドの読み込み方&lt;/h3&gt;

&lt;p&gt;templateの書き方によってコンパイルのタイミングが違い、それにより読み込むVue.jsにも差が出ることがわかりました。次はそれぞれをどうやって読み込むかです。&lt;/p&gt;

&lt;p&gt;vueは&lt;strong&gt;デフォルトでランタイム限定ビルド(されたVue.js)を読み込みます&lt;/strong&gt;[^*1]&lt;br /&gt;
完全ビルド(されたVue.js)を読み込むように変更するには以下の修正が必要です。&lt;/p&gt;

&lt;h4 id=&quot;webpackの場合はwebpackconfigjsに追記&quot;&gt;webpackの場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;に追記&lt;/h4&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'vue$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue/dist/vue.esm.js'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;browserifyの場合はpackagejsonに追記&quot;&gt;browserifyの場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;に追記&lt;/h4&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;browser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;vue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vue/dist/vue.common.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;rollupjsの場合はrollupconfigjsに追記&quot;&gt;rollup.jsの場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;rollup.config.js&lt;/code&gt;に追記&lt;/h4&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'rollup-plugin-alias'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;rollup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vue/dist/vue.esm.js'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;テンプレートの実装&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;render関数への変換&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;必要なvueモジュール&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;単一ファイルコンポーネント&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;プリコンパイル時&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ランタイム限定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;templateオプション&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JITコンパイル時&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;完全&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;軽量高速なランタイム限定をつかいたいけど単一ファイルコンポーネントはいやだ&quot;&gt;軽量＆高速なランタイム限定をつかいたいけど単一ファイルコンポーネントはいやだ&lt;/h3&gt;

&lt;p&gt;そんな人はいませんか、私です。&lt;br /&gt;
Riot.jsなんかも単一ファイル形式ですけど流行りなんですかね。個人的にはテンプレートは別ファイルに切り出したいのですが…。しかも速度とファイル容量を良くしたいからランタイム限定ビルドを使いたい。そんな場合は分離できるそうです。&lt;br /&gt;
参考：&lt;a href=&quot;https://jp.vuejs.org/v2/guide/single-file-components.html#関心の分離について&quot;&gt;単一ファイルコンポーネント 関心の分離について&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみに私はテンプレートだけ別ファイルにしました。
&lt;script src=&quot;https://gist.github.com/aloerina01/b4c99e5c5d554e33beb4c7c35af78108.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;軽量高速なランタイム限定をつかいたいし1系の書き方を踏襲させろ&quot;&gt;軽量＆高速なランタイム限定をつかいたいし1系の書き方を踏襲させろ&lt;/h3&gt;

&lt;p&gt;そんな人いませんか、欲張りさんめ。&lt;br /&gt;
templateオプションは使いつつプリコンパイルも使う。できるみたいですがやったことありません。&lt;br /&gt;
参考： &lt;a href=&quot;https://github.com/ktsn/vue-template-loader&quot;&gt;GitHub - ktsn/vue-template-loader: Vue.js 2.0 template loader for webpack&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;おしまい&quot;&gt;おしまい&lt;/h3&gt;

&lt;p&gt;長くなりました。&lt;br /&gt;
分かりにくい部分や間違っている部分があれば是非&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;までご連絡ください。&lt;/p&gt;</content><author><name></name></author><summary type="html">まえおき</summary></entry></feed>