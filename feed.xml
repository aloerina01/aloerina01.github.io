<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.5">Jekyll</generator><link href="https://aloerina01.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aloerina01.github.io/" rel="alternate" type="text/html" /><updated>2018-07-30T14:32:02+09:00</updated><id>https://aloerina01.github.io/</id><title type="html">mille-feuille code</title><subtitle>Web Developer。同じような過ちを繰り返さないように備忘録を残しています。
</subtitle><entry><title type="html">WebフロントエンジニアがDart × Flutterに入門した話</title><link href="https://aloerina01.github.io/blog/2018-07-01-1" rel="alternate" type="text/html" title="WebフロントエンジニアがDart × Flutterに入門した話" /><published>2018-07-01T00:00:00+09:00</published><updated>2018-07-01T00:00:00+09:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-07-01-1">&lt;p&gt;Flutterとは、Dartという言語でモバイルアプリを開発するためのSDKです。iOSアプリとAndroidアプリを同じコードベースで実装できるとのことで、普段はWebアプリを開発している私にもとっつきやすそうなので入門してみました。&lt;/p&gt;

&lt;p&gt;一通り入門が済んだので、どうやって入門したか、入門してみてどうだったか、Webエンジニアの視点でFlutter・Dartに期待することなどをまとめました。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#基礎知識&quot; id=&quot;markdown-toc-基礎知識&quot;&gt;基礎知識&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dartとは&quot; id=&quot;markdown-toc-dartとは&quot;&gt;Dartとは&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#flutterとは&quot; id=&quot;markdown-toc-flutterとは&quot;&gt;Flutterとは&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#入門の仕方&quot; id=&quot;markdown-toc-入門の仕方&quot;&gt;入門の仕方&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#概要&quot; id=&quot;markdown-toc-概要&quot;&gt;概要&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ハンズオン&quot; id=&quot;markdown-toc-ハンズオン&quot;&gt;ハンズオン&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#dart-sdkのインストール&quot; id=&quot;markdown-toc-dart-sdkのインストール&quot;&gt;Dart SDKのインストール&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#flutterのインストール&quot; id=&quot;markdown-toc-flutterのインストール&quot;&gt;Flutterのインストール&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#vscodeプラグインのインストール&quot; id=&quot;markdown-toc-vscodeプラグインのインストール&quot;&gt;VSCodeプラグインのインストール&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#android端末検証端末の接続そしてdeploy&quot; id=&quot;markdown-toc-android端末検証端末の接続そしてdeploy&quot;&gt;Android端末(検証端末)の接続、そしてDeploy&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#入門してみてどうだったか&quot; id=&quot;markdown-toc-入門してみてどうだったか&quot;&gt;入門してみてどうだったか&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dart言語について&quot; id=&quot;markdown-toc-dart言語について&quot;&gt;Dart言語について&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#開発環境について&quot; id=&quot;markdown-toc-開発環境について&quot;&gt;開発環境について&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#flutterについて&quot; id=&quot;markdown-toc-flutterについて&quot;&gt;Flutterについて&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おすすめの読み物&quot; id=&quot;markdown-toc-おすすめの読み物&quot;&gt;おすすめの読み物&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;基礎知識&quot;&gt;基礎知識&lt;/h3&gt;

&lt;h4 id=&quot;dartとは&quot;&gt;&lt;a href=&quot;https://www.dartlang.org/&quot;&gt;Dart&lt;/a&gt;とは&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Googleが開発している言語&lt;/li&gt;
  &lt;li&gt;JavaやJavaScriptに似たシンタックス&lt;/li&gt;
  &lt;li&gt;型を付けても付けなくても書ける&lt;/li&gt;
  &lt;li&gt;DartVM上で動く&lt;/li&gt;
  &lt;li&gt;JavaScriptにコンパイルできる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dartの文法については&lt;a href=&quot;https://www.dartlang.org/guides/language/language-tour&quot;&gt;Language Tour&lt;/a&gt;をさらっと眺めるだけでも結構把握できると思います。普段JavaやJavaScriptを使っている人ならすぐに書けそうなワクワク感を味わえるかも(私がそうでした)。&lt;/p&gt;

&lt;h4 id=&quot;flutterとは&quot;&gt;&lt;a href=&quot;https://flutter.io/&quot;&gt;Flutter&lt;/a&gt;とは&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;iOSとAndroidアプリを開発するためのSDK&lt;/li&gt;
  &lt;li&gt;マテリアルデザインに則ったUIパーツを標準提供&lt;/li&gt;
  &lt;li&gt;hot reloadでサクサクアプリ開発できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React Nativeと比較してみて感じたことは&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;FlutterにはOSのガイドラインに則ったWidgetが&lt;strong&gt;公式に&lt;/strong&gt;用意されている&lt;/li&gt;
  &lt;li&gt;Widgetでの画面構築はHTML＆CSSに慣れきった人にはツライ(詳細後述します)&lt;/li&gt;
  &lt;li&gt;どちらも設計が&lt;strong&gt;ステートレスView＆単一データフロー&lt;/strong&gt;になるという点は似ている&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こんな感じです。どんなWidgetがあるかを把握し使いこなせれば高速に開発できる反面、慣れるまで(暗記するまで)がけっこうしんどい…という所感です。&lt;/p&gt;

&lt;h3 id=&quot;入門の仕方&quot;&gt;入門の仕方&lt;/h3&gt;

&lt;h4 id=&quot;概要&quot;&gt;概要&lt;/h4&gt;
&lt;p&gt;公式ドキュメントが丁寧に作られているので、それに沿っていくだけで開発環境の準備ができます。私は&lt;strong&gt;Mac × Visual Studio Code&lt;/strong&gt;で開発したかったので、ざっくり以下のことをしました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Dart SDK&lt;/strong&gt;のインストール(参考：&lt;a href=&quot;https://www.dartlang.org/tools/sdk&quot;&gt;Install Dart&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Flutter&lt;/strong&gt;のインストール(参考：&lt;a href=&quot;https://flutter.io/get-started/install/&quot;&gt;Get Started: Install - Flutter&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;開発したいアプリのOSに応じて&lt;strong&gt;Xcode, Android Studio&lt;/strong&gt;のインストール&lt;/li&gt;
  &lt;li&gt;VSCode用の&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code&quot;&gt;Dartプラグイン&lt;/a&gt;、&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=franzsilva.fs-flutter-snippets&quot;&gt;Flutterプラグイン&lt;/a&gt;のインストール&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Flutterの公式ドキュメントにはエディタの設定の方法まで書いてあり、VSCode以外にもAndroid Studioでの設定方法が載っています。Androidアプリ開発者、Webアプリ開発者の両方にスムーズに使ってもらうことを想定しているのでしょうか(ありがたいですね)。&lt;/p&gt;

&lt;h4 id=&quot;ハンズオン&quot;&gt;ハンズオン&lt;/h4&gt;

&lt;h5 id=&quot;dart-sdkのインストール&quot;&gt;Dart SDKのインストール&lt;/h5&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap dart-lang/dart
brew install dart --with-content-shell --with-dartium
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;flutterのインストール&quot;&gt;Flutterのインストール&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://flutter.io/get-started/install/&quot;&gt;Get Started: Install - Flutter&lt;/a&gt;からzipを落とし展開しPATHを通します。そのあとは&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter doctor
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;このコマンドを叩くと、Flutterの開発に必要なものが揃っているかどうか、揃えるために次に何をすればいいのかを教えてくれます。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Doctor summary &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;to see all details, run flutter doctor -v&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;- &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x] &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Flutter &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Channel beta, v0.4.4, on Mac OS X 10.12.6 16G1212, locale ja-JP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;✗] Android toolchain - develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Android devices
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;✗ Unable to locate Android SDK.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;Install Android Studio from: https://developer.android.com/studio/index.html&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;On first launch it will assist you &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;installing the Android SDK components.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;or visit https://flutter.io/setup/#android-setup &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;detailed instructions&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;If Android SDK has been installed to a custom location, &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ANDROID_HOME&lt;/span&gt; to that location.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;!] iOS toolchain - develop &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;iOS devices
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;✗ Xcode installation is incomplete; a full installation is necessary &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;iOS development.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;Download at: https://developer.apple.com/xcode/download/&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;Or install Xcode via the App Store.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;Once installed, run:&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;✗ libimobiledevice and ideviceinstaller are not installed. To install, run:&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;brew install --HEAD libimobiledevice&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;brew install ideviceinstaller&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;✗ ios-deploy not installed. To install:&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;brew install ios-deploy&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;✗ CocoaPods not installed.&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;CocoaPods is used to retrieve the iOS platform side&lt;span class=&quot;s1&quot;&gt;'s plugin code that responds to your plugin usage on the Dart side.**
**Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.**
**For more info, see https://flutter.io/platform-plugins**
**To install:**
**brew install cocoapods**
**pod setup**
[✗] Android Studio (not installed)
[!] VS Code (version 1.23.1)
[!] Connected devices
    ! No devices available

! Doctor found issues in 5 categories.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(Android Studioがインストールされてないよ！等、教えてくれていますね)&lt;/p&gt;

&lt;p&gt;このコマンドが大変ありがたく、その後もつまずいたらとりあえず&lt;code class=&quot;highlighter-rouge&quot;&gt;flutter doctor&lt;/code&gt;を叩くと何かしら前に進みました。開発環境の構築でハマるのは入門あるあるだと思うので、Flutterの心遣いに感謝するばかりです。&lt;/p&gt;

&lt;h5 id=&quot;vscodeプラグインのインストール&quot;&gt;VSCodeプラグインのインストール&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code&quot;&gt;Dartプラグイン&lt;/a&gt;、&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=franzsilva.fs-flutter-snippets&quot;&gt;Flutterプラグイン&lt;/a&gt;をインストールしたものの、VSCodeのコマンドパレットから&lt;code class=&quot;highlighter-rouge&quot;&gt;Flutter: New Project&lt;/code&gt;をしようとしたらFlutter SDKがないと怒られました。設定にFlutterの所在を追記することで解決。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;dart.flutterSdkPath&quot;: &quot;/Users/aloerina/flutter&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ちなみにNew ProjectでつくられたディレクトリにはHelloWorld的なコードが最初から入っていました。&lt;/p&gt;

&lt;h5 id=&quot;android端末検証端末の接続そしてdeploy&quot;&gt;Android端末(検証端末)の接続、そしてDeploy&lt;/h5&gt;

&lt;p&gt;今回はAndroidアプリで検証をします。&lt;br /&gt;
USBデバッグを許可した実機を接続するか、Android Studioのエミュレータを起動するかが必要なので後者を選択しました。Android Studioの公式の&lt;a href=&quot;https://developer.android.com/studio/run/managing-avds&quot;&gt;仮想端末の作成と管理&lt;/a&gt;に書いてある通りにやるとスムーズでした。&lt;/p&gt;

&lt;p&gt;エミュレータを起動したらVSCodeのステータスバー(右下)に起動したエミュレータ名が書いてあればOKです。書いてない場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;flutter emulators&lt;/code&gt;を叩いて表示に従えばOKです。&lt;/p&gt;

&lt;p&gt;検証端末の準備ができたらflutterを起動します。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter run
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでDeployが済んでエミュレータにアプリが表示されます🎉&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;🔥  To hot reload your app on the fly, press “r”. To restart the app entirely, press “R”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;hot reloadの準備できてるよ！といって待機してくれていますね。これで開発環境の構築は完了です。ここからはチュートリアルを試したり写経したりして楽しみました。&lt;/p&gt;

&lt;h3 id=&quot;入門してみてどうだったか&quot;&gt;入門してみてどうだったか&lt;/h3&gt;

&lt;h4 id=&quot;dart言語について&quot;&gt;Dart言語について&lt;/h4&gt;

&lt;p&gt;新しい言語を書いているとは思えないくらい、学習コストほぼゼロで読み書きできることに感動します。hot reloadと相まって新しいことを試してすぐに画面に反映されるスピード感・ワクワク感はたまりません。&lt;/p&gt;

&lt;p&gt;すぐ書ける楽しみだけでなく、JavaScriptのような手軽さや、静的型付けやジェネリクスなどを取り揃えた安心感などにも好感でした。公式の&lt;a href=&quot;https://www.dartlang.org/guides/language/language-tour#important-concepts&quot;&gt;Important Concepts&lt;/a&gt;にこれらに関係するDartのコンセプトがまとまっていたので、ざっくり意訳してみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;変数に代入できる値はすべて(数値、関数、null、など何でも)&lt;em&gt;Object&lt;/em&gt;であり、すべての&lt;em&gt;Object&lt;/em&gt;は&lt;em&gt;Class&lt;/em&gt;のインスタンスです。すべての&lt;em&gt;Object&lt;/em&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;クラスを継承します。&lt;/li&gt;
  &lt;li&gt;Dartは強く型付けされていますが、Dartは型を推測できるため型定義は必須ではありません。型が不明であることを明示的に宣言したいときは、特殊な型である&lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic&lt;/code&gt;を使用することができます。&lt;/li&gt;
  &lt;li&gt;Dartは&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;dynamic&amp;gt;&lt;/code&gt;などのジェネリクスに対応しています。&lt;/li&gt;
  &lt;li&gt;Dartは&lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;などのトップレベル関数、staticメソッドやインスタンスメソッド、ローカル関数などを定義できます。&lt;/li&gt;
  &lt;li&gt;Javaと違い&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;などのスコープ定義はありません。代わりに変数名を&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;から始めることでprivateと認識します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;変数のスコープを&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;で判別する点は好みではないのですが(命名は書く側の好きにさせて欲しい)、それ以外はいいと思いました。Interfaceとジェネリクスがあると手堅く設計できますし、DIなども可能になりますよね。&lt;code class=&quot;highlighter-rouge&quot;&gt;async/await&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;Stream&lt;/code&gt;などで&lt;a href=&quot;https://www.dartlang.org/guides/language/language-tour#asynchrony-support&quot;&gt;非同期処理&lt;/a&gt;を自然に書けるのもステキです。&lt;/p&gt;

&lt;p&gt;言語機能を更に深掘りするには&lt;a href=&quot;https://www.dartlang.org/guides/language/effective-dart&quot;&gt;Effective Dart&lt;/a&gt;がおすすめです。Dartはとにかく公式ドキュメントの充実っぷりがすごいですね。&lt;/p&gt;

&lt;p&gt;魅力的な言語だと思うので今後も継続的に発展していってほしいと思います。いずれAltJSのひとつとなる日が来たりするのでしょうか。&lt;/p&gt;

&lt;h4 id=&quot;開発環境について&quot;&gt;開発環境について&lt;/h4&gt;

&lt;p&gt;べた褒め続きで少々気まずさもありますが、私が開発環境に必要だと思う&lt;strong&gt;セットアップ・メンテの手軽さ&lt;/strong&gt;と&lt;strong&gt;開発速度&lt;/strong&gt;が保たれていてよかったです。特に上述した&lt;code class=&quot;highlighter-rouge&quot;&gt;flutter doctor&lt;/code&gt;コマンドには幾度となく助けられました。問題にぶち当たってもググらず解決できるってすごいですよね。&lt;/p&gt;

&lt;p&gt;hot reloadは普段Webフロントを開発している自分には必須の機能でした。アプリはビルドやら何やらに時間のかかるイメージだったので(あくまでイメージです)、アプリ開発への敷居が下がったように感じました。&lt;/p&gt;

&lt;p&gt;また、些細なことかもしれませんがVSCodeのプラグインが&lt;strong&gt;閉じカッコの位置をコメントアウトのように表示してくれる&lt;/strong&gt;のが便利でした(コメントアウト「のように」表示しているだけで実際にコメントが追記されるわけではありません)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-07-01-1-editor.png&quot; alt=&quot;editor sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この機能に初めて出会って感動したのですが、これって一般的なんでしょうか？&lt;/p&gt;

&lt;h4 id=&quot;flutterについて&quot;&gt;Flutterについて&lt;/h4&gt;

&lt;p&gt;OS推奨のUIがWidgetとして網羅されているため誰でも一定レベルのデザインのアプリを作れるのはすごいと思いますが、いかんせんWidgetの使い方にクセがありました。&lt;/p&gt;

&lt;p&gt;画面の情報すべてをWidgetで表現するため、Layoutに関わる&lt;a href=&quot;https://docs.flutter.io/flutter/widgets/Padding-class.html&quot;&gt;Padding&lt;/a&gt;や&lt;a href=&quot;https://docs.flutter.io/flutter/widgets/Align-class.html&quot;&gt;Alignment&lt;/a&gt;などもWidgetとして組み込まなければなりません。たとえばカードリスト画面を作る場合、以下のようにWidgetを入れ子にする必要があります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Scaffold Widget (画面全体を構成する) 
  &amp;gt; ListView Widget (Scaffoldの中にListViewを配置する)
    &amp;gt; Padding Widget (ListView内の要素にPaddingをつける)
      &amp;gt; Card Widget (Paddingのとられた空間にカードを配置する)
        &amp;gt; Column Widget (カード内に復数の要素を縦積みする)
          &amp;gt; Padding Widget (縦積みする要素にPaddingをつける)
            &amp;gt; Text Widget (タイトルなどの文字列を表示する)
              &amp;gt; TextAlign Widget (文字列のAlignmentを指定する)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;表示要素を表す&lt;code class=&quot;highlighter-rouge&quot;&gt;ListView&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Card&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt;と並列関係で&lt;code class=&quot;highlighter-rouge&quot;&gt;Padding&lt;/code&gt;などが存在するわけです。ものによってもっと簡単に記述できる仕組みもあるのですが、HTMLで要素を構成してCSSで装飾する手法に慣れている人にはかなり抵抗があるのではないでしょうか…。&lt;/p&gt;

&lt;p&gt;ただ、アプリのビルドなど詳しく知らない部分を棚上げしたまま開発できる点はよかったです。とりあえず動くものを作ってみてリリースするときに改めてキャッチアップする、とすると開発意欲を落とさず完成にこぎつけそうです。&lt;/p&gt;

&lt;h3 id=&quot;おすすめの読み物&quot;&gt;おすすめの読み物&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DartとFlutterの魅力を知るには &lt;a href=&quot;https://adwd.github.io/dart-flutter-slide/#/&quot;&gt;DART/FLUTTER 入門 + 最強の勤怠アプリを作った話&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Flutterで何が作れるかを把握するには &lt;a href=&quot;https://flutter.io/showcase/&quot;&gt;Showcase - Flutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;とりあえずFlutterで動くサンプルを作るなら &lt;a href=&quot;https://codelabs.developers.google.com/codelabs/flutter/index.html?index=..%2F..%2Findex#0&quot;&gt;Building Beautiful UIs with Flutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Firebaseと組み合せる方法を理解するには &lt;a href=&quot;https://codelabs.developers.google.com/codelabs/flutter-firebase/index.html?index=..%2F..%2Findex#0&quot;&gt;Firebase for Flutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Widgetでレイアウトする方法を理解するには &lt;a href=&quot;https://flutter.io/tutorials/layout/&quot;&gt;Building Layouts in Flutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Stateの概念を理解するなら &lt;a href=&quot;https://flutter.io/tutorials/interactive/&quot;&gt;Adding Interactivity to Your Flutter App&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Flutterで作られたアプリのコードリーディングには &lt;a href=&quot;https://github.com/konifar/droidkaigi2018-flutter&quot;&gt;konifar/droidkaigi2018-flutter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本文中で紹介した以外にも、これらを読みながら実装をしていくとかなり理解が捗りました。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;Webアプリとネイティブアプリそれぞれのメリット・デメリットや向き不向きを把握していると、なにか作ろうと思ったときに引出しが多くなっていいんじゃないかなと思います。その第一歩としてDartとFlutterは有用だと思いました。Webエンジニアが取り組みやすいネイティブアプリ開発のプラットフォームであるFlutter、JSに似たシンタックスで書きやすいDart。これから更に理解を深めていこうと思います。&lt;br /&gt;
DartやFlutterについて語りたい場合は是非&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;までどうぞ。&lt;/p&gt;</content><author><name></name></author><summary type="html">Flutterとは、Dartという言語でモバイルアプリを開発するためのSDKです。iOSアプリとAndroidアプリを同じコードベースで実装できるとのことで、普段はWebアプリを開発している私にもとっつきやすそうなので入門してみました。</summary></entry><entry><title type="html">ブランチをMergeする前にbaseブランチの履歴が進んでいないかを確認するスクリプトを書いた</title><link href="https://aloerina01.github.io/blog/2018-06-15-1" rel="alternate" type="text/html" title="ブランチをMergeする前にbaseブランチの履歴が進んでいないかを確認するスクリプトを書いた" /><published>2018-06-15T00:00:00+09:00</published><updated>2018-06-15T00:00:00+09:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-06-15-1">&lt;p&gt;git-flowで運用していると、releaseブランチとhotfixブランチなど複数のブランチからリリースが行われるケースがあります。その場合リリースされたものを次のreleaseブランチにきちんと反映しないと、ソースが巻き戻ってしまう事故に繋がります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-06-15-1-main.jpg&quot; alt=&quot;flow図&quot; /&gt;
(あくまでイメージ図です、developブランチなどの詳細は省略しています)&lt;/p&gt;

&lt;p&gt;私の業務ではgit-flowを少しカスタマイズした運用をしています。なのでまさに上図のように&lt;strong&gt;hotfixブランチをreleaseブランチに反映し忘れる&lt;/strong&gt;問題を起こしてしまうことがありました。これを防ぐための方法はいろいろありますが、今回は&lt;strong&gt;「releaseブランチとmasterブランチが枝分かれしたコミット」&lt;/strong&gt;と&lt;strong&gt;「最新のmasterブランチのコミット」&lt;/strong&gt;を比較し結果を教えてくれるスクリプトを用意してみました。&lt;/p&gt;

&lt;p&gt;以下のような使用を想定しています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CIに仕込み、releaseブランチのPull Requestに結果をコメントさせる&lt;/li&gt;
  &lt;li&gt;slack botに仕込み、定期的に結果を通知する&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;実装&quot;&gt;実装&lt;/h3&gt;

&lt;h4 id=&quot;全体の構成&quot;&gt;全体の構成&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;masterブランチ(baseとなるブランチ)の最新コミットの&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;を取得する&lt;/li&gt;
  &lt;li&gt;ターゲットとなるブランチとmasterブランチ(baseとなるブランチ)が枝分かれした&lt;code class=&quot;highlighter-rouge&quot;&gt;commit id&lt;/code&gt;を取得する&lt;/li&gt;
  &lt;li&gt;それらを比較し、差分がないかどうかを判定する&lt;/li&gt;
  &lt;li&gt;CIから実行された場合は判定結果をPull Requestにコメントする&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;ソース&quot;&gt;ソース&lt;/h4&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -e

&lt;span class=&quot;nv&quot;&gt;text_color_red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[37;41;1m&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;text_color_green&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[37;42;1m&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;text_color_reset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;33[0m&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 第1引数にチェック対象のbranch&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;target_branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 第2引数に比較対象のbranch、指定がなければmasterとする&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;base_branch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

git fetch

&lt;span class=&quot;c&quot;&gt;# base_branchの最新のcommitを取得する&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;latest_commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git log origin/&lt;span class=&quot;nv&quot;&gt;$base_branch&lt;/span&gt; -n 1 | head -1 | sed -e &lt;span class=&quot;s2&quot;&gt;&quot;s/commit &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# target_branchがbase_branchのどのcommitから枝分かれしたのかを調べる&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;base_commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git show-branch --merge-base origin/&lt;span class=&quot;nv&quot;&gt;$target_branch&lt;/span&gt; origin/&lt;span class=&quot;nv&quot;&gt;$base_branch&lt;/span&gt; | head -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;latest commit: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git log &lt;span class=&quot;nv&quot;&gt;$latest_commit&lt;/span&gt; --oneline | head -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;based  commit: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;git log &lt;span class=&quot;nv&quot;&gt;$base_commit&lt;/span&gt; --oneline | head -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 「base_branchの最新commit」と「枝分かれしたcommit」を比較&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$latest_commit&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$base_commit&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;最新の&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$base_branch&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;が取り込まれています&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;✅ &quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;APPROVE&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text_color_green&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text_color_reset&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$base_branch&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;が進んでいる可能性があります&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;🚫 &quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;REQUEST_CHANGES&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text_color_red&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text_color_reset&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# CIによる実行でなければここで終了&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CI&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CI&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 該当のPull Requestを取得できているか確認する&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CI_PULL_REQUEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CI_PULL_REQUEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Fail to find a pull request.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pr_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CI_PULL_REQUEST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | sed -e &lt;span class=&quot;s2&quot;&gt;&quot;s/^.*pull&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 結果をPull RequestにReviewとしてコメントする&lt;/span&gt;
curl -XPOST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -H &lt;span class=&quot;s2&quot;&gt;&quot;Authorization: token &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GITHUB_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -H &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -d &lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$icon$comment&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$event&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 https://github.com/api/v3/repos/&lt;span class=&quot;nv&quot;&gt;$CIRCLE_PROJECT_USERNAME&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$CIRCLE_PROJECT_REPONAME&lt;/span&gt;/pulls/&lt;span class=&quot;nv&quot;&gt;$pr_number&lt;/span&gt;/reviews
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(CircleCIを使う前提で変数を定義しています)&lt;/p&gt;

&lt;p&gt;ソースは&lt;a href=&quot;https://github.com/aloerina01/check-master-history&quot;&gt;GitHub&lt;/a&gt;でも公開しています。&lt;/p&gt;

&lt;h4 id=&quot;感想&quot;&gt;感想&lt;/h4&gt;

&lt;h5 id=&quot;ログに色をつけたらいい感じでした&quot;&gt;ログに色をつけたらいい感じでした&lt;/h5&gt;
&lt;p&gt;ログを読みやすくしたくて文字色や背景色を変えています。色属性を変数化したら、ログの見やすさもコードの見やすさもいい感じでした。&lt;a href=&quot;https://qiita.com/dojineko/items/49aa30018bb721b0b4a9&quot;&gt;こちらの記事&lt;/a&gt;の色見本帳がとても便利で感謝です。&lt;/p&gt;

&lt;h5 id=&quot;head-と-tail-が便利で乱用しました&quot;&gt;head と tail が便利で乱用しました&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head -n&lt;/code&gt;は&lt;strong&gt;入力の冒頭からn行を抽出し出力する&lt;/strong&gt;コマンドです。&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;git show-branch&lt;/code&gt;は複数に渡り情報が表示されるので、head/tailを使うと最新/最古の情報を抽出できて便利でした。&lt;/p&gt;

&lt;h5 id=&quot;sedも便利で乱用しました&quot;&gt;sedも便利で乱用しました&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;は&lt;strong&gt;入力をコマンドに従って処理し出力する&lt;/strong&gt;コマンドです。今回は&lt;code class=&quot;highlighter-rouge&quot;&gt;sed -e s/置換前/置換後&lt;/code&gt;として文字列を置換します。置換前で&lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;に入れた部分(グループ化した部分)を、置換後に&lt;code class=&quot;highlighter-rouge&quot;&gt;\1(特殊変数)&lt;/code&gt;で抜き出しています。これが便利すぎて、入力から一部の文字列を切りとって出力する場面では乱用してしまいます。&lt;/p&gt;

&lt;h5 id=&quot;そこそこ活躍するスクリプトになりました&quot;&gt;そこそこ活躍するスクリプトになりました&lt;/h5&gt;

&lt;p&gt;Merge漏れ事故の対策は他にもいろいろ案がある中、諸々の事情により一旦の場しのぎとして作った程度でしたが、そこそこ活躍しているようで作った甲斐がありました。shellを書く機会があまりないので、作ること自体も楽しめました。&lt;/p&gt;

&lt;p&gt;現場からの報告は以上です。引き続きよろしくお願いします。&lt;/p&gt;</content><author><name></name></author><summary type="html">git-flowで運用していると、releaseブランチとhotfixブランチなど複数のブランチからリリースが行われるケースがあります。その場合リリースされたものを次のreleaseブランチにきちんと反映しないと、ソースが巻き戻ってしまう事故に繋がります。</summary></entry><entry><title type="html">コマンド一つでReactの開発環境が100％整うライブラリx0の紹介</title><link href="https://aloerina01.github.io/blog/2018-05-30-1" rel="alternate" type="text/html" title="コマンド一つでReactの開発環境が100％整うライブラリx0の紹介" /><published>2018-05-30T00:00:00+09:00</published><updated>2018-05-30T00:00:00+09:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-05-30-1">&lt;h3 id=&quot;はじめに&quot;&gt;はじめに&lt;/h3&gt;

&lt;p&gt;いきなりですが、Reactの開発環境を用意するのって大変だと思うのです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM&lt;/code&gt;をnpm installする&lt;/li&gt;
  &lt;li&gt;ES6+で書くためにpolyfillを入れる&lt;/li&gt;
  &lt;li&gt;ES6+で書くためにBabelの設定をする&lt;/li&gt;
  &lt;li&gt;JSXを書くためにBabelの設定をする&lt;/li&gt;
  &lt;li&gt;ビルドするためにWebpackの設定をする&lt;/li&gt;
  &lt;li&gt;bundleしたJSを読み込むindexページのHTMLを作成する&lt;/li&gt;
  &lt;li&gt;作ったものを確認するためにローカルサーバの設定(実装)をする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にもサーバサイドのことまで含めると更にやることが増えます。知っていれば大した作業ではないのかもしれませんが、セットアップってたまにしかやらないのでやり方を忘れがち、そしてハマりがちです。ちょっとReact触ってみよう、ちょっとコンポーネント試作してみよう、という意欲を消滅させるには十分すぎる障害だと思います。&lt;/p&gt;

&lt;p&gt;先日、この問題をコマンド一つで解決してくれる &lt;strong&gt;&lt;a href=&quot;https://compositor.io/x0/&quot;&gt;x0&lt;/a&gt;&lt;/strong&gt; というライブラリを触ってみたので、使い方と使用感をまとめました。&lt;/p&gt;

&lt;h3 id=&quot;whats-this&quot;&gt;What’s this&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018-05-30-hellox0.gif&quot; alt=&quot;x0demo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;a href=&quot;https://compositor.io/x0/&quot;&gt;@compositor/x0&lt;/a&gt; より&lt;/small&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Zero-config React development environment and static site generator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;設定なしで使えるReact開発環境＆静的サイトジェネレーター&lt;/strong&gt;とのことです。上述したnpm install・ビルドスクリプトの用意・ローカルサーバの用意などをまとめてやってくれます。これでReactのコンポーネントを書くことのみに専念できますね。&lt;/p&gt;

&lt;h3 id=&quot;how-to-use&quot;&gt;How to use&lt;/h3&gt;

&lt;h4 id=&quot;1-install-する&quot;&gt;1. install する&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install -g @compositor/x0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;公式ではグローバルに入れて使うことを促していますが、私は作業ディレクトリにdevDependencyでインストールしています。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir sample-x0
$ cd sample-x0
$ npm init
$ npm install -D @compositor/x0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-componentを実装する&quot;&gt;2. componentを実装する&lt;/h4&gt;

&lt;p&gt;今回はこのようなディレクトリ構成にします。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sample-x0
  ├ package.json
  └ components
      ├ HelloWorld.js
      ├ ...
      └ ...(その他コンポーネント)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;HelloWorld.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3-ビルドデプロイする&quot;&gt;3. ビルド＆デプロイする&lt;/h4&gt;

&lt;p&gt;ビルドしてローカルサーバにデプロイするには&lt;code class=&quot;highlighter-rouge&quot;&gt;x0 [componentを含むディレクトリ]&lt;/code&gt;というコマンドを叩きます。&lt;code class=&quot;highlighter-rouge&quot;&gt;--open (-o)&lt;/code&gt;のオプションをつけると、サーバ起動後にデフォルトブラウザを起動してくれます。&lt;/p&gt;

&lt;p&gt;グローバルインストールしている場合&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ x0 components --open
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;devDependencyでインストールしている場合&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npx x0 components --open
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;デプロイされると&lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt;以下に配置したコンポーネント名が一覧で表示され、選択するとそのコンポーネントが描画されたページへ遷移します。&lt;/p&gt;

&lt;h4 id=&quot;4-エントリーポイントをつくる&quot;&gt;4. エントリーポイントをつくる&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt;以下に配置されたコンポーネントはそれぞれ単体で画面に表示されますが、それらを組み合わせた画面をつくることもできます。&lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt;以下にいくつかのコンポーネントとエントリーポイントとなる&lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;を実装します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Title.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Contents.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;main.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./Title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Contents&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./Contents'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Fruits Basket&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Contents&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'apple'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'orange'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'peach'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これで&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:8080/main&lt;/code&gt;に2つのコンポーネントが表示されます。&lt;/p&gt;

&lt;h3 id=&quot;feeling&quot;&gt;Feeling&lt;/h3&gt;

&lt;p&gt;使用感はけっこう良かったです。実際に利用した場面を挙げておきます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最新バージョンのReactを試す&lt;/li&gt;
  &lt;li&gt;複雑なロジックを持つコンポーネントを試作する&lt;/li&gt;
  &lt;li&gt;コンポーネントのPlayBookをつくる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最新バージョンのReactを軽く触ろうと思ったとき、本当にシンプルに&lt;strong&gt;コンポーネントのロジックのみを実装して動作確認までできた&lt;/strong&gt;ので、お手軽さは100点でした。&lt;/p&gt;

&lt;p&gt;また、指定したディレクトリ以下のコンポーネントを一覧表示してくれるので、簡易版のコンポーネントPlayBookとしても利用できました。&lt;/p&gt;

&lt;p&gt;その他にも、まだ触っていませんが役立ちそうな機能がいくつかありました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;webpackの設定を時前で用意してbundleできる
    &lt;ul&gt;
      &lt;li&gt;CLIのオプション&lt;code class=&quot;highlighter-rouge&quot;&gt;--webpack&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;のpathを指定できるので、productionビルド時は自前のビルドスクリプトを通す、等できそう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;画面に表示するHTMLを自前で用意して差し替えられる
    &lt;ul&gt;
      &lt;li&gt;PlayBookのIndexページをリッチにできそう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mdx-js/mdx&quot;&gt;MDX&lt;/a&gt;を使える(使ったことはない)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;気になる点は&lt;strong&gt;公式のドキュメントが薄い&lt;/strong&gt;点です。かなりのことを自動でやってくれているので、その内部がどうなっているのか、どこをカスタマイズできるのか、についてもう少し簡単に把握できるとより使いやすいと思います。&lt;/p&gt;

&lt;p&gt;もう1点気になるのは&lt;strong&gt;依存ライブラリがかなり多い点&lt;/strong&gt;です。これも自動でいろいろしてくれる代償ですが、babelのPluginだけでも相当数依存していました。&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-stage-0&lt;/code&gt;まで使うのは個人的にはやり過ぎと感じました。&lt;/p&gt;

&lt;h3 id=&quot;create-react-appとの使い分け&quot;&gt;create-react-appとの使い分け&lt;/h3&gt;

&lt;p&gt;最後にcreate-react-appとの使い分けについてですが、&lt;strong&gt;ローカルで実行する環境の用意&lt;/strong&gt;や&lt;strong&gt;ちょっとしたものの開発&lt;/strong&gt;が目的ならx0で十分という印象です。&lt;/p&gt;

&lt;p&gt;逆に&lt;strong&gt;production用のプロジェクトの簡易セットアップ&lt;/strong&gt;にはcreate-react-appを使うほうが後々カスタマイズしやすいかなと思います(実績の面でも良いかなと)。&lt;br /&gt;
create-react-appの使い方については&lt;a href=&quot;/blog/2017-02-28-1&quot;&gt;Reactを秒速で使い始められるcreate-react-appの使い方と使い心地&lt;/a&gt;にまとめてありますので併せてどうぞ。&lt;/p&gt;

&lt;p&gt;ちなみに、大規模なアプリケーションであったりビルドの仕方やテストなど細かいところまで調整したいときはライブラリに頼らず全部自前で用意しています。適材適所使い分けて幸せな開発ライフを送っていきたいですね。&lt;/p&gt;</content><author><name></name></author><summary type="html">はじめに</summary></entry><entry><title type="html">ForkリポジトリをFork元から切り離してスタンドアローンなリポジトリにする</title><link href="https://aloerina01.github.io/tip/2018-05-21-1" rel="alternate" type="text/html" title="ForkリポジトリをFork元から切り離してスタンドアローンなリポジトリにする" /><published>2018-05-21T00:00:00+09:00</published><updated>2018-05-21T00:00:00+09:00</updated><id>https://aloerina01.github.io/tip/1</id><content type="html" xml:base="https://aloerina01.github.io/tip/2018-05-21-1">&lt;p&gt;Forkして作ったリポジトリだけれどFork元にMergeしたりせず普通のリポジトリとして扱いたい、という稀なケースの対応を経験したので知見をメモします。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;To detach the fork and turn it into a standalone repository on GitHub, contact GitHub Support. If the fork has forks of its own, let support know if the forks should move with your repository into a new network or remain in the current network.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と&lt;a href=&quot;https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/#commit-was-made-in-a-fork&quot;&gt;Github Help&lt;/a&gt;に書いてありました。&lt;/p&gt;

&lt;p&gt;Fork元から切り離しStandaloneなリポジトリにしたい場合はGithub Supportに連絡してね、そのときはリポジトリをどこのネットワーク化に配置したいのかも教えてね、とのことです。&lt;br /&gt;
自身ではできないようです。&lt;/p&gt;

&lt;h3 id=&quot;実際にやってみたときのこと&quot;&gt;実際にやってみたときのこと&lt;/h3&gt;

&lt;p&gt;拙い英語で連絡しました。2通やり取りしたのですが、だいたい翌日の朝方2時〜3時くらいに返信が来たのでとても素早く対応いただけたと感じました。&lt;/p&gt;

&lt;p&gt;やり取りの内容の雰囲気を載せておきます(原文ママではないです)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1通目&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;In the below repository, I want to detach the fork and turn it into a standalone repository.&lt;br /&gt;
https://github.com/aloerina01/aloerina01.github.io&lt;/p&gt;

  &lt;p&gt;How can I do ? 
 Thank you for being patient with my English.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;1通目の返信&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;I’d be happy to help you with that! I see that your fork has 1 fork of its own. Would you like it to remain under aloerina01/aloerina01.github.io, or should it move under [fork元リポジトリ名]?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2通目&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Thanks for your helping!&lt;/p&gt;

  &lt;p&gt;Please excuse my lack of explanation…&lt;br /&gt;
I would like to remain under aloerina01/aloerina01.github.io.&lt;br /&gt;
This is my Github Pages repository, therefore I never merge to [fork元リポジトリ名].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2通目の返信&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Thanks for confirming! I’ve detached that fork with it’s child for you. It may take a few minutes for that to complete.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Helpページを熟読せずにSupportに連絡してしまったせいでやり取りが2往復になってしまって迷惑をかけてしまいましたが、素早くそして快く対応してくれたGithubに感謝です。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;</content><author><name></name></author><summary type="html">Forkして作ったリポジトリだけれどFork元にMergeしたりせず普通のリポジトリとして扱いたい、という稀なケースの対応を経験したので知見をメモします。</summary></entry><entry><title type="html">メンテナンスしやすいVueComponentを設計するために気をつけていること</title><link href="https://aloerina01.github.io/blog/2018-05-01-1" rel="alternate" type="text/html" title="メンテナンスしやすいVueComponentを設計するために気をつけていること" /><published>2018-05-01T00:00:00+09:00</published><updated>2018-05-01T00:00:00+09:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-05-01-1">&lt;h3 id=&quot;はじめに&quot;&gt;はじめに&lt;/h3&gt;
&lt;p&gt;VueをつかってWebアプリケーションを実装するとき、Componentをどう切るかって誰でも一度は悩みますよね(悩みますよね？)。とりあえず思いつくままに切ってみたり、繰り返し使いそうなもので切ってみたり、CSSのスコープで切ってみたり…。いろいろな切り口があると思います。&lt;/p&gt;

&lt;p&gt;この「いろいろな切り口」でコンポーネントを切ることができる点が、コンポーネント設計を難しくしている所以だと考えています。&lt;/p&gt;

&lt;p&gt;そこで今回は、&lt;strong&gt;どのような切り口・観点でコンポーネントを切ればよいのか&lt;/strong&gt;、&lt;strong&gt;そのときに気をつけるべきことは何か&lt;/strong&gt;、といったComponentの設計方法についてまとめてみます。&lt;br /&gt;
すべての実用ケースを想定できているわけではないと思いますが、大小いくつかのWebアプリを開発する際に利用してみて今のところいい感じに運用できている方法です(というか自然と収束して出来上がった考え方という感じです)。&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#はじめに&quot; id=&quot;markdown-toc-はじめに&quot;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#基本の考え方は責務の分離&quot; id=&quot;markdown-toc-基本の考え方は責務の分離&quot;&gt;基本の考え方は「責務の分離」&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#container-の責務&quot; id=&quot;markdown-toc-container-の責務&quot;&gt;Container の責務&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#1-画面の構成を表現すること&quot; id=&quot;markdown-toc-1-画面の構成を表現すること&quot;&gt;1. 画面の構成を表現すること&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#2-他画面との関係性を表現すること&quot; id=&quot;markdown-toc-2-他画面との関係性を表現すること&quot;&gt;2. 他画面との関係性を表現すること&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#viewmodel-component-の責務&quot; id=&quot;markdown-toc-viewmodel-component-の責務&quot;&gt;ViewModel Component の責務&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#view-component-の責務&quot; id=&quot;markdown-toc-view-component-の責務&quot;&gt;View Component の責務&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#design-component-の責務&quot; id=&quot;markdown-toc-design-component-の責務&quot;&gt;Design Component の責務&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#factory-component-の責務&quot; id=&quot;markdown-toc-factory-component-の責務&quot;&gt;Factory Component の責務&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#higher-order-component-の責務&quot; id=&quot;markdown-toc-higher-order-component-の責務&quot;&gt;Higher-Order Component の責務&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;基本の考え方は責務の分離&quot;&gt;基本の考え方は「責務の分離」&lt;/h3&gt;

&lt;p&gt;コンポーネントを切るときに心がけていることは&lt;strong&gt;責務を分けるためにコンポーネントを切る&lt;/strong&gt;ということです。責務を分けるということは、「変更理由」「影響範囲」「役割」を明確にするということに繋がります。&lt;/p&gt;

&lt;p&gt;ではVueのコンポーネントには具体的にどんな責務を持ち得るのか。リストアップしてみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「&lt;strong&gt;Container&lt;/strong&gt;」の責務&lt;/li&gt;
  &lt;li&gt;「Component」の責務
    &lt;ul&gt;
      &lt;li&gt;MVVMにおける「&lt;strong&gt;ViewModel&lt;/strong&gt;」の責務&lt;/li&gt;
      &lt;li&gt;Templateが肥大化したときに分割されつくられる「&lt;strong&gt;View&lt;/strong&gt;」の責務&lt;/li&gt;
      &lt;li&gt;「&lt;strong&gt;汎用UIパーツ&lt;/strong&gt;」としての責務&lt;/li&gt;
      &lt;li&gt;「&lt;strong&gt;動的コンポーネント(Factory)&lt;/strong&gt;」としての責務&lt;/li&gt;
      &lt;li&gt;「&lt;strong&gt;Higher-Order Component&lt;/strong&gt;」の責務&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現時点で私が必要だと感じているのは、これら、Containerの責務と5つのComponentの責務です。&lt;br /&gt;
少し用語の補足をすると、1つの画面を表現するコンポーネントのことをこの記事ではReactにならって「&lt;strong&gt;Container&lt;/strong&gt;」と呼びます(Vueの世界だと「View」や「Page」と呼ばれたりしていますが、曖昧なのでReactにならいます)。例えばブログを作る場合、「TopページContainer」「記事ページContainer」「カテゴリページContainer」などが考えられます。そしてContainer内に配置される(Containerの子コンポーネントとなる)コンポーネントのことを「&lt;strong&gt;Component&lt;/strong&gt;」と表記します。&lt;/p&gt;

&lt;p&gt;では、これらの責務がどんなものなのか考えていきます。&lt;/p&gt;

&lt;h3 id=&quot;container-の責務&quot;&gt;Container の責務&lt;/h3&gt;

&lt;p&gt;Containerの責務とはざっくり言うと&lt;strong&gt;①画面の構成を表現すること&lt;/strong&gt;、&lt;strong&gt;②他画面との関係性を表現すること&lt;/strong&gt;、の2つです。掘り下げると以下のような機能・役割が考えられます。&lt;/p&gt;

&lt;h4 id=&quot;1-画面の構成を表現すること&quot;&gt;1. 画面の構成を表現すること&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;画面内に配置するComponentを定義する&lt;br /&gt;
(Templateを見れば画面内にどんなComponentが並ぶのかが分かる)&lt;/li&gt;
  &lt;li&gt;画面全体で必要なModelやStateを管理する&lt;br /&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;を見ればどんなデータを扱うのかが分かる)&lt;/li&gt;
  &lt;li&gt;画面内で共通の処理を定義する&lt;br /&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;を見れば共通のロジックが分かる)&lt;/li&gt;
  &lt;li&gt;Component間のイベントバスになる&lt;br /&gt;
(子ComponentAのイベントをトリガーに子ComponentBの状態を変える、等)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-他画面との関係性を表現すること&quot;&gt;2. 他画面との関係性を表現すること&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;画面同士でデータや状態のやりとりを行う&lt;/li&gt;
  &lt;li&gt;ルーティング処理を定義する&lt;/li&gt;
  &lt;li&gt;vue-routerがurlと紐付けるコンポーネントとなる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Containerは1画面に1つと基準が明確なので、コンポーネントを切るときにはあまり困らないです。が、機能を実装する際に「これは本当にContainerが持つべきもものか」を意識していないと、&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;はどんどん肥大化してしまいます。言い換えれば「とりあえずContainerに実装しておけば動く」という機能が多いということです。&lt;br /&gt;
なので画面に機能を足すときには、後述する各Componentに機能を移譲できないか？ を常に検討するようにし、Containerの責務を必要最低限を保つようにしています。&lt;/p&gt;

&lt;h3 id=&quot;viewmodel-component-の責務&quot;&gt;ViewModel Component の責務&lt;/h3&gt;
&lt;p&gt;ここからはContainer内に配置するComponentについてのパターンです。&lt;br /&gt;
Vueは双方向バインディングができることから、MVVMな設計で利用されることがよくあります。&lt;a href=&quot;/blog/2017-08-29-1&quot;&gt;Vue+VuexでMVVMなWebApplicationを設計するときに考えたいこと&lt;/a&gt;の記事にも書きましたが、Vueのコンポーネントは&lt;strong&gt;MVVMのV(View)とVM(ViewModel)の機能を併せ持っています&lt;/strong&gt;。簡単に言えば単一コンポーネントの&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;の部分がViewで、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;の部分がViewModelという感じです。&lt;/p&gt;

&lt;p&gt;つまりComponentは、標準で&lt;strong&gt;ViewModel(とView)の責務を持っている&lt;/strong&gt;ということです。&lt;br /&gt;
ここでViewModelの役割を見直してみます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PresentationロジックとStateを持つ&lt;/li&gt;
  &lt;li&gt;Modelに依存する&lt;/li&gt;
  &lt;li&gt;Modelを監視する&lt;/li&gt;
  &lt;li&gt;Viewと双方向データバインディングする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったことが挙げられます。これをVueの言葉で言い換えると&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;にコンポーネントを操作するロジックを持つ&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;にコンポーネントのStateを定義する&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;にコンポーネントに必要なModelを定義し、リアクティブに更新する&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Templateに&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;computed&lt;/code&gt;で定義した値を反映する、また&lt;code class=&quot;highlighter-rouge&quot;&gt;v-model&lt;/code&gt;等でTemplateの変更を検知する&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。これらが過不足なく実装されていると、ViewModelとしての責務を持つComponentだと言えそうです。&lt;/p&gt;

&lt;p&gt;では過不足なくとはどういう状態か。&lt;br /&gt;
これはViewModelの設計の粒度に依るので正解はないと思いますが、ViewModel Component各々が1機能ずつ責務を担っていて、その粒度が揃っていればいいと思います。&lt;/p&gt;

&lt;p&gt;これができているか確認するのは案外簡単で、ViewModel Componentの名前をリストアップしてみたときに、「&lt;strong&gt;名前から責務が分かるか&lt;/strong&gt;」「&lt;strong&gt;その粒度が同程度に見えるか&lt;/strong&gt;」で判断できます。責務は1つなのでそれが適切に名前に反映されていれば合格で、もし反映できないなら責務を持ちすぎていている可能性があります。&lt;br /&gt;
(Componentを細かく切りすぎてしまって責務のないComponentができているケースもたまにありますが、個人的に多い例は責務を持ちすぎているパターンです……)&lt;/p&gt;

&lt;p&gt;Vueのコンポーネントは、Vueの仕様的に見てもそれ単体で動作するように実装できる仕様であり、MVVM的に見てもViewModelはそれ単体で1つの機能を実現するものです。そのためVueのコンポーネントは、&lt;strong&gt;基本的にはそれ単体で動くViewModel Componentとして切るのが良い&lt;/strong&gt;と思います。&lt;/p&gt;

&lt;p&gt;ただそれだけだと対応できないパターンがいくつかあるので、そのために以下に別パターンのComponentの切り方を用意しています。&lt;/p&gt;

&lt;h3 id=&quot;view-component-の責務&quot;&gt;View Component の責務&lt;/h3&gt;
&lt;p&gt;コンポーネントのTemplateを書いていると、ループ対象を別コンポーネントとして抜き出したい場合や、Templateがでかすぎるので分割したい場合などがあると思います。こういった例で使えるのがView Componentです。&lt;/p&gt;

&lt;p&gt;View ComponentはReactのように&lt;strong&gt;ステートレスなコンポーネントで、親コンポーネントから受け取る&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;のみで動作させます&lt;/strong&gt;。そのため、基本的には&lt;code class=&quot;highlighter-rouge&quot;&gt;methods&lt;/code&gt;や&lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;は定義しません。&lt;/p&gt;

&lt;p&gt;親から受け取ったものをTemplateにはめ込んで表示し、親から受け取った関数をたたく。それだけの責務を持つこのComponentは、&lt;strong&gt;独自のViewのみを持ちViewModelを持たないComponent&lt;/strong&gt;だと言えます。&lt;/p&gt;

&lt;p&gt;このView Componentを実装するときに意識していることは、このコンポーネントが「親の一部である」ということです。親のTemplateを分割しただけのものであるということを意識し、ロジックを実装したり過剰に機能を持たせたりしないように注意しています。それができない場合は、コンポーネントの切り方が間違っている可能性を疑います。&lt;br /&gt;
例外はあるかもしれませんが、多くの場合は切り方を変えることで解決します。&lt;/p&gt;

&lt;h3 id=&quot;design-component-の責務&quot;&gt;Design Component の責務&lt;/h3&gt;

&lt;p&gt;これはView Componentの亜種で、実装の仕方はView Componentと同様です。つまりステートレスで&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;を受け取って動作します。&lt;/p&gt;

&lt;p&gt;ただ目的が違い、View Componentが親のTemplate分割を目的に作られるのに対し、こちらは&lt;strong&gt;UIパーツのデザイン共通化を目的に作られます&lt;/strong&gt;。アプリ内でLabel付きButtonのUIを統一したい、ダイアログのUIを統一したい、といった場合に作られます。&lt;/p&gt;

&lt;p&gt;そのため、粒度の小さいパーツはTemplateと&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;をHTML標準のタグと同じ状態にしておくと、使うときに楽だったり後々置き換えが効いたりして便利です。&lt;/p&gt;

&lt;h3 id=&quot;factory-component-の責務&quot;&gt;Factory Component の責務&lt;/h3&gt;

&lt;p&gt;今までのコンポーネントとは性質が少し違い、&lt;strong&gt;表示するComponentを動的に切り替える機能を持つComponentがFactory Component&lt;/strong&gt;です。&lt;br /&gt;
&lt;strong&gt;正確には後述のHigher-Order Componentの1機能&lt;/strong&gt;なのですが、Factory機能だけを抜き出して使う例が個人的に多いので別扱いとしました。具体的には以下のような役割を持ちます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;でtypeを受け取る&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jp.vuejs.org/v2/api/#is&quot;&gt;v-bind:is&lt;/a&gt;を使ってtypeに応じたComponentをレンダリングする&lt;/li&gt;
  &lt;li&gt;描画するComponentたちの&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;を抽象化する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;漠然としていてピンとこないかもしれないのでサンプルコードを載せます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;template&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:is=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;componentName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:componentData=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;componentData&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;script&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;componentData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;componentB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;componentName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'component-a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'component-b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;で受け取ったtypeに応じて、描画するComponentを&lt;code class=&quot;highlighter-rouge&quot;&gt;v-bind:is&lt;/code&gt;で切り替えています。switch文を使っていますが、type名がそのままComponent名となるようにしてもいいですし、Factory Methodっぽくしてもいいと思います。&lt;/p&gt;

&lt;p&gt;また、どのComponentにも&lt;code class=&quot;highlighter-rouge&quot;&gt;componentData&lt;/code&gt;を渡しています。この部分が&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;の抽象化です。抽象化しているので、Factory Componentを呼び出している側はどのComponentが描画されるのかを気にする必要がなくなりますね。&lt;/p&gt;

&lt;h3 id=&quot;higher-order-component-の責務&quot;&gt;Higher-Order Component の責務&lt;/h3&gt;

&lt;p&gt;上述のFactoryをはじめ、&lt;strong&gt;Componentを様々な方法で再利用できる仕組みがHigher-Order Component&lt;/strong&gt;です。Reactにも同じ概念がありますね。実装方法の差はあれど、責務は似ています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Factoryとなり、表示するComponentを動的に切り替える&lt;/li&gt;
  &lt;li&gt;ComponentをWrapし、Adapterパターンのように機能を追加する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;をproxyし、加工する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このようなことができます(他にもいろいろできます)。&lt;br /&gt;
Factoryのサンプルコードのように、&lt;strong&gt;あるComponentをTemplateに含むComponentをつくることで、対象のComponentをWrapし様々なロジックを噛ませることができる&lt;/strong&gt;というものです。&lt;/p&gt;

&lt;p&gt;これはやろうとすればかなりトリッキーなこともできる仕組みで、また(抽象レイヤーであるために)責務が曖昧になりやすいので、個人的にはなるべく使わないようにしています。唯一それなりの頻度で使うものがFactory Componentという感じです。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;Containerとしての責務と、Componentとしての責務5パターンをまとめました。&lt;br /&gt;
これら以外にも様々な切り口があると思いますが、現時点で自分の中で有用だと思うものを整理してみました。ディスカッションのたたき台にでもなればと思いますので、ご感想・ご意見がありましたらぜひ&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;まで。&lt;/p&gt;</content><author><name></name></author><summary type="html">はじめに VueをつかってWebアプリケーションを実装するとき、Componentをどう切るかって誰でも一度は悩みますよね(悩みますよね？)。とりあえず思いつくままに切ってみたり、繰り返し使いそうなもので切ってみたり、CSSのスコープで切ってみたり…。いろいろな切り口があると思います。</summary></entry><entry><title type="html">経験の棚卸し 2018年4月編</title><link href="https://aloerina01.github.io/blog/2018-04-13-1" rel="alternate" type="text/html" title="経験の棚卸し 2018年4月編" /><published>2018-04-13T00:00:00+09:00</published><updated>2018-04-13T00:00:00+09:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-04-13-1">&lt;h3 id=&quot;ことはじめ&quot;&gt;ことはじめ&lt;/h3&gt;

&lt;p&gt;業務やプライベートで開発していて躓いたことや考えたことをブログにまとめていますが、&lt;strong&gt;まとめるほどじゃないけど経験したこと&lt;/strong&gt;がけっこうあるなあと感じていました。&lt;br /&gt;
それらの中には時間が経つと忘れてしまうことも多くて、経験が蒸発していってしまうような気がしてどこかもったいなさを感じていました。&lt;/p&gt;

&lt;p&gt;とはいえ「スキルセット」として表現するには呼び名に困る内容であったり、経験値がそこまで高くないものであったりと表現に悩むことも多く、結果的にどこにも書き残せずにただただ蒸発していくばかりでした。&lt;/p&gt;

&lt;p&gt;そこで&lt;strong&gt;「棚卸し」と称して、最近経験したことを雑にまとめてみよう&lt;/strong&gt;と思います。雑に始めてみるのでもしかしたらこれっきりになるかもしれません。&lt;/p&gt;

&lt;p&gt;なお、「成果」ではなくあくまで「経験したこと」を羅列するので、そこはご理解いただければと。&lt;/p&gt;

&lt;h3 id=&quot;棚卸し&quot;&gt;棚卸し&lt;/h3&gt;

&lt;h4 id=&quot;実装に関連する経験&quot;&gt;実装に関連する経験&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Vue(v2.x)の利用
    &lt;ul&gt;
      &lt;li&gt;ゼロベースでのSPAの設計・SSRの設計&lt;/li&gt;
      &lt;li&gt;v1からのマイグレーション&lt;/li&gt;
      &lt;li&gt;Vuexの導入・設計(&lt;a href=&quot;/blog/2017-08-29-1&quot;&gt;Vue+VuexでMVVMなWebApplicationを設計するときに考えたいこと&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reactの利用
    &lt;ul&gt;
      &lt;li&gt;FluxUtilsを利用したFluxの実装&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/aloerina/reactdetukurudong-de-rendaringu&quot;&gt;動的レンダリング&lt;/a&gt;の設計&lt;/li&gt;
      &lt;li&gt;Jest、Enzymeを利用した単体テスト&lt;/li&gt;
      &lt;li&gt;create-react-appの利用&lt;/li&gt;
      &lt;li&gt;インタラクティブなComponentの実装&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;WebViewの利用&lt;/li&gt;
  &lt;li&gt;Jekyllの利用&lt;/li&gt;
  &lt;li&gt;フロントエンドの速度改善&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;開発環境に関連する経験&quot;&gt;開発環境に関連する経験&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;CircleCI(v1)の導入
    &lt;ul&gt;
      &lt;li&gt;ビルドスクリプトの実装&lt;/li&gt;
      &lt;li&gt;デプロイスクリプトの実装&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;フロントエンドの開発環境の構築
    &lt;ul&gt;
      &lt;li&gt;Babelの設定(&lt;a href=&quot;/blog/2018-03-19-1&quot;&gt;Babelの設定を見直すための逆引きガイド&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;Polyfillの設定&lt;/li&gt;
      &lt;li&gt;Webpack(v4)の設定&lt;/li&gt;
      &lt;li&gt;grunt、gulpの撤去・移行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Webpackのマイグレーション(v1→v3)&lt;/li&gt;
  &lt;li&gt;テストケースの作成(&lt;a href=&quot;/blog/2016-10-31-1&quot;&gt;開発者なりに考えたQA(品質保証)の話をしてみよう&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/danger/danger&quot;&gt;danger&lt;/a&gt;の導入&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;業務プロセスに関連する経験&quot;&gt;業務プロセスに関連する経験&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;プランニングのお手伝い
    &lt;ul&gt;
      &lt;li&gt;ペルソナ作成&lt;/li&gt;
      &lt;li&gt;UXの検討&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;リリースフローの改善&lt;/li&gt;
  &lt;li&gt;5人程度のチームのスケジュール調整・タスク管理&lt;/li&gt;
  &lt;li&gt;コードレビュー、コードレビュー会の実施&lt;/li&gt;
  &lt;li&gt;モブプロの試運転&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;
&lt;p&gt;書き出してみたものの、なんとなく名前をつけられる経験ばかりが挙がってしまった感じがあります…。もっと曖昧な経験もあるはずなのですが思い出せなかったので既に蒸発しきってしまったのかもしれません。&lt;/p&gt;

&lt;p&gt;感想は&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;までどうぞ。&lt;/p&gt;</content><author><name></name></author><summary type="html">ことはじめ</summary></entry><entry><title type="html">Jekyllで作るWebサイトのURLをいい感じにする方法</title><link href="https://aloerina01.github.io/blog/2018-04-05-1" rel="alternate" type="text/html" title="Jekyllで作るWebサイトのURLをいい感じにする方法" /><published>2018-04-05T00:00:00+09:00</published><updated>2018-04-05T00:00:00+09:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-04-05-1">&lt;p&gt;&lt;img src=&quot;/assets/2018-04-05-1.png&quot; alt=&quot;jekyll&quot; /&gt;&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#この記事の効能&quot; id=&quot;markdown-toc-この記事の効能&quot;&gt;この記事の効能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#仕組みを知る&quot; id=&quot;markdown-toc-仕組みを知る&quot;&gt;仕組みを知る&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#変換対象となるディレクトリ構成&quot; id=&quot;markdown-toc-変換対象となるディレクトリ構成&quot;&gt;変換対象となるディレクトリ構成&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#url生成のルールとファイル命名ルール&quot; id=&quot;markdown-toc-url生成のルールとファイル命名ルール&quot;&gt;URL生成のルールとファイル命名ルール&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#1つ1つの記事に任意のurlを付与する&quot; id=&quot;markdown-toc-1つ1つの記事に任意のurlを付与する&quot;&gt;1つ1つの記事に任意のURLを付与する&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#すべてのpostsに一定のルールでurlを付与する&quot; id=&quot;markdown-toc-すべてのpostsに一定のルールでurlを付与する&quot;&gt;すべてのpostsに一定のルールでURLを付与する&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#_configymlの設定例&quot; id=&quot;markdown-toc-_configymlの設定例&quot;&gt;_config.ymlの設定例&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ポイント1--front-matterのデフォルト値を指定する&quot; id=&quot;markdown-toc-ポイント1--front-matterのデフォルト値を指定する&quot;&gt;ポイント1:  Front Matterのデフォルト値を指定する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ポイント2-frontmatterのデフォルト値の適用範囲を指定する&quot; id=&quot;markdown-toc-ポイント2-frontmatterのデフォルト値の適用範囲を指定する&quot;&gt;ポイント2: FrontMatterのデフォルト値の適用範囲を指定する&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ポイント3-collectionsの機能を使ってtypeを追加する&quot; id=&quot;markdown-toc-ポイント3-collectionsの機能を使ってtypeを追加する&quot;&gt;ポイント3: Collectionsの機能を使ってtypeを追加する&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#まとめ&quot; id=&quot;markdown-toc-まとめ&quot;&gt;まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;この記事の効能&quot;&gt;この記事の効能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一つ一つのページに任意のURLを設定出来るようになります&lt;/li&gt;
  &lt;li&gt;各ページに一定のルールでURLを割り振れるようになります&lt;/li&gt;
  &lt;li&gt;公式に書いてある&lt;a href=&quot;https://jekyllrb.com/docs/permalinks/&quot;&gt;Permalinks&lt;/a&gt;, &lt;a href=&quot;https://jekyllrb.com/docs/frontmatter/&quot;&gt;Front Matter&lt;/a&gt;あたりの仕組みを理解できます&lt;/li&gt;
  &lt;li&gt;ついでに関連する&lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;Collections&lt;/a&gt;という機能をやんわり理解できます&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;仕組みを知る&quot;&gt;仕組みを知る&lt;/h3&gt;

&lt;h4 id=&quot;変換対象となるディレクトリ構成&quot;&gt;変換対象となるディレクトリ構成&lt;/h4&gt;

&lt;p&gt;Jekyllのルールに則ったディレクトリにコンテンツ(ファイル)を配置すると、Jekyllはそのファイルを静的ページ(HTML)に変換してくれます。そして静的ページ1つ1つに対してURLが付与されます。&lt;br /&gt;
例えば記事のように蓄積されていくコンテンツの場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;以下にコンテンツファイルを配置することで記事ごとのHTMLを生成してくれます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── _config.yml
|
(省略)
| 
├── _posts
|   ├── 2018-04-01.md
|   └── 2018-04-02-how-to-use.md
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;url生成のルールとファイル命名ルール&quot;&gt;URL生成のルールとファイル命名ルール&lt;/h4&gt;

&lt;p&gt;Jekyllはコンテンツのファイル名をもとにURLを自動生成します。そのため、コンテンツファイルは&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;year4桁&amp;gt;-&amp;lt;month2桁&amp;gt;-&amp;lt;day2桁&amp;gt;-&amp;lt;タイトル&amp;gt;.md&lt;/code&gt;と命名する必要があります。&lt;/p&gt;

&lt;p&gt;これをもとにJekyllは&lt;code class=&quot;highlighter-rouge&quot;&gt;/year4桁/month2桁/day2桁/タイトル.html&lt;/code&gt;というURLのHTMLを生成します。加えて、記事にカテゴリを指定している場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;/カテゴリ/year4桁/month2桁/day2桁/タイトル.html&lt;/code&gt;というURLのHTMLを生成します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2018-04-01.md&lt;br /&gt;
      → &lt;code class=&quot;highlighter-rouge&quot;&gt;/2018/04/01.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;2018-04-02-how-to-use.md&lt;br /&gt;
      → &lt;code class=&quot;highlighter-rouge&quot;&gt;/2018/04/02/how-to-use.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;2018-04-03.mdに「diary」カテゴリを指定&lt;br /&gt;
      →&lt;code class=&quot;highlighter-rouge&quot;&gt;/diary/2018/04/03.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;2018-04-04-cooking.md「diary」「recipe」カテゴリを指定&lt;br /&gt;
      →&lt;code class=&quot;highlighter-rouge&quot;&gt;/diary/recipe/2018/04/04/cooking.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このURL生成ルールをJekyllの設定的には&lt;code class=&quot;highlighter-rouge&quot;&gt;/:categories/:year/:month/:day/:title.html&lt;/code&gt;と表現します。&lt;/p&gt;

&lt;h3 id=&quot;1つ1つの記事に任意のurlを付与する&quot;&gt;1つ1つの記事に任意のURLを付与する&lt;/h3&gt;
&lt;p&gt;上述のURL生成ルールがJekyllのデフォルトなのですが、このルールを無視して記事ごとに独自のURLを付与することができます。記事の冒頭でタイトルなどを定義する領域( = &lt;strong&gt;Front Matter&lt;/strong&gt; )に&lt;code class=&quot;highlighter-rouge&quot;&gt;permalink&lt;/code&gt;という項目を追記します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2018-04-01.md&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Jekyllの使い方
permalink: /article/how-to-use
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;こうすることでファイル名の日付を無視して&lt;code class=&quot;highlighter-rouge&quot;&gt;/article/how-to-use&lt;/code&gt;というURLで記事を生成してくれます。&lt;/p&gt;

&lt;p&gt;余談ですが、このFront Matterはテンプレート内で使える変数を宣言することができます。たとえば複数人から入稿されるサイトにて記事内にWriter名を表示したい場合は、以下のようにFront Matterを利用できます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_posts/2018-04-01.md のFrontMatterに&lt;code class=&quot;highlighter-rouge&quot;&gt;writer&lt;/code&gt;という項目を定義&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Jekyllの使い方
permalink: /article/how-to-use
writer: aloerina  
---
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;_layouts/post.html テンプレートから&lt;code class=&quot;highlighter-rouge&quot;&gt;page.writer&lt;/code&gt;という変数で値を利用&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ page.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 省略 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ page.writer }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;すべてのpostsに一定のルールでurlを付与する&quot;&gt;すべてのpostsに一定のルールでURLを付与する&lt;/h3&gt;
&lt;p&gt;Front Matterを使えば記事1つ1つに個別のURLを設定できました。しかしこれを毎回書くのは面倒くさいですよね。そこで&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;を使ってFrontMatterのデフォルト値を指定します。「URLを&lt;code class=&quot;highlighter-rouge&quot;&gt;/artilce/&amp;lt;タイトル名&amp;gt;.html&lt;/code&gt;とする」例を使って解説します。&lt;/p&gt;

&lt;h4 id=&quot;_configymlの設定例&quot;&gt;_config.ymlの設定例&lt;/h4&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;posts&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/article/:title.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;ポイント1--front-matterのデフォルト値を指定する&quot;&gt;ポイント1:  Front Matterのデフォルト値を指定する&lt;/h4&gt;
&lt;p&gt;Front Matterのデフォルト値を指定する&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults&lt;/code&gt;には、大きく2つの項目があります。&lt;strong&gt;どのファイルに対してデフォルト値を設定するかを表す&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt;&lt;/strong&gt;と、&lt;strong&gt;どんなデフォルト値にするかを表す&lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt;&lt;/strong&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt;ほうが理解は簡単で、FrontMatterに書くときと同じように書けばOKです。URLを指定したいなら&lt;code class=&quot;highlighter-rouge&quot;&gt;permalink: xxxx&lt;/code&gt;と、カテゴリを指定したいなら&lt;code class=&quot;highlighter-rouge&quot;&gt;categories: xxxxx&lt;/code&gt;と書くだけです。上述した&lt;code class=&quot;highlighter-rouge&quot;&gt;writer&lt;/code&gt;のような独自の変数をここで定義することもできますし、複数の項目を並べて指定することもできます。&lt;/p&gt;

&lt;p&gt;今回はURLにタイトルを入れたいので&lt;code class=&quot;highlighter-rouge&quot;&gt;:title&lt;/code&gt;という変数を使いましたが、他にもpermalinkの指定に使える変数があります。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;変数名&lt;/th&gt;
      &lt;th&gt;説明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;:year&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる年&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:month&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる月&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:i_month&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる0埋めしない月&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:day&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる日&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:i_day&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる0埋めしない日&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:short_year&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できる年の下2桁&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:title&lt;/td&gt;
      &lt;td&gt;Postのファイル名から取得できるタイトル&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:categories&lt;/td&gt;
      &lt;td&gt;Postに対して指定されたカテゴリ&lt;br /&gt; もしカテゴリが存在しない場合は無視&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:date&lt;/td&gt;
      &lt;td&gt;/:categories/:year/:month/:day/:title.html&lt;br /&gt; Jekyllに組み込まれているPermalink&lt;br /&gt; 何も指定しない場合はこれが適用される&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:pretty&lt;/td&gt;
      &lt;td&gt;/:categories/:year/:month/:day/:title/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:none&lt;/td&gt;
      &lt;td&gt;/:categories/:title.html&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;ポイント2-frontmatterのデフォルト値の適用範囲を指定する&quot;&gt;ポイント2: FrontMatterのデフォルト値の適用範囲を指定する&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt;は&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;という2つの要素を持ちます&lt;/strong&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt;とは違いこれら以外の要素を追加することはできません。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;とはどのディレクトリにあるファイルに対してデフォルト値を適用するのか&lt;/strong&gt;を表します。上の例のように空文字にした場合はすべてのファイルが適用対象になります。空文字でもいいのですが必須の項目です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;はpath内にあるファイルのうち、該当するタイプのファイルに対してデフォルト値を適用する&lt;/strong&gt;という絞込を行う機能です。そのためtypeはなくてもOKな項目です。ちなみに&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;以下にあるファイルには内部的に&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;というタイプが割り当てられています。&lt;/p&gt;

&lt;p&gt;つまり今回の設定例では、&lt;strong&gt;全ファイルの中で&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;タイプのファイルに&lt;code class=&quot;highlighter-rouge&quot;&gt;permalink&lt;/code&gt;をデフォルトとして適用する&lt;/strong&gt;となるわけです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;を組み合わせてデフォルト値の適用範囲を設定できるわけですが、この&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;が聞きなれず設定の仕方も少し厄介なので次項でまとめてみます。&lt;/p&gt;

&lt;h4 id=&quot;ポイント3-collectionsの機能を使ってtypeを追加する&quot;&gt;ポイント3: Collectionsの機能を使ってtypeを追加する&lt;/h4&gt;
&lt;p&gt;Webサイトは記事ページ(Jekyll内ではpostsと呼ばれるもの)だけですべてがまかなえるわけではなく、たとえば写真や制作物を載せるページであったり、Documentを載せるページであったりと、様々な様式のページが必要になることがあります。これを表現するのが&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;という概念であり、&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;を定義するものがCollectionsです&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;実は&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;には内部的に以下のような設定を持っています。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;collections:
  posts:
    output: true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これは「&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;というタイプを用意して、これをJekyllの変換対象とする」ということを表現しています。そしてこのtype名に&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;をつなげた_postsディレクトリ以下にあるファイルが、&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;タイプのファイルとなります。&lt;/p&gt;

&lt;p&gt;つまりtypeを増やしたい場合は以下の2つの作業が必要ということになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Collectionにtypeを定義する&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;定義したtype名の先頭に&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;をつけたディレクトリを用意する&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この機能により、最初に記した「変換対象となるディレクトリ」を増やすことができ、また&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;と組み合わせて&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults&lt;/code&gt;の適用範囲を柔軟に指定できるようになるわけです。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Jekyllのコンテンツファイルには命名ルール(&lt;code class=&quot;highlighter-rouge&quot;&gt;:year-:month-:day-:title.md&lt;/code&gt;)がある&lt;/li&gt;
  &lt;li&gt;Jekyllはデフォルトで&lt;code class=&quot;highlighter-rouge&quot;&gt;/:year/:month/:day/:title.html&lt;/code&gt;というURLを生成する&lt;/li&gt;
  &lt;li&gt;記事個別にURLを指定する場合は&lt;strong&gt;Front Matter&lt;/strong&gt;を使う&lt;/li&gt;
  &lt;li&gt;記事一括でURLを指定する場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;に&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defaults&lt;/code&gt;&lt;/strong&gt;を指定する
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;values&lt;/code&gt;&lt;/strong&gt;でデフォルト値を定義する&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt;&lt;/strong&gt;でデフォルト値の指定範囲を定義する
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt;は適用対象となるディレクトリを表す&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;はpath内にあるファイルをさらに絞り込むのに使う&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;typeを増やすには&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;に&lt;strong&gt;Collections&lt;/strong&gt;を指定する
    &lt;ul&gt;
      &lt;li&gt;何も指定せずとも&lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt;タイプだけは内部的に定義されている&lt;/li&gt;
      &lt;li&gt;Collectionsにtypeを指定したら、&lt;code class=&quot;highlighter-rouge&quot;&gt;_type名&lt;/code&gt;というディレクトリを用意する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;けっこう複雑で理解するまでに苦労しましたが、わかってしまえば自在にURLを設定することができて便利でした。このブログのソースも&lt;a href=&quot;https://github.com/aloerina01/aloerina01.github.io&quot;&gt;Github&lt;/a&gt;上で公開していますので、ご参考にどうぞ。&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">毎回忘れるanyenvの使い方メモ</title><link href="https://aloerina01.github.io/tip/2018-03-26-1" rel="alternate" type="text/html" title="毎回忘れるanyenvの使い方メモ" /><published>2018-03-26T00:00:00+09:00</published><updated>2018-03-26T00:00:00+09:00</updated><id>https://aloerina01.github.io/tip/1</id><content type="html" xml:base="https://aloerina01.github.io/tip/2018-03-26-1">&lt;h3 id=&quot;what-is&quot;&gt;What is&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/riywo/anyenv&quot;&gt;anyenv&lt;/a&gt;とは&lt;code class=&quot;highlighter-rouge&quot;&gt;**env&lt;/code&gt;と名のつくバージョン管理ツールのWrapperです。&lt;code class=&quot;highlighter-rouge&quot;&gt;**env&lt;/code&gt;とは例えばNodeのバージョン管理をするndenvがあげられます。anyenvでできるのは以下のようなことです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自分のPCにどの&lt;code class=&quot;highlighter-rouge&quot;&gt;**env&lt;/code&gt;が入っているかを確認する&lt;/li&gt;
  &lt;li&gt;自分のPCに必要な&lt;code class=&quot;highlighter-rouge&quot;&gt;**env&lt;/code&gt;をインストールする&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-use&quot;&gt;How to use&lt;/h3&gt;

&lt;p&gt;グローバルのNodeを8.10.0に、&lt;code class=&quot;highlighter-rouge&quot;&gt;project_a&lt;/code&gt;ディレクトリのNodeを9.9.0にする例です。&lt;/p&gt;

&lt;h5 id=&quot;anyenvをつかってndenvをインストールする&quot;&gt;anyenvをつかってndenvをインストールする&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;anyenv install ndenv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;インストールできるnodeのバージョンを確認する&quot;&gt;インストールできるNodeのバージョンを確認する&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ndenv install -l
  Available versions:
    v0.1.14
    v0.1.15
    v0.1.16
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;以下略&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;必要なバージョンをインストールする&quot;&gt;必要なバージョンをインストールする&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ndenv install v8.10.0
ndenv install v9.9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;インストール済みのバージョンを確認する&quot;&gt;インストール済みのバージョンを確認する&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ndenv versions
  &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; v8.10.0
    v9.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;グローバルのnodeバージョンを指定する&quot;&gt;グローバルのNodeバージョンを指定する&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ndenv global v8.10.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;ディレクトリ別にnodeバージョンを指定する&quot;&gt;ディレクトリ別にNodeバージョンを指定する&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/project_a
ndenv &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;v9.9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">What is anyenvとは**envと名のつくバージョン管理ツールのWrapperです。**envとは例えばNodeのバージョン管理をするndenvがあげられます。anyenvでできるのは以下のようなことです。</summary></entry><entry><title type="html">Babelの設定を見直すための逆引きガイド</title><link href="https://aloerina01.github.io/blog/2018-03-19-1" rel="alternate" type="text/html" title="Babelの設定を見直すための逆引きガイド" /><published>2018-03-19T00:00:00+09:00</published><updated>2018-03-19T00:00:00+09:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2018-03-19-1">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#babelって結局なんなんだ&quot; id=&quot;markdown-toc-babelって結局なんなんだ&quot;&gt;Babelって結局なんなんだ&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#定義&quot; id=&quot;markdown-toc-定義&quot;&gt;定義&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#構成要素&quot; id=&quot;markdown-toc-構成要素&quot;&gt;構成要素&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#babel-core&quot; id=&quot;markdown-toc-babel-core&quot;&gt;babel-core&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#babel-polyfill&quot; id=&quot;markdown-toc-babel-polyfill&quot;&gt;babel-polyfill&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#plugins&quot; id=&quot;markdown-toc-plugins&quot;&gt;Plugins&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最新の記法でjsを書くにはどうしたらいいんだ&quot; id=&quot;markdown-toc-最新の記法でjsを書くにはどうしたらいいんだ&quot;&gt;最新の記法でJSを書くにはどうしたらいいんだ&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#最低限の設定方法&quot; id=&quot;markdown-toc-最低限の設定方法&quot;&gt;最低限の設定方法&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#1-installする&quot; id=&quot;markdown-toc-1-installする&quot;&gt;1. Installする&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#2-babelrcに設定を書く&quot; id=&quot;markdown-toc-2-babelrcに設定を書く&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;に設定を書く&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#3-polyfillをrequireする&quot; id=&quot;markdown-toc-3-polyfillをrequireする&quot;&gt;3. polyfillをrequireする&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#4-babeるbabelでコンパイルする&quot; id=&quot;markdown-toc-4-babeるbabelでコンパイルする&quot;&gt;4. Babeる(Babelでコンパイルする)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#webpackと組み合わせた実践例&quot; id=&quot;markdown-toc-webpackと組み合わせた実践例&quot;&gt;Webpackと組み合わせた実践例&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#キホンのキ&quot; id=&quot;markdown-toc-キホンのキ&quot;&gt;キホンのキ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#polyfillの機能を制限なく使いたいでも無駄なものは入れたくない&quot; id=&quot;markdown-toc-polyfillの機能を制限なく使いたいでも無駄なものは入れたくない&quot;&gt;polyfillの機能を制限なく使いたい、でも無駄なものは入れたくない&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#二重読み込み制約のリスクを背負わずにpolyfillを使いたい&quot; id=&quot;markdown-toc-二重読み込み制約のリスクを背負わずにpolyfillを使いたい&quot;&gt;「二重読み込み制約」のリスクを背負わずにpolyfillを使いたい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#グローバルを汚染せずにpolyfillを使いたい複数ファイルでpolyfillを使いたい&quot; id=&quot;markdown-toc-グローバルを汚染せずにpolyfillを使いたい複数ファイルでpolyfillを使いたい&quot;&gt;グローバルを汚染せずにpolyfillを使いたい、複数ファイルでpolyfillを使いたい&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#早見表&quot; id=&quot;markdown-toc-早見表&quot;&gt;早見表&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#細かい機能を上手く使いこなしたい&quot; id=&quot;markdown-toc-細かい機能を上手く使いこなしたい&quot;&gt;細かい機能を上手く使いこなしたい&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#設定はショートハンドで書けるよ&quot; id=&quot;markdown-toc-設定はショートハンドで書けるよ&quot;&gt;設定はショートハンドで書けるよ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#babel-preset-esxxxx-はいくつを使えばいいんだ&quot; id=&quot;markdown-toc-babel-preset-esxxxx-はいくつを使えばいいんだ&quot;&gt;babel-preset-esXXXX はいくつを使えばいいんだ&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#es2015のソースをそのままminifyできるってよ&quot; id=&quot;markdown-toc-es2015のソースをそのままminifyできるってよ&quot;&gt;ES2015+のソースをそのままminifyできるってよ&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#おわりに&quot; id=&quot;markdown-toc-おわりに&quot;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;babelって結局なんなんだ&quot;&gt;Babelって結局なんなんだ&lt;/h3&gt;

&lt;h4 id=&quot;定義&quot;&gt;定義&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Babel is a JavaScript compiler.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と、公式にでっかく書いてありますね。&lt;/p&gt;

&lt;p&gt;さらにドキュメントを読み進めていくと、&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Now, out of the box Babel doesn’t do anything. It basically acts like const babel = code =&amp;gt; code;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書いてあります。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;babel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;基本は受け取ったコードをそのまま吐き出すだけ、どう変換させるかは設定次第ということですね。つまり&lt;strong&gt;設定に応じてJavaScriptをコンパイルしてくれるもの&lt;/strong&gt;というのがBabelの定義のようです。  (正確にはトランスパイルだろと言いたいところですが、この記事では公式にならってコンパイルと表現します)&lt;/p&gt;

&lt;h4 id=&quot;構成要素&quot;&gt;構成要素&lt;/h4&gt;
&lt;p&gt;ドキュメントを見る限りBabelは大きく3要素から成ります。&lt;/p&gt;

&lt;h5 id=&quot;babel-core&quot;&gt;babel-core&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;コンパイル処理を行うBabelの本体&lt;/strong&gt;です。&lt;/p&gt;

&lt;h5 id=&quot;babel-polyfill&quot;&gt;babel-polyfill&lt;/h5&gt;
&lt;p&gt;Babelが用意してくれているpolyfill集で、&lt;a href=&quot;https://github.com/zloirock/core-js&quot;&gt;core-js&lt;/a&gt; と &lt;a href=&quot;https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js&quot;&gt;regenerator runtime&lt;/a&gt; を内包しています。これら2つはそれぞれ独立した(Bebelとは関係ない外部の)poryfill集です。&lt;br /&gt;
要は&lt;strong&gt;世の中のイケてるporyfillをまとめて提供してくれるものがbabel-polyfillだ&lt;/strong&gt;という認識でいいと思います。&lt;/p&gt;

&lt;h5 id=&quot;plugins&quot;&gt;Plugins&lt;/h5&gt;
&lt;p&gt;「設定に応じてJavaScriptをコンパイルしてくれるもの」の「設定に応じて」の部分を担当するのがpluginです。&lt;strong&gt;「どうコンパイルするか」を定義している&lt;/strong&gt;もので、よく見かける&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-es2015&lt;/code&gt;などがこれに該当します。&lt;/p&gt;

&lt;p&gt;※ 正確には、複数のpluginを特定の用途に合わせてセットにしたものが「babel-preset-xxxx」です。よくつかうplugin集をpresetとして提供してくれているわけです。&lt;/p&gt;

&lt;h3 id=&quot;最新の記法でjsを書くにはどうしたらいいんだ&quot;&gt;最新の記法でJSを書くにはどうしたらいいんだ&lt;/h3&gt;
&lt;p&gt;Babelのドキュメントを読んだ結果感じたことはこれでした。結局どうすりゃいいんだと。&lt;/p&gt;

&lt;p&gt;ここでおさらいしておきます。&lt;br /&gt;
最新の記法でJSを書く際には、ES2015〜で登場した&lt;strong&gt;新しい文法&lt;/strong&gt;と&lt;strong&gt;新しい関数&lt;/strong&gt;を使うことになります。前者はアロー関数やクラス記法などで、後者は&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.find&lt;/code&gt;などです。&lt;/p&gt;

&lt;p&gt;「最新の記法でJSを書く」＝「この2つを含むソースをBabelでコンパイルする」 ということになりますね。それには以下の2つのことが必要です。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-env&lt;/code&gt;などのplugin・presetを使って新しい文法をコンパイルできるようにする&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;などのpolyfillを入れて新しい関数が動くようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;最低限の設定方法&quot;&gt;最低限の設定方法&lt;/h4&gt;
&lt;p&gt;ここまでの内容をCLIで実行するための最低限の手順は以下のようになります。&lt;/p&gt;

&lt;h5 id=&quot;1-installする&quot;&gt;1. Installする&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D babel-cli babel-preset-env 
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -S babel-polyfill
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;2-babelrcに設定を書く&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;に設定を書く&lt;/h5&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;3-polyfillをrequireする&quot;&gt;3. polyfillをrequireする&lt;/h5&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// input.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'babel-polyfill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 以下実装&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;4-babeるbabelでコンパイルする&quot;&gt;4. Babeる(Babelでコンパイルする)&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npx babel ./input.js -o ./output.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これが基本の使い方です。これを応用して、JSXをコンパイルさせたかったら&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-react&lt;/code&gt;を利用したり、bundleさせたかったらWebpackなどのツールと組み合わせたり…といったカスタマイズをしていく感じになると思います。&lt;/p&gt;

&lt;h3 id=&quot;webpackと組み合わせた実践例&quot;&gt;Webpackと組み合わせた実践例&lt;/h3&gt;

&lt;p&gt;ここからは「ES02015+の記法で書いたJSをWebpackでbundleする」というよくあるパターンの実践例です。&lt;/p&gt;

&lt;h4 id=&quot;キホンのキ&quot;&gt;キホンのキ&lt;/h4&gt;
&lt;p&gt;まず基礎ですが、WebpackでBabelを使うには&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-loader&lt;/code&gt;と&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-core&lt;/code&gt;を読み込みますよね。&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-loader&lt;/code&gt;はWebpackに「受け取ったコードをBabeってね」と指示を出すもので、指示に基づいて実際にBabeるのが&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-core&lt;/code&gt;、という感じです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D babel-loader babel-core
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;js$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/node_modules/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;babel-loader&quot;&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;pluginの適用は上記の「最低限の設定」と同様に&lt;code class=&quot;highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt;に書きます。polyfillの適用の仕方は3通りあるので、やりたいことベースで整理します。&lt;/p&gt;

&lt;h4 id=&quot;polyfillの機能を制限なく使いたいでも無駄なものは入れたくない&quot;&gt;polyfillの機能を制限なく使いたい、でも無駄なものは入れたくない&lt;/h4&gt;
&lt;p&gt;polyfillの対象となる機能には3つのタイプがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;globals&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise&lt;/code&gt;など新しいグローバルオブジェクト&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;native methods&lt;/strong&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign&lt;/code&gt;などの既存のグローバルオブジェクトに追加されたメソッド&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;instance methods&lt;/strong&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.find&lt;/code&gt;などのインスタンスが持つメソッド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらすべてを使うには&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;をbundleに含める&lt;/strong&gt;ことが必要です。それには&lt;strong&gt;entry pointとなるファイルの1行目&lt;/strong&gt;で&lt;strong&gt;1度だけ&lt;/strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;を読み込みます。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// CommonJS&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'babel-polyfill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ES6&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-polyfill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;「1度だけ」というのがとても重要で、&lt;strong&gt;複数回読み込むとpolyfillがぶっ壊れます&lt;/strong&gt;。あるHTMLで2つのjsファイルを読み込んでいて、それぞれで&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;を読み込んでいる場合もぶっ壊れます。とにかく2回読み込まれたらマズイのです。&lt;/p&gt;

&lt;p&gt;この&lt;strong&gt;二重読み込み制約&lt;/strong&gt;にさえ気をつけていれば、この方法ですべてのpolyfillを利用することができます。加えて、&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-env&lt;/code&gt;と組み合わせて利用する場合は、&lt;a href=&quot;https://babeljs.io/docs/plugins/preset-env/#usebuiltins&quot;&gt;useBuiltIns&lt;/a&gt;オプションを設定することで&lt;strong&gt;全部入りの&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;を、必要なpolyfill(該当する&lt;code class=&quot;highlighter-rouge&quot;&gt;core-js&lt;/code&gt;のモジュール)のみに変換してくれます&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.babelrc&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;useBuiltIns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;app.js (entry point)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Babeる前&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'babel-polyfill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Babeった後 使っているものだけimportするように変換される&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'core-js/modules/es7.string.pad-start'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'core-js/modules/es7.string.pad-end'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;まとめ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;⭕：全polyfillを利用できる、必要な分だけ入れられる&lt;br /&gt;
❌：二重読み込み制約のリスクがある、グローバルが汚染される&lt;/p&gt;

&lt;h4 id=&quot;二重読み込み制約のリスクを背負わずにpolyfillを使いたい&quot;&gt;「二重読み込み制約」のリスクを背負わずにpolyfillを使いたい&lt;/h4&gt;
&lt;p&gt;WebpackとBabelを組み合わせる場合、二重読み込み制約のリスクを回避する方法があります。それはソース内でbabel-polyfillを読み込むのではなく、bundle時に&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-polyfill&lt;/code&gt;を結合する方法です。以下のように設定します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;webpack.config.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babel-polyfill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./app.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ただし、この方法は上述の&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltIns&lt;/code&gt;オプションが効かなくなるので注意です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;まとめ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;⭕：二重読み込みのリスクがない、全polyfillを利用できる&lt;br /&gt;
❌：&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltIns&lt;/code&gt;オプションが効かない、グローバルが汚染される&lt;/p&gt;

&lt;h4 id=&quot;グローバルを汚染せずにpolyfillを使いたい複数ファイルでpolyfillを使いたい&quot;&gt;グローバルを汚染せずにpolyfillを使いたい、複数ファイルでpolyfillを使いたい&lt;/h4&gt;
&lt;p&gt;ライブラリを実装する場合などでグローバルを汚染せずにES2015+の関数を利用したいときは、&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transform-runtime&lt;/code&gt;&lt;/strong&gt;pluginを使います。また、ひとつのアプリケーションで複数のJSファイルを読み込む場合など、polyfill読込が重複してしまうのを避けたいときにも&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transform-runtime&lt;/code&gt;&lt;/strong&gt;pluginが使えます。&lt;/p&gt;

&lt;p&gt;これは&lt;strong&gt;ES2015+の関数を、&lt;code class=&quot;highlighter-rouge&quot;&gt;core-js&lt;/code&gt;のエイリアスである&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-runtime&lt;/code&gt;モジュールで書き換える&lt;/strong&gt;ものです。本来polyfillとは「そのままでは動かないコードを補うためのコード」を埋め込むものなので、対象コードそのものを書き換えてしまう&lt;code class=&quot;highlighter-rouge&quot;&gt;trunsform-runtime&lt;/code&gt;は正確にはpolyfillとは呼べないですが、おかげで上述の利点を得られるわけです。&lt;/p&gt;

&lt;p&gt;そして、ここまでで勘の良い方はお気づきかもですが、&lt;strong&gt;instance methodsを利用できない&lt;/strong&gt;という制約がつきます。&lt;/p&gt;

&lt;p&gt;設定するには、変換処理を行う&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-plugin-transform-runtime&lt;/code&gt;と、&lt;code class=&quot;highlighter-rouge&quot;&gt;core-js&lt;/code&gt;のエイリアスである&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-runtime&lt;/code&gt;を npm install します。後者はソースに含まれることになるので&lt;code class=&quot;highlighter-rouge&quot;&gt;--save&lt;/code&gt;オプションで。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D babel-plugin-transform-runtime
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -S babel-runtime
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;.babelrc&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;transform-runtime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;まとめ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;⭕：グローバルを汚染しない、使うものだけ置き換えられる&lt;br /&gt;
❌：インスタンスメソッドは使えない&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://babeljs.io/docs/plugins/transform-runtime&quot;&gt;Runtime transform · Babel&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;早見表&quot;&gt;早見表&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;メリット&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;デメリット&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;require babel-polyfill&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;全polyfillを利用できる&lt;br /&gt; 必要な分だけ入れられる&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;二重読み込みのリスクがある&lt;br /&gt; グローバルが汚染される&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;webpackで結合&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;二重読み込みのリスクがない&lt;br /&gt; 全polyfillを利用できる&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;useBuiltInsが効かない&lt;br /&gt; グローバルが汚染される&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;runtime transform&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;グローバルを汚染しない&lt;br /&gt; 必要な分だけ変換される&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;インスタンスメソッドのpolyfillは利用できない&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;細かい機能を上手く使いこなしたい&quot;&gt;細かい機能を上手く使いこなしたい&lt;/h3&gt;

&lt;h4 id=&quot;設定はショートハンドで書けるよ&quot;&gt;設定はショートハンドで書けるよ&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-hoge&lt;/code&gt;を npm install しているのに、設定ファイルには&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;presets&quot;: [&quot;hoge&quot;]&lt;/code&gt;って書くから分かりにくいな…と思ってました。これは&lt;strong&gt;presetとpluginは&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;babel-plugin-&lt;/code&gt;の部分を省略&lt;/strong&gt;して書くことができる故でした。&lt;br /&gt;
なので&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;presets&quot;: [&quot;babel-preset-hoge&quot;]&lt;/code&gt;と書いてもOK。ちなみにパッケージスコープの場合は&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;presets&quot;: [&quot;@org/hoge&quot;]&lt;/code&gt;という感じ。&lt;/p&gt;

&lt;h4 id=&quot;babel-preset-esxxxx-はいくつを使えばいいんだ&quot;&gt;babel-preset-esXXXX はいくつを使えばいいんだ&lt;/h4&gt;
&lt;p&gt;過去に書いたbabelrcを見てみたら&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-es2015&lt;/code&gt;を入れていることがほとんどだったのですが、ES2016、ES2017と仕様が増えている現在では&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-env&lt;/code&gt;を入れておくのがベターのようです。&lt;/p&gt;

&lt;p&gt;これは何のオプションもなしで利用すると&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-latest&lt;/code&gt;と同じように機能し、設定次第で&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-preset-es2015&lt;/code&gt;と同様の動きをさせることもできます。&lt;/p&gt;

&lt;p&gt;また、上述した&lt;code class=&quot;highlighter-rouge&quot;&gt;useBuiltIns&lt;/code&gt;のような便利なオプションを使うことができる利点があります。個人的にありがたいと思っているのが&lt;strong&gt;&lt;a href=&quot;https://babeljs.io/docs/plugins/preset-env/#targets&quot;&gt;targets&lt;/a&gt;&lt;/strong&gt;オプションです。ブラウザやNodeのバージョンを指定できるオプションで、指定されたバージョンに必要なpolyfillのみを入れてくれるようになります。&lt;/p&gt;

&lt;p&gt;参考： &lt;a href=&quot;https://babeljs.io/docs/plugins/preset-env/#options&quot;&gt;Env preset # Options&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;es2015のソースをそのままminifyできるってよ&quot;&gt;ES2015+のソースをそのままminifyできるってよ&lt;/h4&gt;
&lt;p&gt;これはBabelの公式ブログ読んでて見つけて得た程度の知識なのですが、「古いブラウザで動かす必要がないならそのまま圧縮すれば？」ということで&lt;strong&gt;&lt;a href=&quot;https://babeljs.io/blog/2016/08/30/babili&quot;&gt;Babili(babel-minify)&lt;/a&gt;&lt;/strong&gt;というものがあるそうです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install -D babel-core babel-loader babel-preset-babili
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;.babelrc&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;presets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;babili&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;uglify-esでサポートされていない構文であっても圧縮可能なので、その点は利がありそうです。ただ執筆時点(2018/03/19)ではBeta版ということもあって、個人的にはまだ使うことはなさそうです。&lt;/p&gt;

&lt;h3 id=&quot;おわりに&quot;&gt;おわりに&lt;/h3&gt;

&lt;p&gt;今までなんとなくの理解だった部分が整理されたおかげで、今後新しいプロジェクトを立ち上げるときに迷わなくて済みそうです。よかった。&lt;/p&gt;

&lt;p&gt;それと公式ドキュメントがけっこう説明不足感が強くて、しかも日本語の資料もそんなに見当たらなくて整理に苦労したので、同じ苦労を誰かがせずに済むといいなと思います。
間違っているところを見つけた方は&lt;a href=&quot;https://twitter.com/aloerina_&quot;&gt;@aloerina_&lt;/a&gt;までご一報ください。&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">トラブルシューティングメモを晒してみる webpack動的module編</title><link href="https://aloerina01.github.io/blog/2017-11-08-1" rel="alternate" type="text/html" title="トラブルシューティングメモを晒してみる  webpack動的module編" /><published>2017-11-08T00:00:00+09:00</published><updated>2017-11-08T00:00:00+09:00</updated><id>https://aloerina01.github.io/blog/1</id><content type="html" xml:base="https://aloerina01.github.io/blog/2017-11-08-1">&lt;h3 id=&quot;まえがき&quot;&gt;まえがき&lt;/h3&gt;

&lt;p&gt;PCのリニューアルにつき、旧PCのローカルに残ってたメモやらブログ用下書きの整理をしていたら、かつて自分がハマったトラブルの対応時のメモが発掘されました。読み返してみたら懐かしい気持ちになれたり、当時考えていたことが思い出せたりといいことが多かったので、晒してみようと思います。&lt;/p&gt;

&lt;p&gt;ちなみにメモのタイトルには『&lt;strong&gt;webpackで動的module解決しようとして死にかけた&lt;/strong&gt;』と書いてありました。&lt;/p&gt;

&lt;p&gt;※ 2017年上旬に残したメモなので、内容に古い箇所があったり引用文とリンク先の文章にズレがあったりする可能性があります。&lt;/p&gt;

&lt;h3 id=&quot;メモ内容&quot;&gt;メモ内容&lt;/h3&gt;

&lt;h4 id=&quot;こまったことになったぞ&quot;&gt;こまったことになったぞ&lt;/h4&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 省略&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// modulePathを動的に決定する&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ということをしようとするとエラーになる。&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: Cannot find module &quot;.&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;modulePath&lt;/code&gt;が文字列としてちゃんと認識できていないのかと思ったけどそうでもなかった。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 検証1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 同様のエラー&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 検証2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;もしや&lt;code class=&quot;highlighter-rouge&quot;&gt;modulePath&lt;/code&gt;は正規表現じゃないとだめ？　とか血迷ってみた。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/model&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;userlist/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// やはりエラー&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ここでようやくwebpackのモジュール解決に起因すると気づく。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keep in mind that import() path cannot be fully dynamic (e.g., import(Math.random())). Rather either completely static (e.g., import(‘./locale/de.json’)) or partially static (e.g., import(‘./locale/’ + language + ‘.json’)).
&lt;a href=&quot;https://webpack.js.org/guides/code-splitting-import/#dynamic-import&quot;&gt;Code Splitting - Using import()&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A context is created if your request contains expressions, so the exact module is not known on compile time.
&lt;a href=&quot;https://webpack.js.org/guides/dependency-management/#require-with-expression&quot;&gt;Dependency Management&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;require-with-expression訳してみるgoogle翻訳&quot;&gt;require with expression　訳してみる(Google翻訳)&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;A context is created if your request contains expressions, so the exact module is not known on compile time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;リクエストに式が含まれている場合、コンテキストが作成されるため、コンパイル時に正確なモジュールが認識されません。&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./template/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.ejs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;webpack parses the require() call and extracts some information:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;webpackはrequire（）呼び出しを解析し、いくつかの情報を抽出します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Directory: ./template
Regular expression: /^.*\.ejs$/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;context-module-ってなんだ&quot;&gt;context module ってなんだ&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;A context module is generated. It contains references to all modules in that directory that can be required with a request matching the regular expression. The context module contains a map which translates requests to module ids.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コンテキストモジュールが生成されます。このディレクトリには、正規表現に一致する要求が必要な、そのディレクトリ内のすべてのモジュールへの参照が含まれています。コンテキストモジュールには、要求をモジュールIDに変換するマップが含まれています。&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;./table.ejs&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;./table-row.ejs&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;./directory/folder.ejs&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The context module also contains some runtime logic to access the map.&lt;/p&gt;

  &lt;p&gt;This means dynamic requires are supported but will cause all possible modules to be included in the bundle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コンテキストモジュールには、マップにアクセスするためのランタイムロジックも含まれています。 これは動的要件がサポートされているが、すべての可能なモジュールがバンドルに含まれることを意味します。&lt;/p&gt;

&lt;h4 id=&quot;context-module-api&quot;&gt;context module API&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;A context module exports a (require) function that takes one argument: the request.
The exported function has 3 properties: resolve, keys, id.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;コンテキストモジュールは、1つの引数（request）を受け取る（require）関数をエクスポートします。 エクスポートされた関数には、resolve、keys、idという3つのプロパティがあります。&lt;/p&gt;

&lt;h4 id=&quot;突如解決する&quot;&gt;突如解決する&lt;/h4&gt;

&lt;p&gt;webpack1のドキュメントにこんな文章を見つける。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the module source contains a require that cannot be statically analyzed, the context is the current directory.
In this case a Critical dependencies warning is emitted. You need to use the ContextReplacementPlugin in most cases.
Examples: someFn(require) require.bind(null)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;静的解決できない&lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt;がソースに含まれている場合、そのときのcontextはカレントディレクトリとなる。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ← modulePathがカレントからの相対パスでないとダメ…？&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;実はモジュールパス解決をしたくて&lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;に手を入れていた。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 省略&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.js'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// root: [ path.resolve('./js') ], // webpack 1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// webpack 2&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/node_modules'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;path.resolve&lt;/code&gt;で指定したディレクトリをルートとした相対パスで書けるようにしていた(つもりだった)が、実際はカレントディレクトリからのパスが必要だった。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modulePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 動いた&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;更になんか見つける&quot;&gt;更になんか見つける&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/configuration/module/#module-contexts&quot;&gt;Module&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;These options describe the default settings for the context created when a dynamic dependency is encountered.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これらのオプションは、動的依存関係が発生したときに作成されるコンテキストのデフォルト設定を記述します。&lt;/p&gt;

&lt;p&gt;どうやら今回のように動的依存解決が発生している場合の「デフォルト」が内部的に指定されている模様。そしてそれを書き換えるプラグインもある模様(ただしDeprecated)。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;exprContextCritical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;exprContextRecursive&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;exprContextRegExp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;exprContextRequest&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;unknownContextCritical&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;unknownContextRecursive&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;unknownContextRegExp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;unknownContextRequest&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// ←エラーの文言で見覚えあるぞ！！！&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;wrappedContextCritical&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;wrappedContextRecursive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;wrappedContextRegExp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: You can use the ContextReplacementPlugin to modify these values for individual dependencies. This also removes the warning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ContextReplacementPluginを使用して、個々の依存関係のこれらの値を変更できます。これにより、警告も削除されます。&lt;/p&gt;

&lt;p&gt;ふむふむ🤔&lt;br /&gt;
とりあえず動いてよかった。&lt;/p&gt;</content><author><name></name></author><summary type="html">まえがき</summary></entry></feed>